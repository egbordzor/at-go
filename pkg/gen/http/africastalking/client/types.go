// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client types
//
// Command:
// $ goa gen github.com/wondenge/at-go/design -o pkg

package client

import (
	africastalking "github.com/wondenge/at-go/pkg/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-go/pkg/gen/africastalking/views"
	goa "goa.design/goa/v3/pkg"
)

// SendBulkSMSRequestBody is the type of the "africastalking" service
// "SendBulkSMS" endpoint HTTP request body.
type SendBulkSMSRequestBody struct {
	// Africa’s Talking application username
	Username string `form:"username" json:"username" xml:"username"`
	// Recipients’ phone numbers
	To string `form:"to" json:"to" xml:"to"`
	// Message to be sent
	Message string `form:"message" json:"message" xml:"message"`
	// Registered Short Code or Alphanumeric
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Used by MSP to determine who gets billed for a message
	BulkSMSMode int `form:"bulkSMSMode,omitempty" json:"bulkSMSMode,omitempty" xml:"bulkSMSMode,omitempty"`
	// Used for Bulk SMS clients
	Enqueue int `form:"enqueue,omitempty" json:"enqueue,omitempty" xml:"enqueue,omitempty"`
	// The keyword to be used for a premium service
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// Used for premium services to send OnDemand messages
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// No. of hours subscription message should be retried
	RetryDurationInHours *string `form:"retryDurationInHours,omitempty" json:"retryDurationInHours,omitempty" xml:"retryDurationInHours,omitempty"`
}

// SendPremiumSMSRequestBody is the type of the "africastalking" service
// "SendPremiumSMS" endpoint HTTP request body.
type SendPremiumSMSRequestBody struct {
	// Africa’s Talking application username
	Username string `form:"username" json:"username" xml:"username"`
	// Recipients’ phone numbers
	To string `form:"to" json:"to" xml:"to"`
	// Message to be sent
	Message string `form:"message" json:"message" xml:"message"`
	// Registered Short Code or Alphanumeric
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Used by MSP to determine who gets billed for a message
	BulkSMSMode int `form:"bulkSMSMode,omitempty" json:"bulkSMSMode,omitempty" xml:"bulkSMSMode,omitempty"`
	// Used for Bulk SMS clients
	Enqueue int `form:"enqueue,omitempty" json:"enqueue,omitempty" xml:"enqueue,omitempty"`
	// The keyword to be used for a premium service
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// Used for premium services to send OnDemand messages
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// No. of hours subscription message should be retried
	RetryDurationInHours *string `form:"retryDurationInHours,omitempty" json:"retryDurationInHours,omitempty" xml:"retryDurationInHours,omitempty"`
}

// NewCheckoutTokenRequestBody is the type of the "africastalking" service
// "NewCheckoutToken" endpoint HTTP request body.
type NewCheckoutTokenRequestBody struct {
	// Mobile phone number you want to create a subscription for.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
}

// NewPremiumSubscriptionRequestBody is the type of the "africastalking"
// service "NewPremiumSubscription" endpoint HTTP request body.
type NewPremiumSubscriptionRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Premium short code mapped to your account
	ShortCode string `form:"shortCode" json:"shortCode" xml:"shortCode"`
	// Premium keyword under short code mapped to your account.
	Keyword string `form:"keyword" json:"keyword" xml:"keyword"`
	// The phoneNumber to be subscribed
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
	// Token used to validate the subscription request
	CheckoutToken string `form:"checkoutToken" json:"checkoutToken" xml:"checkoutToken"`
}

// PurgePremiumSubscriptionRequestBody is the type of the "africastalking"
// service "PurgePremiumSubscription" endpoint HTTP request body.
type PurgePremiumSubscriptionRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Premium short code mapped to your account
	ShortCode string `form:"shortCode" json:"shortCode" xml:"shortCode"`
	// Premium keyword under short code mapped to your account.
	Keyword string `form:"keyword" json:"keyword" xml:"keyword"`
	// The phoneNumber to be unsubscribed.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
}

// MakeCallRequestBody is the type of the "africastalking" service "MakeCall"
// endpoint HTTP request body.
type MakeCallRequestBody struct {
	// Africa’s Talking Username
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking phone number
	From string `form:"from" json:"from" xml:"from"`
	// A comma separated string of recipients’ phone numbers.
	To string `form:"to" json:"to" xml:"to"`
	// Variable sent to Events Callback URL used to tag the call
	ClientRequestID *string `form:"clientRequestId,omitempty" json:"clientRequestId,omitempty" xml:"clientRequestId,omitempty"`
}

// TransferCallRequestBody is the type of the "africastalking" service
// "TransferCall" endpoint HTTP request body.
type TransferCallRequestBody struct {
	// Session Id of the ongoing call, it must have two legs
	SessionID string `form:"sessionId" json:"sessionId" xml:"sessionId"`
	// Phone Number to transfer the call to
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
	// Call leg to transfer the call to either caller or callee
	CallLeg string `form:"callLeg,omitempty" json:"callLeg,omitempty" xml:"callLeg,omitempty"`
	// The url of the media file to be played when the user is on hold.
	HoldMusicURL *string `form:"holdMusicUrl,omitempty" json:"holdMusicUrl,omitempty" xml:"holdMusicUrl,omitempty"`
}

// SayRequestBody is the type of the "africastalking" service "Say" endpoint
// HTTP request body.
type SayRequestBody struct {
	// This parameter specifies the voice to use
	Voice string `form:"voice,omitempty" json:"voice,omitempty" xml:"voice,omitempty"`
	// Instructs AT to play a beep after reading the text contained in the request
	PlayBeep bool `form:"playBeep,omitempty" json:"playBeep,omitempty" xml:"playBeep,omitempty"`
}

// PlayRequestBody is the type of the "africastalking" service "Play" endpoint
// HTTP request body.
type PlayRequestBody struct {
	// A valid URL that contains a link to the file to be played.
	URL string `form:"url" json:"url" xml:"url"`
}

// GetDigitsRequestBody is the type of the "africastalking" service "GetDigits"
// endpoint HTTP request body.
type GetDigitsRequestBody struct {
	// Instructs AT to forward results of the GetDigits action to the URL value
	// passed in.
	CallbackURL *string `form:"callbackUrl,omitempty" json:"callbackUrl,omitempty" xml:"callbackUrl,omitempty"`
	// This shows the number of digits you would like to grab from the user input.
	NumDigits *string `form:"numDigits,omitempty" json:"numDigits,omitempty" xml:"numDigits,omitempty"`
	// Timeout (in seconds) for getting the digits, after which the system moves on
	// to the next element.
	Timeout *string `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// The key which will terminate the action of getting digits.
	FinishOnKey *string `form:"finishOnKey,omitempty" json:"finishOnKey,omitempty" xml:"finishOnKey,omitempty"`
}

// DialRequestBody is the type of the "africastalking" service "Dial" endpoint
// HTTP request body.
type DialRequestBody struct {
	PhoneNumbers string  `form:"phoneNumbers" json:"phoneNumbers" xml:"phoneNumbers"`
	Record       *string `form:"record,omitempty" json:"record,omitempty" xml:"record,omitempty"`
	Sequential   *string `form:"sequential,omitempty" json:"sequential,omitempty" xml:"sequential,omitempty"`
	CallerID     *string `form:"callerId,omitempty" json:"callerId,omitempty" xml:"callerId,omitempty"`
	RingBackTone *string `form:"ringBackTone,omitempty" json:"ringBackTone,omitempty" xml:"ringBackTone,omitempty"`
	// This contains the maximum amount of time in seconds a call should take.
	MaxDuration *string `form:"maxDuration,omitempty" json:"maxDuration,omitempty" xml:"maxDuration,omitempty"`
}

// RecordRequestBody is the type of the "africastalking" service "Record"
// endpoint HTTP request body.
type RecordRequestBody struct {
	FinishOnKey *string `form:"finishOnKey,omitempty" json:"finishOnKey,omitempty" xml:"finishOnKey,omitempty"`
	MaxLength   *string `form:"maxLength,omitempty" json:"maxLength,omitempty" xml:"maxLength,omitempty"`
	Timeout     *string `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	TrimSilence *string `form:"trimSilence,omitempty" json:"trimSilence,omitempty" xml:"trimSilence,omitempty"`
	PlayBeep    *string `form:"playBeep,omitempty" json:"playBeep,omitempty" xml:"playBeep,omitempty"`
	CallbackURL *string `form:"callbackUrl,omitempty" json:"callbackUrl,omitempty" xml:"callbackUrl,omitempty"`
}

// EnqueueRequestBody is the type of the "africastalking" service "Enqueue"
// endpoint HTTP request body.
type EnqueueRequestBody struct {
	HoldMusic *string `form:"holdMusic,omitempty" json:"holdMusic,omitempty" xml:"holdMusic,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// DequeueRequestBody is the type of the "africastalking" service "Dequeue"
// endpoint HTTP request body.
type DequeueRequestBody struct {
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RedirectRequestBody is the type of the "africastalking" service "Redirect"
// endpoint HTTP request body.
type RedirectRequestBody struct {
	// Reject
	Reject *string `form:"Reject,omitempty" json:"Reject,omitempty" xml:"Reject,omitempty"`
}

// RejectRequestBody is the type of the "africastalking" service "Reject"
// endpoint HTTP request body.
type RejectRequestBody struct {
	// Redirect
	Redirect *string `form:"Redirect,omitempty" json:"Redirect,omitempty" xml:"Redirect,omitempty"`
}

// QueueRequestBody is the type of the "africastalking" service "Queue"
// endpoint HTTP request body.
type QueueRequestBody struct {
	// Your Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// List of one or more numbers mapped to your Africa’s Talking account.
	PhoneNumbers string `form:"phoneNumbers" json:"phoneNumbers" xml:"phoneNumbers"`
}

// UploadMediaRequestBody is the type of the "africastalking" service
// "UploadMedia" endpoint HTTP request body.
type UploadMediaRequestBody struct {
	// Your Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The url of the file to upload.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// MobileCheckoutRequestBody is the type of the "africastalking" service
// "MobileCheckout" endpoint HTTP request body.
type MobileCheckoutRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName string `form:"productName" json:"productName" xml:"productName"`
	// Provider channel the payment will be initiated from.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Phone number of the client that will complete this transaction.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
	// 3-digit ISO format currency code.
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount client is expected to confirm.
	Amount string `form:"amount" json:"amount" xml:"amount"`
	// Map of any metadata associates with the request
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// MobileB2CRequestBody is the type of the "africastalking" service "MobileB2C"
// endpoint HTTP request body.
type MobileB2CRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment Product to initiate this transaction.
	ProductName string `form:"productName" json:"productName" xml:"productName"`
	// A list of B2C Mobile Recipients
	Recipients []*MobileRecipientsRequestBody `form:"recipients" json:"recipients" xml:"recipients"`
}

// MobileB2BRequestBody is the type of the "africastalking" service "MobileB2B"
// endpoint HTTP request body.
type MobileB2BRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment Product initiating transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Provider used to process the B2C request.
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Transfer type of the payment.
	TransferType *string `form:"transferType,omitempty" json:"transferType,omitempty" xml:"transferType,omitempty"`
	// 3-digit ISO format currency code
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount client is expected to confirm.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Name or number of the channel receiving payment by the provider.
	DestinationChannel *string `form:"destinationChannel,omitempty" json:"destinationChannel,omitempty" xml:"destinationChannel,omitempty"`
	// Account name used by the business to receive money on the provided
	// destinationChannel.
	DestinationAccount *string `form:"destinationAccount,omitempty" json:"destinationAccount,omitempty" xml:"destinationAccount,omitempty"`
	// A map of any metadata associated with the request.
	Metadata *string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// BankCheckoutRequestBody is the type of the "africastalking" service "Bank
// Checkout" endpoint HTTP request body.
type BankCheckoutRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment Product to initiate this transaction.
	ProductName string                  `form:"productName" json:"productName" xml:"productName"`
	BankAccount *BankAccountRequestBody `form:"bankAccount" json:"bankAccount" xml:"bankAccount"`
	// 3-digit ISO format currency code.
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount client is expected to confirm.
	Amount float64 `form:"amount" json:"amount" xml:"amount"`
	// Short description of the transaction displayed on the clients statement.
	Narration string `form:"narration" json:"narration" xml:"narration"`
	// A map of any metadata that you would like us to associate with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// BankCheckoutValidateRequestBody is the type of the "africastalking" service
// "BankCheckoutValidate" endpoint HTTP request body.
type BankCheckoutValidateRequestBody struct {
	// Africa’s Talking application Username.
	Username string `form:"username" json:"username" xml:"username"`
	// The ID of the transaction to be validated.
	TransactionID string `form:"transactionId" json:"transactionId" xml:"transactionId"`
	// One Time Password bank sent to the client.
	Otp string `form:"otp" json:"otp" xml:"otp"`
}

// BankTransferRequestBody is the type of the "africastalking" service
// "BankTransfer" endpoint HTTP request body.
type BankTransferRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName string `form:"productName" json:"productName" xml:"productName"`
	// Transfer Recipients
	Recipients []*TransferRecipientsRequestBody `form:"recipients" json:"recipients" xml:"recipients"`
}

// CardCheckoutRequestBody is the type of the "africastalking" service
// "CardCheckout" endpoint HTTP request body.
type CardCheckoutRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment Product initiating transaction.
	ProductName string                  `form:"productName" json:"productName" xml:"productName"`
	PaymentCard *PaymentCardRequestBody `form:"paymentCard,omitempty" json:"paymentCard,omitempty" xml:"paymentCard,omitempty"`
	// Token generated by AfricasTalking
	CheckoutToken *string `form:"checkoutToken,omitempty" json:"checkoutToken,omitempty" xml:"checkoutToken,omitempty"`
	// 3-digit ISO format currency code.
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount client is expected to confirm.
	Amount float64 `form:"amount" json:"amount" xml:"amount"`
	// Short description of the transaction.
	Narration string `form:"narration" json:"narration" xml:"narration"`
	// Metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// CardCheckoutValidateRequestBody is the type of the "africastalking" service
// "CardCheckoutValidate" endpoint HTTP request body.
type CardCheckoutValidateRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// ID of the transaction application wants to validate.
	TransactionID string `form:"transactionId" json:"transactionId" xml:"transactionId"`
	// One Time Password card provider sent to the client.
	Otp string `form:"otp" json:"otp" xml:"otp"`
}

// WalletTransferRequestBody is the type of the "africastalking" service
// "WalletTransfer" endpoint HTTP request body.
type WalletTransferRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName string `form:"productName" json:"productName" xml:"productName"`
	// Unique product code to transfer the funds to.
	TargetProductCode string `form:"targetProductCode" json:"targetProductCode" xml:"targetProductCode"`
	// 3-digit ISO format currency code
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount application will be topped up with.
	Amount float64 `form:"amount" json:"amount" xml:"amount"`
	// Metadata associated with the request.
	Metadata map[string]string `form:"metadata" json:"metadata" xml:"metadata"`
}

// TopupStashRequestBody is the type of the "africastalking" service
// "TopupStash" endpoint HTTP request body.
type TopupStashRequestBody struct {
	// Africa’s Talking application username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa’s Talking Payment product initiating transaction.
	ProductName string `form:"productName" json:"productName" xml:"productName"`
	// 3-digit ISO format currency code.
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount application will be topped up with.
	Amount float64 `form:"amount" json:"amount" xml:"amount"`
	// Metadata associated with the request.
	Metadata map[string]string `form:"metadata" json:"metadata" xml:"metadata"`
}

// SendAirtimeRequestBody is the type of the "africastalking" service
// "SendAirtime" endpoint HTTP request body.
type SendAirtimeRequestBody struct {
	// Africa’s Talking application username.
	Username   string                          `form:"username" json:"username" xml:"username"`
	Recipients []*AirtimeRecipientsRequestBody `form:"recipients" json:"recipients" xml:"recipients"`
}

// PublishIoTRequestBody is the type of the "africastalking" service
// "PublishIoT" endpoint HTTP request body.
type PublishIoTRequestBody struct {
	// Africa’s Talking application username
	Username string `form:"username" json:"username" xml:"username"`
	// Device group to which the message is to be sent
	DeviceGroup string `form:"deviceGroup" json:"deviceGroup" xml:"deviceGroup"`
	// Messaging channel to which the message is to be sent.
	Topic string `form:"topic" json:"topic" xml:"topic"`
	// Message packet to be sent to the subscribed devices
	Payload string `form:"payload" json:"payload" xml:"payload"`
}

// GenerateRequestBody is the type of the "africastalking" service "Generate"
// endpoint HTTP request body.
type GenerateRequestBody struct {
	// Africa's Talking Username.
	Username string `form:"username" json:"username" xml:"username"`
	// Africa's Talking API Key.
	APIKey string `form:"apiKey" json:"apiKey" xml:"apiKey"`
}

// SendBulkSMSResponseBody is the type of the "africastalking" service
// "SendBulkSMS" endpoint HTTP response body.
type SendBulkSMSResponseBody struct {
	SMSMessageData *BulkSMSMessageDataResponseBody `form:"SMSMessageData,omitempty" json:"SMSMessageData,omitempty" xml:"SMSMessageData,omitempty"`
}

// SendPremiumSMSResponseBody is the type of the "africastalking" service
// "SendPremiumSMS" endpoint HTTP response body.
type SendPremiumSMSResponseBody struct {
	SMSMessageData *PremiumSMSMessageDataResponseBody `form:"SMSMessageData,omitempty" json:"SMSMessageData,omitempty" xml:"SMSMessageData,omitempty"`
}

// FetchSMSResponseBody is the type of the "africastalking" service "FetchSMS"
// endpoint HTTP response body.
type FetchSMSResponseBody struct {
	SMSMessageData *FetchSMSMessageDataResponseBody `form:"SMSMessageData,omitempty" json:"SMSMessageData,omitempty" xml:"SMSMessageData,omitempty"`
}

// NewCheckoutTokenResponseBody is the type of the "africastalking" service
// "NewCheckoutToken" endpoint HTTP response body.
type NewCheckoutTokenResponseBody struct {
	// A description of the status of the request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The checkout token to be used
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// NewPremiumSubscriptionResponseBody is the type of the "africastalking"
// service "NewPremiumSubscription" endpoint HTTP response body.
type NewPremiumSubscriptionResponseBody struct {
	// Indicates whether the prompt to subscribe to shortcode was successfully
	// raised or not.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Describes status of the create subscription request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// FetchPremiumSubscriptionResponseBody is the type of the "africastalking"
// service "FetchPremiumSubscription" endpoint HTTP response body.
type FetchPremiumSubscriptionResponseBody struct {
	// A list of subscriptions made to the product.
	Subscriptions []*SubscriptionsResponseBody `form:"Subscriptions,omitempty" json:"Subscriptions,omitempty" xml:"Subscriptions,omitempty"`
}

// PurgePremiumSubscriptionResponseBody is the type of the "africastalking"
// service "PurgePremiumSubscription" endpoint HTTP response body.
type PurgePremiumSubscriptionResponseBody struct {
	// Indicates whether the phone number was successfully unsubscribed or not.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Describes status of the delete subscription request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// MakeCallResponseBody is the type of the "africastalking" service "MakeCall"
// endpoint HTTP response body.
type MakeCallResponseBody struct {
	Entries []*VoiceEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// Error message if ENTIRE request was rejected by the API.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// TransferCallResponseBody is the type of the "africastalking" service
// "TransferCall" endpoint HTTP response body.
type TransferCallResponseBody struct {
	// can be either Success or Aborted
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Why the transfer ws aborted None is successful
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// QueueResponseBody is the type of the "africastalking" service "Queue"
// endpoint HTTP response body.
type QueueResponseBody struct {
	Entries []*QueuedStatusEntryResponseBody `form:"Entries,omitempty" json:"Entries,omitempty" xml:"Entries,omitempty"`
	// Error Message
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// MobileCheckoutResponseBody is the type of the "africastalking" service
// "MobileCheckout" endpoint HTTP response body.
type MobileCheckoutResponseBody struct {
	// Status of the request
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Provider channel used to initiate this transaction.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
}

// MobileB2CResponseBody is the type of the "africastalking" service
// "MobileB2C" endpoint HTTP response body.
type MobileB2CResponseBody struct {
	// Number of B2C transactions that were successfully queued.
	NumQueued *int `form:"numQueued,omitempty" json:"numQueued,omitempty" xml:"numQueued,omitempty"`
	// Total value of all the transactions that were successfully queued.
	TotalValue *string `form:"totalValue,omitempty" json:"totalValue,omitempty" xml:"totalValue,omitempty"`
	// Total transaction fee charged for all the transactions that were
	// successfully queued.
	TotalTransactionFee *string `form:"totalTransactionFee,omitempty" json:"totalTransactionFee,omitempty" xml:"totalTransactionFee,omitempty"`
	// A list of B2C entries
	Entries []*B2CEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// Error message if the ENTIRE request was rejected by the API
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// MobileB2BResponseBody is the type of the "africastalking" service
// "MobileB2B" endpoint HTTP response body.
type MobileB2BResponseBody struct {
	// The status of the B2B transaction.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique id that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// Provider channel which facilitated the payment.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// BankCheckoutResponseBody is the type of the "africastalking" service "Bank
// Checkout" endpoint HTTP response body.
type BankCheckoutResponseBody struct {
	// This corresponds to the status of the request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// BankCheckoutValidateResponseBody is the type of the "africastalking" service
// "BankCheckoutValidate" endpoint HTTP response body.
type BankCheckoutValidateResponseBody struct {
	// The final status of this request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// BankTransferResponseBody is the type of the "africastalking" service
// "BankTransfer" endpoint HTTP response body.
type BankTransferResponseBody struct {
	// Transfer Entries
	Entries []*TransferEntriesResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// CardCheckoutResponseBody is the type of the "africastalking" service
// "CardCheckout" endpoint HTTP response body.
type CardCheckoutResponseBody struct {
	// The status of the request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID generated for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// CardCheckoutValidateResponseBody is the type of the "africastalking" service
// "CardCheckoutValidate" endpoint HTTP response body.
type CardCheckoutValidateResponseBody struct {
	// Corresponds to the final status of this request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Token application can use to initiate subsequent charges.
	CheckoutToken *string `form:"checkoutToken,omitempty" json:"checkoutToken,omitempty" xml:"checkoutToken,omitempty"`
}

// WalletTransferResponseBody is the type of the "africastalking" service
// "WalletTransfer" endpoint HTTP response body.
type WalletTransferResponseBody struct {
	// Corresponds to the status of the request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// A unique id that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// TopupStashResponseBody is the type of the "africastalking" service
// "TopupStash" endpoint HTTP response body.
type TopupStashResponseBody struct {
	// Corresponds to the status of the request
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// SendAirtimeResponseBody is the type of the "africastalking" service
// "SendAirtime" endpoint HTTP response body.
type SendAirtimeResponseBody struct {
	// Number of requests sent to the provider
	NumSent *int `form:"numSent,omitempty" json:"numSent,omitempty" xml:"numSent,omitempty"`
	// Total value of airtime sent to the provider.
	TotalAmount *string `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
	// Total discount applied on the airtime.
	TotalDiscount *string                     `form:"totalDiscount,omitempty" json:"totalDiscount,omitempty" xml:"totalDiscount,omitempty"`
	Responses     []*AirtimeEntryResponseBody `form:"responses,omitempty" json:"responses,omitempty" xml:"responses,omitempty"`
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// PublishIoTResponseBody is the type of the "africastalking" service
// "PublishIoT" endpoint HTTP response body.
type PublishIoTResponseBody struct {
	// Response status of the API request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Verbose response message detailing the status of the HTTP response
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// InitiateAppDataResponseBody is the type of the "africastalking" service
// "InitiateAppData" endpoint HTTP response body.
type InitiateAppDataResponseBody struct {
	UserData *UserDataResponseBody `form:"UserData,omitempty" json:"UserData,omitempty" xml:"UserData,omitempty"`
}

// GenerateResponseBody is the type of the "africastalking" service "Generate"
// endpoint HTTP response body.
type GenerateResponseBody struct {
	// Generated Auth Token.
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Token Lifetime
	LifetimeInSeconds *int `form:"lifetimeInSeconds,omitempty" json:"lifetimeInSeconds,omitempty" xml:"lifetimeInSeconds,omitempty"`
}

// BulkSMSMessageDataResponseBody is used to define fields on response body
// types.
type BulkSMSMessageDataResponseBody struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string `form:"Messages,omitempty" json:"Messages,omitempty" xml:"Messages,omitempty"`
	// A list of recipients included in the original request.
	Recipients []*RecipientsResponseBody `form:"Recipients,omitempty" json:"Recipients,omitempty" xml:"Recipients,omitempty"`
}

// RecipientsResponseBody is used to define fields on response body types.
type RecipientsResponseBody struct {
	// This corresponds to the status of the request
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// The recipient’s phone number
	Number *string `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
	// A string indicating whether the sms was sent to this recipient or not.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Amount incurred to send this sms.
	Cost *string `form:"cost,omitempty" json:"cost,omitempty" xml:"cost,omitempty"`
	// The messageId received when the sms was sent.
	MessageID *string `form:"messageId,omitempty" json:"messageId,omitempty" xml:"messageId,omitempty"`
}

// PremiumSMSMessageDataResponseBody is used to define fields on response body
// types.
type PremiumSMSMessageDataResponseBody struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string `form:"Messages,omitempty" json:"Messages,omitempty" xml:"Messages,omitempty"`
	// A list of recipients included in the original request.
	Recipients []*RecipientsResponseBody `form:"Recipients,omitempty" json:"Recipients,omitempty" xml:"Recipients,omitempty"`
}

// FetchSMSMessageDataResponseBody is used to define fields on response body
// types.
type FetchSMSMessageDataResponseBody struct {
	Messages []*MessagesResponseBody `form:"Messages,omitempty" json:"Messages,omitempty" xml:"Messages,omitempty"`
}

// MessagesResponseBody is used to define fields on response body types.
type MessagesResponseBody struct {
	// A unique identifier attached to each incoming message.
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// The content of the message received.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Your registered short code that the sms was sent out to.
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// The id of the message.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The date when the sms was sent.
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The sender’s phone number.
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
}

// SubscriptionsResponseBody is used to define fields on response body types.
type SubscriptionsResponseBody struct {
	// The id of the subscription
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The phone number subscribed to the product.
	Number *string `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
	// Timestamp when the subscription was made.
	Date *string `form:"Date,omitempty" json:"Date,omitempty" xml:"Date,omitempty"`
}

// VoiceEntryResponseBody is used to define fields on response body types.
type VoiceEntryResponseBody struct {
	// The phone number queued.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	Status      *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique id for the request associated to this phone number
	SessionID *string `form:"sessionId,omitempty" json:"sessionId,omitempty" xml:"sessionId,omitempty"`
}

// QueuedStatusEntryResponseBody is used to define fields on response body
// types.
type QueuedStatusEntryResponseBody struct {
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	QueueName   *string `form:"queueName,omitempty" json:"queueName,omitempty" xml:"queueName,omitempty"`
	NumCalls    *string `form:"numCalls,omitempty" json:"numCalls,omitempty" xml:"numCalls,omitempty"`
}

// MobileRecipientsRequestBody is used to define fields on request body types.
type MobileRecipientsRequestBody struct {
	// Name of the B2C transaction recipient.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Phone number of the B2C transaction recipient.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
	// 3-digit ISO format currency code.
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount that the client is expected to confirm.
	Amount string `form:"amount" json:"amount" xml:"amount"`
	// Channel payment will be made from.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Purpose of the payment.
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Map of metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// B2CEntryResponseBody is used to define fields on response body types.
type B2CEntryResponseBody struct {
	// The phone number of the B2C transaction recipient.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// The status of the B2C transaction.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Provider used to process the B2C request.
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Channel used to process the B2C request.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Value sent to the mobile subscriber.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// BankAccountRequestBody is used to define fields on request body types.
type BankAccountRequestBody struct {
	// Bank account name.
	AccountName string `form:"accountName" json:"accountName" xml:"accountName"`
	// Bank account number.
	AccountNumber string `form:"accountNumber" json:"accountNumber" xml:"accountNumber"`
	// 6-Digit Integer code for the bank that we allocate.
	BankCode int `form:"bankCode" json:"bankCode" xml:"bankCode"`
	// Date of birth of the account owner.
	DateOfBirth string `form:"dateOfBirth" json:"dateOfBirth" xml:"dateOfBirth"`
}

// TransferRecipientsRequestBody is used to define fields on request body types.
type TransferRecipientsRequestBody struct {
	// Details of a bank account to receive the bank transfer payment.
	BankAccount string `form:"bankAccount" json:"bankAccount" xml:"bankAccount"`
	// Bank account name.
	AccountName *string `form:"accountName,omitempty" json:"accountName,omitempty" xml:"accountName,omitempty"`
	// Bank account number.
	AccountNumber string `form:"accountNumber" json:"accountNumber" xml:"accountNumber"`
	// 6-Digit Integer code for the bank that we allocate.
	BankCode string `form:"bankCode" json:"bankCode" xml:"bankCode"`
	// Date of birth of the account owner.
	DateOfBirth *string `form:"dateOfBirth,omitempty" json:"dateOfBirth,omitempty" xml:"dateOfBirth,omitempty"`
	// 3-digit ISO format currency code
	CurrencyCode string `form:"currencyCode" json:"currencyCode" xml:"currencyCode"`
	// Amount client is expected to receive.
	Amount string `form:"amount" json:"amount" xml:"amount"`
	// Short description of the transaction displayed on the clients statement.
	Narration *string `form:"narration,omitempty" json:"narration,omitempty" xml:"narration,omitempty"`
	// A map of any metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// TransferEntriesResponseBody is used to define fields on response body types.
type TransferEntriesResponseBody struct {
	// The account number of the bank transfer recipient.
	AccountNumber *string `form:"accountNumber,omitempty" json:"accountNumber,omitempty" xml:"accountNumber,omitempty"`
	// The transaction has been accepted and queued for processing by the payment
	// provider.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// PaymentCardRequestBody is used to define fields on request body types.
type PaymentCardRequestBody struct {
	// Payment card number.
	Number string `form:"number" json:"number" xml:"number"`
	// 3 or 4 digit payment card verification value.
	CvvNumber int `form:"cvvNumber" json:"cvvNumber" xml:"cvvNumber"`
	// Expiration month on the payment card.
	ExpiryMonth int `form:"expiryMonth" json:"expiryMonth" xml:"expiryMonth"`
	// Expiration year on the payment card.
	ExpiryYear int `form:"expiryYear" json:"expiryYear" xml:"expiryYear"`
	// 2-Digit country code where the payment card was issued.
	CountryCode string `form:"countryCode" json:"countryCode" xml:"countryCode"`
	// The payment cards ATM PIN.
	AuthToken string `form:"authToken" json:"authToken" xml:"authToken"`
}

// AirtimeRecipientsRequestBody is used to define fields on request body types.
type AirtimeRecipientsRequestBody struct {
	// Phone number that will be topped up.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Value of airtime to send together with the currency code.
	Amount *string `form:"amount ,omitempty" json:"amount ,omitempty" xml:"amount ,omitempty"`
}

// AirtimeEntryResponseBody is used to define fields on response body types.
type AirtimeEntryResponseBody struct {
	// Phone number for this transaction.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Value of airtime requested.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Discount applied to the requested airtime amount.
	Discount *string `form:"discount,omitempty" json:"discount,omitempty" xml:"discount,omitempty"`
	// Status of the request associated to this phone number
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Unique ID for the request associated to this phone number
	RequestID *string `form:"requestId,omitempty" json:"requestId,omitempty" xml:"requestId,omitempty"`
	// Error message for the request associated to this phone number.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// UserDataResponseBody is used to define fields on response body types.
type UserDataResponseBody struct {
	// Your Africa’s Talking application balance.
	Balance *string `form:"balance,omitempty" json:"balance,omitempty" xml:"balance,omitempty"`
}

// NewSendBulkSMSRequestBody builds the HTTP request body from the payload of
// the "SendBulkSMS" endpoint of the "africastalking" service.
func NewSendBulkSMSRequestBody(p *africastalking.BulkPayload) *SendBulkSMSRequestBody {
	body := &SendBulkSMSRequestBody{
		Username:             p.Username,
		To:                   p.To,
		Message:              p.Message,
		From:                 p.From,
		BulkSMSMode:          p.BulkSMSMode,
		Enqueue:              p.Enqueue,
		Keyword:              p.Keyword,
		LinkID:               p.LinkID,
		RetryDurationInHours: p.RetryDurationInHours,
	}
	return body
}

// NewSendPremiumSMSRequestBody builds the HTTP request body from the payload
// of the "SendPremiumSMS" endpoint of the "africastalking" service.
func NewSendPremiumSMSRequestBody(p *africastalking.PremiumPayload) *SendPremiumSMSRequestBody {
	body := &SendPremiumSMSRequestBody{
		Username:             p.Username,
		To:                   p.To,
		Message:              p.Message,
		From:                 p.From,
		BulkSMSMode:          p.BulkSMSMode,
		Enqueue:              p.Enqueue,
		Keyword:              p.Keyword,
		LinkID:               p.LinkID,
		RetryDurationInHours: p.RetryDurationInHours,
	}
	return body
}

// NewNewCheckoutTokenRequestBody builds the HTTP request body from the payload
// of the "NewCheckoutToken" endpoint of the "africastalking" service.
func NewNewCheckoutTokenRequestBody(p *africastalking.CheckoutTokenPayload) *NewCheckoutTokenRequestBody {
	body := &NewCheckoutTokenRequestBody{
		PhoneNumber: p.PhoneNumber,
	}
	return body
}

// NewNewPremiumSubscriptionRequestBody builds the HTTP request body from the
// payload of the "NewPremiumSubscription" endpoint of the "africastalking"
// service.
func NewNewPremiumSubscriptionRequestBody(p *africastalking.NewSubPayload) *NewPremiumSubscriptionRequestBody {
	body := &NewPremiumSubscriptionRequestBody{
		Username:      p.Username,
		ShortCode:     p.ShortCode,
		Keyword:       p.Keyword,
		PhoneNumber:   p.PhoneNumber,
		CheckoutToken: p.CheckoutToken,
	}
	return body
}

// NewPurgePremiumSubscriptionRequestBody builds the HTTP request body from the
// payload of the "PurgePremiumSubscription" endpoint of the "africastalking"
// service.
func NewPurgePremiumSubscriptionRequestBody(p *africastalking.PurgeSubPayload) *PurgePremiumSubscriptionRequestBody {
	body := &PurgePremiumSubscriptionRequestBody{
		Username:    p.Username,
		ShortCode:   p.ShortCode,
		Keyword:     p.Keyword,
		PhoneNumber: p.PhoneNumber,
	}
	return body
}

// NewMakeCallRequestBody builds the HTTP request body from the payload of the
// "MakeCall" endpoint of the "africastalking" service.
func NewMakeCallRequestBody(p *africastalking.MakeCallPayload) *MakeCallRequestBody {
	body := &MakeCallRequestBody{
		Username:        p.Username,
		From:            p.From,
		To:              p.To,
		ClientRequestID: p.ClientRequestID,
	}
	return body
}

// NewTransferCallRequestBody builds the HTTP request body from the payload of
// the "TransferCall" endpoint of the "africastalking" service.
func NewTransferCallRequestBody(p *africastalking.CallTransferPayload) *TransferCallRequestBody {
	body := &TransferCallRequestBody{
		SessionID:    p.SessionID,
		PhoneNumber:  p.PhoneNumber,
		CallLeg:      p.CallLeg,
		HoldMusicURL: p.HoldMusicURL,
	}
	return body
}

// NewSayRequestBody builds the HTTP request body from the payload of the "Say"
// endpoint of the "africastalking" service.
func NewSayRequestBody(p *africastalking.Say1) *SayRequestBody {
	body := &SayRequestBody{
		Voice:    p.Voice,
		PlayBeep: p.PlayBeep,
	}
	return body
}

// NewPlayRequestBody builds the HTTP request body from the payload of the
// "Play" endpoint of the "africastalking" service.
func NewPlayRequestBody(p *africastalking.Play1) *PlayRequestBody {
	body := &PlayRequestBody{
		URL: p.URL,
	}
	return body
}

// NewGetDigitsRequestBody builds the HTTP request body from the payload of the
// "GetDigits" endpoint of the "africastalking" service.
func NewGetDigitsRequestBody(p *africastalking.GetDigits1) *GetDigitsRequestBody {
	body := &GetDigitsRequestBody{
		CallbackURL: p.CallbackURL,
		NumDigits:   p.NumDigits,
		Timeout:     p.Timeout,
		FinishOnKey: p.FinishOnKey,
	}
	return body
}

// NewDialRequestBody builds the HTTP request body from the payload of the
// "Dial" endpoint of the "africastalking" service.
func NewDialRequestBody(p *africastalking.Dial1) *DialRequestBody {
	body := &DialRequestBody{
		PhoneNumbers: p.PhoneNumbers,
		Record:       p.Record,
		Sequential:   p.Sequential,
		CallerID:     p.CallerID,
		RingBackTone: p.RingBackTone,
		MaxDuration:  p.MaxDuration,
	}
	return body
}

// NewRecordRequestBody builds the HTTP request body from the payload of the
// "Record" endpoint of the "africastalking" service.
func NewRecordRequestBody(p *africastalking.Record1) *RecordRequestBody {
	body := &RecordRequestBody{
		FinishOnKey: p.FinishOnKey,
		MaxLength:   p.MaxLength,
		Timeout:     p.Timeout,
		TrimSilence: p.TrimSilence,
		PlayBeep:    p.PlayBeep,
		CallbackURL: p.CallbackURL,
	}
	return body
}

// NewEnqueueRequestBody builds the HTTP request body from the payload of the
// "Enqueue" endpoint of the "africastalking" service.
func NewEnqueueRequestBody(p *africastalking.Enqueue1) *EnqueueRequestBody {
	body := &EnqueueRequestBody{
		HoldMusic: p.HoldMusic,
		Name:      p.Name,
	}
	return body
}

// NewDequeueRequestBody builds the HTTP request body from the payload of the
// "Dequeue" endpoint of the "africastalking" service.
func NewDequeueRequestBody(p *africastalking.Dequeue1) *DequeueRequestBody {
	body := &DequeueRequestBody{
		PhoneNumber: p.PhoneNumber,
		Name:        p.Name,
	}
	return body
}

// NewRedirectRequestBody builds the HTTP request body from the payload of the
// "Redirect" endpoint of the "africastalking" service.
func NewRedirectRequestBody(p *africastalking.Redirect1) *RedirectRequestBody {
	body := &RedirectRequestBody{
		Reject: p.Reject,
	}
	return body
}

// NewRejectRequestBody builds the HTTP request body from the payload of the
// "Reject" endpoint of the "africastalking" service.
func NewRejectRequestBody(p *africastalking.Reject1) *RejectRequestBody {
	body := &RejectRequestBody{
		Redirect: p.Redirect,
	}
	return body
}

// NewQueueRequestBody builds the HTTP request body from the payload of the
// "Queue" endpoint of the "africastalking" service.
func NewQueueRequestBody(p *africastalking.QueuedCallsPayload) *QueueRequestBody {
	body := &QueueRequestBody{
		Username:     p.Username,
		PhoneNumbers: p.PhoneNumbers,
	}
	return body
}

// NewUploadMediaRequestBody builds the HTTP request body from the payload of
// the "UploadMedia" endpoint of the "africastalking" service.
func NewUploadMediaRequestBody(p *africastalking.UploadMediaFile) *UploadMediaRequestBody {
	body := &UploadMediaRequestBody{
		Username: p.Username,
		URL:      p.URL,
	}
	return body
}

// NewMobileCheckoutRequestBody builds the HTTP request body from the payload
// of the "MobileCheckout" endpoint of the "africastalking" service.
func NewMobileCheckoutRequestBody(p *africastalking.MobileCheckoutPayload) *MobileCheckoutRequestBody {
	body := &MobileCheckoutRequestBody{
		Username:        p.Username,
		ProductName:     p.ProductName,
		ProviderChannel: p.ProviderChannel,
		PhoneNumber:     p.PhoneNumber,
		CurrencyCode:    p.CurrencyCode,
		Amount:          p.Amount,
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]string, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewMobileB2CRequestBody builds the HTTP request body from the payload of the
// "MobileB2C" endpoint of the "africastalking" service.
func NewMobileB2CRequestBody(p *africastalking.MobileB2CPayload) *MobileB2CRequestBody {
	body := &MobileB2CRequestBody{
		Username:    p.Username,
		ProductName: p.ProductName,
	}
	if p.Recipients != nil {
		body.Recipients = make([]*MobileRecipientsRequestBody, len(p.Recipients))
		for i, val := range p.Recipients {
			body.Recipients[i] = marshalAfricastalkingMobileRecipientsToMobileRecipientsRequestBody(val)
		}
	}
	return body
}

// NewMobileB2BRequestBody builds the HTTP request body from the payload of the
// "MobileB2B" endpoint of the "africastalking" service.
func NewMobileB2BRequestBody(p *africastalking.MobileB2BPayload) *MobileB2BRequestBody {
	body := &MobileB2BRequestBody{
		Username:           p.Username,
		ProductName:        p.ProductName,
		Provider:           p.Provider,
		TransferType:       p.TransferType,
		CurrencyCode:       p.CurrencyCode,
		Amount:             p.Amount,
		DestinationChannel: p.DestinationChannel,
		DestinationAccount: p.DestinationAccount,
		Metadata:           p.Metadata,
	}
	return body
}

// NewBankCheckoutRequestBody builds the HTTP request body from the payload of
// the "Bank Checkout" endpoint of the "africastalking" service.
func NewBankCheckoutRequestBody(p *africastalking.BankCheckoutPayload) *BankCheckoutRequestBody {
	body := &BankCheckoutRequestBody{
		Username:     p.Username,
		ProductName:  p.ProductName,
		CurrencyCode: p.CurrencyCode,
		Amount:       p.Amount,
		Narration:    p.Narration,
	}
	if p.BankAccount != nil {
		body.BankAccount = marshalAfricastalkingBankAccountToBankAccountRequestBody(p.BankAccount)
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]string, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewBankCheckoutValidateRequestBody builds the HTTP request body from the
// payload of the "BankCheckoutValidate" endpoint of the "africastalking"
// service.
func NewBankCheckoutValidateRequestBody(p *africastalking.BankCheckoutValidatePayload) *BankCheckoutValidateRequestBody {
	body := &BankCheckoutValidateRequestBody{
		Username:      p.Username,
		TransactionID: p.TransactionID,
		Otp:           p.Otp,
	}
	return body
}

// NewBankTransferRequestBody builds the HTTP request body from the payload of
// the "BankTransfer" endpoint of the "africastalking" service.
func NewBankTransferRequestBody(p *africastalking.BankTransferPayload) *BankTransferRequestBody {
	body := &BankTransferRequestBody{
		Username:    p.Username,
		ProductName: p.ProductName,
	}
	if p.Recipients != nil {
		body.Recipients = make([]*TransferRecipientsRequestBody, len(p.Recipients))
		for i, val := range p.Recipients {
			body.Recipients[i] = marshalAfricastalkingTransferRecipientsToTransferRecipientsRequestBody(val)
		}
	}
	return body
}

// NewCardCheckoutRequestBody builds the HTTP request body from the payload of
// the "CardCheckout" endpoint of the "africastalking" service.
func NewCardCheckoutRequestBody(p *africastalking.CardCheckoutPayload) *CardCheckoutRequestBody {
	body := &CardCheckoutRequestBody{
		Username:      p.Username,
		ProductName:   p.ProductName,
		CheckoutToken: p.CheckoutToken,
		CurrencyCode:  p.CurrencyCode,
		Amount:        p.Amount,
		Narration:     p.Narration,
	}
	if p.PaymentCard != nil {
		body.PaymentCard = marshalAfricastalkingPaymentCardToPaymentCardRequestBody(p.PaymentCard)
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]string, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewCardCheckoutValidateRequestBody builds the HTTP request body from the
// payload of the "CardCheckoutValidate" endpoint of the "africastalking"
// service.
func NewCardCheckoutValidateRequestBody(p *africastalking.CardCheckoutValidatePayload) *CardCheckoutValidateRequestBody {
	body := &CardCheckoutValidateRequestBody{
		Username:      p.Username,
		TransactionID: p.TransactionID,
		Otp:           p.Otp,
	}
	return body
}

// NewWalletTransferRequestBody builds the HTTP request body from the payload
// of the "WalletTransfer" endpoint of the "africastalking" service.
func NewWalletTransferRequestBody(p *africastalking.WalletTransferPayload) *WalletTransferRequestBody {
	body := &WalletTransferRequestBody{
		Username:          p.Username,
		ProductName:       p.ProductName,
		TargetProductCode: p.TargetProductCode,
		CurrencyCode:      p.CurrencyCode,
		Amount:            p.Amount,
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]string, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewTopupStashRequestBody builds the HTTP request body from the payload of
// the "TopupStash" endpoint of the "africastalking" service.
func NewTopupStashRequestBody(p *africastalking.TopupStashPayload) *TopupStashRequestBody {
	body := &TopupStashRequestBody{
		Username:     p.Username,
		ProductName:  p.ProductName,
		CurrencyCode: p.CurrencyCode,
		Amount:       p.Amount,
	}
	if p.Metadata != nil {
		body.Metadata = make(map[string]string, len(p.Metadata))
		for key, val := range p.Metadata {
			tk := key
			tv := val
			body.Metadata[tk] = tv
		}
	}
	return body
}

// NewSendAirtimeRequestBody builds the HTTP request body from the payload of
// the "SendAirtime" endpoint of the "africastalking" service.
func NewSendAirtimeRequestBody(p *africastalking.AirtimePayload) *SendAirtimeRequestBody {
	body := &SendAirtimeRequestBody{
		Username: p.Username,
	}
	if p.Recipients != nil {
		body.Recipients = make([]*AirtimeRecipientsRequestBody, len(p.Recipients))
		for i, val := range p.Recipients {
			body.Recipients[i] = marshalAfricastalkingAirtimeRecipientsToAirtimeRecipientsRequestBody(val)
		}
	}
	return body
}

// NewPublishIoTRequestBody builds the HTTP request body from the payload of
// the "PublishIoT" endpoint of the "africastalking" service.
func NewPublishIoTRequestBody(p *africastalking.IoTPayload) *PublishIoTRequestBody {
	body := &PublishIoTRequestBody{
		Username:    p.Username,
		DeviceGroup: p.DeviceGroup,
		Topic:       p.Topic,
		Payload:     p.Payload,
	}
	return body
}

// NewGenerateRequestBody builds the HTTP request body from the payload of the
// "Generate" endpoint of the "africastalking" service.
func NewGenerateRequestBody(p *africastalking.GeneratePayload) *GenerateRequestBody {
	body := &GenerateRequestBody{
		Username: p.Username,
		APIKey:   p.APIKey,
	}
	return body
}

// NewSendBulkSMSBulkResponseCreated builds a "africastalking" service
// "SendBulkSMS" endpoint result from a HTTP "Created" response.
func NewSendBulkSMSBulkResponseCreated(body *SendBulkSMSResponseBody) *africastalkingviews.BulkResponseView {
	v := &africastalkingviews.BulkResponseView{}
	if body.SMSMessageData != nil {
		v.SMSMessageData = unmarshalBulkSMSMessageDataResponseBodyToAfricastalkingviewsBulkSMSMessageDataView(body.SMSMessageData)
	}

	return v
}

// NewSendPremiumSMSPremiumSMSResponseCreated builds a "africastalking" service
// "SendPremiumSMS" endpoint result from a HTTP "Created" response.
func NewSendPremiumSMSPremiumSMSResponseCreated(body *SendPremiumSMSResponseBody) *africastalkingviews.PremiumSMSResponseView {
	v := &africastalkingviews.PremiumSMSResponseView{}
	if body.SMSMessageData != nil {
		v.SMSMessageData = unmarshalPremiumSMSMessageDataResponseBodyToAfricastalkingviewsPremiumSMSMessageDataView(body.SMSMessageData)
	}

	return v
}

// NewFetchSMSFetchMsgResponseOK builds a "africastalking" service "FetchSMS"
// endpoint result from a HTTP "OK" response.
func NewFetchSMSFetchMsgResponseOK(body *FetchSMSResponseBody) *africastalkingviews.FetchMsgResponseView {
	v := &africastalkingviews.FetchMsgResponseView{}
	if body.SMSMessageData != nil {
		v.SMSMessageData = unmarshalFetchSMSMessageDataResponseBodyToAfricastalkingviewsFetchSMSMessageDataView(body.SMSMessageData)
	}

	return v
}

// NewNewCheckoutTokenCheckoutTokenResponseCreated builds a "africastalking"
// service "NewCheckoutToken" endpoint result from a HTTP "Created" response.
func NewNewCheckoutTokenCheckoutTokenResponseCreated(body *NewCheckoutTokenResponseBody) *africastalkingviews.CheckoutTokenResponseView {
	v := &africastalkingviews.CheckoutTokenResponseView{
		Description: body.Description,
		Token:       body.Token,
	}

	return v
}

// NewNewPremiumSubscriptionNewSubResponseCreated builds a "africastalking"
// service "NewPremiumSubscription" endpoint result from a HTTP "Created"
// response.
func NewNewPremiumSubscriptionNewSubResponseCreated(body *NewPremiumSubscriptionResponseBody) *africastalkingviews.NewSubResponseView {
	v := &africastalkingviews.NewSubResponseView{
		Status:      body.Status,
		Description: body.Description,
	}

	return v
}

// NewFetchPremiumSubscriptionFetchSubResponseOK builds a "africastalking"
// service "FetchPremiumSubscription" endpoint result from a HTTP "OK" response.
func NewFetchPremiumSubscriptionFetchSubResponseOK(body *FetchPremiumSubscriptionResponseBody) *africastalkingviews.FetchSubResponseView {
	v := &africastalkingviews.FetchSubResponseView{}
	if body.Subscriptions != nil {
		v.Subscriptions = make([]*africastalkingviews.SubscriptionsView, len(body.Subscriptions))
		for i, val := range body.Subscriptions {
			v.Subscriptions[i] = unmarshalSubscriptionsResponseBodyToAfricastalkingviewsSubscriptionsView(val)
		}
	}

	return v
}

// NewPurgePremiumSubscriptionPurgeSubResponseCreated builds a "africastalking"
// service "PurgePremiumSubscription" endpoint result from a HTTP "Created"
// response.
func NewPurgePremiumSubscriptionPurgeSubResponseCreated(body *PurgePremiumSubscriptionResponseBody) *africastalkingviews.PurgeSubResponseView {
	v := &africastalkingviews.PurgeSubResponseView{
		Status:      body.Status,
		Description: body.Description,
	}

	return v
}

// NewMakeCallResponseViewOK builds a "africastalking" service "MakeCall"
// endpoint result from a HTTP "OK" response.
func NewMakeCallResponseViewOK(body *MakeCallResponseBody) *africastalkingviews.MakeCallResponseView {
	v := &africastalkingviews.MakeCallResponseView{
		ErrorMessage: body.ErrorMessage,
	}
	if body.Entries != nil {
		v.Entries = make([]*africastalkingviews.VoiceEntryView, len(body.Entries))
		for i, val := range body.Entries {
			v.Entries[i] = unmarshalVoiceEntryResponseBodyToAfricastalkingviewsVoiceEntryView(val)
		}
	}

	return v
}

// NewTransferCallCalltransferresponseOK builds a "africastalking" service
// "TransferCall" endpoint result from a HTTP "OK" response.
func NewTransferCallCalltransferresponseOK(body *TransferCallResponseBody) *africastalkingviews.CalltransferresponseView {
	v := &africastalkingviews.CalltransferresponseView{
		Status:       body.Status,
		ErrorMessage: body.ErrorMessage,
	}

	return v
}

// NewQueuedstatusresultViewCreated builds a "africastalking" service "Queue"
// endpoint result from a HTTP "Created" response.
func NewQueuedstatusresultViewCreated(body *QueueResponseBody) *africastalkingviews.QueuedstatusresultView {
	v := &africastalkingviews.QueuedstatusresultView{
		ErrorMessage: body.ErrorMessage,
	}
	if body.Entries != nil {
		v.Entries = make([]*africastalkingviews.QueuedStatusEntryView, len(body.Entries))
		for i, val := range body.Entries {
			v.Entries[i] = unmarshalQueuedStatusEntryResponseBodyToAfricastalkingviewsQueuedStatusEntryView(val)
		}
	}

	return v
}

// NewMobileCheckoutResponseViewCreated builds a "africastalking" service
// "MobileCheckout" endpoint result from a HTTP "Created" response.
func NewMobileCheckoutResponseViewCreated(body *MobileCheckoutResponseBody) *africastalkingviews.MobileCheckoutResponseView {
	v := &africastalkingviews.MobileCheckoutResponseView{
		Status:          body.Status,
		Description:     body.Description,
		TransactionID:   body.TransactionID,
		ProviderChannel: body.ProviderChannel,
	}

	return v
}

// NewMobileB2CResponseViewCreated builds a "africastalking" service
// "MobileB2C" endpoint result from a HTTP "Created" response.
func NewMobileB2CResponseViewCreated(body *MobileB2CResponseBody) *africastalkingviews.MobileB2CResponseView {
	v := &africastalkingviews.MobileB2CResponseView{
		NumQueued:           body.NumQueued,
		TotalValue:          body.TotalValue,
		TotalTransactionFee: body.TotalTransactionFee,
		ErrorMessage:        body.ErrorMessage,
	}
	if body.Entries != nil {
		v.Entries = make([]*africastalkingviews.B2CEntryView, len(body.Entries))
		for i, val := range body.Entries {
			v.Entries[i] = unmarshalB2CEntryResponseBodyToAfricastalkingviewsB2CEntryView(val)
		}
	}

	return v
}

// NewMobileB2BResponseViewCreated builds a "africastalking" service
// "MobileB2B" endpoint result from a HTTP "Created" response.
func NewMobileB2BResponseViewCreated(body *MobileB2BResponseBody) *africastalkingviews.MobileB2BResponseView {
	v := &africastalkingviews.MobileB2BResponseView{
		Status:          body.Status,
		TransactionID:   body.TransactionID,
		TransactionFee:  body.TransactionFee,
		ProviderChannel: body.ProviderChannel,
		ErrorMessage:    body.ErrorMessage,
	}

	return v
}

// NewBankCheckoutResponseViewCreated builds a "africastalking" service "Bank
// Checkout" endpoint result from a HTTP "Created" response.
func NewBankCheckoutResponseViewCreated(body *BankCheckoutResponseBody) *africastalkingviews.BankCheckoutResponseView {
	v := &africastalkingviews.BankCheckoutResponseView{
		Status:        body.Status,
		Description:   body.Description,
		TransactionID: body.TransactionID,
	}

	return v
}

// NewBankCheckoutValidateResponseViewCreated builds a "africastalking" service
// "BankCheckoutValidate" endpoint result from a HTTP "Created" response.
func NewBankCheckoutValidateResponseViewCreated(body *BankCheckoutValidateResponseBody) *africastalkingviews.BankCheckoutValidateResponseView {
	v := &africastalkingviews.BankCheckoutValidateResponseView{
		Status:      body.Status,
		Description: body.Description,
	}

	return v
}

// NewBankTransferResponseViewCreated builds a "africastalking" service
// "BankTransfer" endpoint result from a HTTP "Created" response.
func NewBankTransferResponseViewCreated(body *BankTransferResponseBody) *africastalkingviews.BankTransferResponseView {
	v := &africastalkingviews.BankTransferResponseView{
		ErrorMessage: body.ErrorMessage,
	}
	if body.Entries != nil {
		v.Entries = make([]*africastalkingviews.TransferEntriesView, len(body.Entries))
		for i, val := range body.Entries {
			v.Entries[i] = unmarshalTransferEntriesResponseBodyToAfricastalkingviewsTransferEntriesView(val)
		}
	}

	return v
}

// NewCardCheckoutResponseViewCreated builds a "africastalking" service
// "CardCheckout" endpoint result from a HTTP "Created" response.
func NewCardCheckoutResponseViewCreated(body *CardCheckoutResponseBody) *africastalkingviews.CardCheckoutResponseView {
	v := &africastalkingviews.CardCheckoutResponseView{
		Status:        body.Status,
		Description:   body.Description,
		TransactionID: body.TransactionID,
	}

	return v
}

// NewCardCheckoutValidateResponseViewCreated builds a "africastalking" service
// "CardCheckoutValidate" endpoint result from a HTTP "Created" response.
func NewCardCheckoutValidateResponseViewCreated(body *CardCheckoutValidateResponseBody) *africastalkingviews.CardCheckoutValidateResponseView {
	v := &africastalkingviews.CardCheckoutValidateResponseView{
		Status:        body.Status,
		Description:   body.Description,
		CheckoutToken: body.CheckoutToken,
	}

	return v
}

// NewWalletTransferResponseViewCreated builds a "africastalking" service
// "WalletTransfer" endpoint result from a HTTP "Created" response.
func NewWalletTransferResponseViewCreated(body *WalletTransferResponseBody) *africastalkingviews.WalletTransferResponseView {
	v := &africastalkingviews.WalletTransferResponseView{
		Status:        body.Status,
		Description:   body.Description,
		TransactionID: body.TransactionID,
	}

	return v
}

// NewTopupStashResponseViewCreated builds a "africastalking" service
// "TopupStash" endpoint result from a HTTP "Created" response.
func NewTopupStashResponseViewCreated(body *TopupStashResponseBody) *africastalkingviews.TopupStashResponseView {
	v := &africastalkingviews.TopupStashResponseView{
		Status:        body.Status,
		Description:   body.Description,
		TransactionID: body.TransactionID,
	}

	return v
}

// NewSendAirtimeAirtimeResponseOK builds a "africastalking" service
// "SendAirtime" endpoint result from a HTTP "OK" response.
func NewSendAirtimeAirtimeResponseOK(body *SendAirtimeResponseBody) *africastalkingviews.AirtimeResponseView {
	v := &africastalkingviews.AirtimeResponseView{
		NumSent:       body.NumSent,
		TotalAmount:   body.TotalAmount,
		TotalDiscount: body.TotalDiscount,
		ErrorMessage:  body.ErrorMessage,
	}
	if body.Responses != nil {
		v.Responses = make([]*africastalkingviews.AirtimeEntryView, len(body.Responses))
		for i, val := range body.Responses {
			v.Responses[i] = unmarshalAirtimeEntryResponseBodyToAfricastalkingviewsAirtimeEntryView(val)
		}
	}

	return v
}

// NewPublishIoTIoTResponseOK builds a "africastalking" service "PublishIoT"
// endpoint result from a HTTP "OK" response.
func NewPublishIoTIoTResponseOK(body *PublishIoTResponseBody) *africastalkingviews.IoTResponseView {
	v := &africastalkingviews.IoTResponseView{
		Status:      body.Status,
		Description: body.Description,
	}

	return v
}

// NewInitiateAppDataUserResponseOK builds a "africastalking" service
// "InitiateAppData" endpoint result from a HTTP "OK" response.
func NewInitiateAppDataUserResponseOK(body *InitiateAppDataResponseBody) *africastalkingviews.UserResponseView {
	v := &africastalkingviews.UserResponseView{}
	if body.UserData != nil {
		v.UserData = unmarshalUserDataResponseBodyToAfricastalkingviewsUserDataView(body.UserData)
	}

	return v
}

// NewGenerateAccessTokenResponseOK builds a "africastalking" service
// "Generate" endpoint result from a HTTP "OK" response.
func NewGenerateAccessTokenResponseOK(body *GenerateResponseBody) *africastalkingviews.AccessTokenResponseView {
	v := &africastalkingviews.AccessTokenResponseView{
		Token:             body.Token,
		LifetimeInSeconds: body.LifetimeInSeconds,
	}

	return v
}

// ValidateBulkSMSMessageDataResponseBody runs the validations defined on
// BulkSMSMessageDataResponseBody
func ValidateBulkSMSMessageDataResponseBody(body *BulkSMSMessageDataResponseBody) (err error) {
	if body.Messages != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Messages", *body.Messages, "[a-zA-Z]+"))
	}
	if len(body.Recipients) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Recipients", body.Recipients, len(body.Recipients), 1, true))
	}
	for _, e := range body.Recipients {
		if e != nil {
			if err2 := ValidateRecipientsResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRecipientsResponseBody runs the validations defined on
// RecipientsResponseBody
func ValidateRecipientsResponseBody(body *RecipientsResponseBody) (err error) {
	if body.StatusCode != nil {
		if !(*body.StatusCode == 100 || *body.StatusCode == 101 || *body.StatusCode == 102 || *body.StatusCode == 401 || *body.StatusCode == 402 || *body.StatusCode == 403 || *body.StatusCode == 404 || *body.StatusCode == 405 || *body.StatusCode == 406 || *body.StatusCode == 407 || *body.StatusCode == 408 || *body.StatusCode == 501 || *body.StatusCode == 502) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.statusCode", *body.StatusCode, []interface{}{100, 101, 102, 401, 402, 403, 404, 405, 406, 407, 408, 501, 502}))
		}
	}
	return
}

// ValidatePremiumSMSMessageDataResponseBody runs the validations defined on
// PremiumSMSMessageDataResponseBody
func ValidatePremiumSMSMessageDataResponseBody(body *PremiumSMSMessageDataResponseBody) (err error) {
	if body.Messages != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.Messages", *body.Messages, "[a-zA-Z]+"))
	}
	if len(body.Recipients) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Recipients", body.Recipients, len(body.Recipients), 1, true))
	}
	for _, e := range body.Recipients {
		if e != nil {
			if err2 := ValidateRecipientsResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFetchSMSMessageDataResponseBody runs the validations defined on
// FetchSMSMessageDataResponseBody
func ValidateFetchSMSMessageDataResponseBody(body *FetchSMSMessageDataResponseBody) (err error) {
	if len(body.Messages) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.Messages", body.Messages, len(body.Messages), 1, true))
	}
	return
}

// ValidateSubscriptionsResponseBody runs the validations defined on
// SubscriptionsResponseBody
func ValidateSubscriptionsResponseBody(body *SubscriptionsResponseBody) (err error) {
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.Date", *body.Date, goa.FormatDateTime))
	}
	return
}

// ValidateVoiceEntryResponseBody runs the validations defined on
// VoiceEntryResponseBody
func ValidateVoiceEntryResponseBody(body *VoiceEntryResponseBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "Queued" || *body.Status == "InvalidPhoneNumber" || *body.Status == "DestinationNotSupported" || *body.Status == "InsufficientCredit") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Queued", "InvalidPhoneNumber", "DestinationNotSupported", "InsufficientCredit"}))
		}
	}
	return
}

// ValidateMobileRecipientsRequestBody runs the validations defined on
// MobileRecipientsRequestBody
func ValidateMobileRecipientsRequestBody(body *MobileRecipientsRequestBody) (err error) {
	if body.Reason != nil {
		if !(*body.Reason == "SalaryPayment" || *body.Reason == "SalaryPaymentWithWithdrawalChargePaid" || *body.Reason == "BusinessPayment" || *body.Reason == "BusinessPaymentWithWithdrawalChargePaid" || *body.Reason == "PromotionPayment") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"SalaryPayment", "SalaryPaymentWithWithdrawalChargePaid", "BusinessPayment", "BusinessPaymentWithWithdrawalChargePaid", "PromotionPayment"}))
		}
	}
	return
}

// ValidateB2CEntryResponseBody runs the validations defined on
// B2CEntryResponseBody
func ValidateB2CEntryResponseBody(body *B2CEntryResponseBody) (err error) {
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "body"))
	}
	if body.Status != nil {
		if !(*body.Status == "Queued" || *body.Status == "InvalidRequest" || *body.Status == "NotSupported" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Queued", "InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	if body.Provider != nil {
		if !(*body.Provider == "Mpesa" || *body.Provider == "Segovia" || *body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "Segovia", "Athena"}))
		}
	}
	return
}

// ValidateBankAccountRequestBody runs the validations defined on
// BankAccountRequestBody
func ValidateBankAccountRequestBody(body *BankAccountRequestBody) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("body.dateOfBirth", body.DateOfBirth, goa.FormatDate))

	return
}

// ValidateTransferEntriesResponseBody runs the validations defined on
// TransferEntriesResponseBody
func ValidateTransferEntriesResponseBody(body *TransferEntriesResponseBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "InvalidRequest" || *body.Status == "NotSupported" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	return
}

// ValidatePaymentCardRequestBody runs the validations defined on
// PaymentCardRequestBody
func ValidatePaymentCardRequestBody(body *PaymentCardRequestBody) (err error) {
	if !(body.CountryCode == "NG") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.countryCode", body.CountryCode, []interface{}{"NG"}))
	}
	return
}

// ValidateAirtimeEntryResponseBody runs the validations defined on
// AirtimeEntryResponseBody
func ValidateAirtimeEntryResponseBody(body *AirtimeEntryResponseBody) (err error) {
	if body.Status != nil {
		if !(*body.Status == "Sent" || *body.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Sent", "Failed"}))
		}
	}
	return
}
