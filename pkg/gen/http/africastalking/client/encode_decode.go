// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-go/design -o pkg

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	africastalking "github.com/wondenge/at-go/pkg/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-go/pkg/gen/africastalking/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildSendBulkSMSRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "SendBulkSMS" endpoint
func (c *Client) BuildSendBulkSMSRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendBulkSMSAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "SendBulkSMS", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendBulkSMSRequest returns an encoder for requests sent to the
// africastalking SendBulkSMS server.
func EncodeSendBulkSMSRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.BulkPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "SendBulkSMS", "*africastalking.BulkPayload", v)
		}
		body := NewSendBulkSMSRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "SendBulkSMS", err)
		}
		return nil
	}
}

// DecodeSendBulkSMSResponse returns a decoder for responses returned by the
// africastalking SendBulkSMS endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeSendBulkSMSResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body SendBulkSMSResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "SendBulkSMS", err)
			}
			p := NewSendBulkSMSBulkResponseCreated(&body)
			view := "default"
			vres := &africastalkingviews.BulkResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateBulkResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "SendBulkSMS", err)
			}
			res := africastalking.NewBulkResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "SendBulkSMS", resp.StatusCode, string(body))
		}
	}
}

// BuildSendPremiumSMSRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "SendPremiumSMS" endpoint
func (c *Client) BuildSendPremiumSMSRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendPremiumSMSAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "SendPremiumSMS", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendPremiumSMSRequest returns an encoder for requests sent to the
// africastalking SendPremiumSMS server.
func EncodeSendPremiumSMSRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.PremiumPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "SendPremiumSMS", "*africastalking.PremiumPayload", v)
		}
		body := NewSendPremiumSMSRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "SendPremiumSMS", err)
		}
		return nil
	}
}

// DecodeSendPremiumSMSResponse returns a decoder for responses returned by the
// africastalking SendPremiumSMS endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeSendPremiumSMSResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body SendPremiumSMSResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "SendPremiumSMS", err)
			}
			p := NewSendPremiumSMSPremiumSMSResponseCreated(&body)
			view := "default"
			vres := &africastalkingviews.PremiumSMSResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidatePremiumSMSResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "SendPremiumSMS", err)
			}
			res := africastalking.NewPremiumSMSResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "SendPremiumSMS", resp.StatusCode, string(body))
		}
	}
}

// BuildFetchSMSRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "FetchSMS" endpoint
func (c *Client) BuildFetchSMSRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchSMSAfricastalkingPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "FetchSMS", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFetchSMSRequest returns an encoder for requests sent to the
// africastalking FetchSMS server.
func EncodeFetchSMSRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.FetchMsgPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "FetchSMS", "*africastalking.FetchMsgPayload", v)
		}
		values := req.URL.Query()
		values.Add("username", p.Username)
		values.Add("lastReceivedId", p.LastReceivedID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeFetchSMSResponse returns a decoder for responses returned by the
// africastalking FetchSMS endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeFetchSMSResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FetchSMSResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "FetchSMS", err)
			}
			p := NewFetchSMSFetchMsgResponseOK(&body)
			view := "default"
			vres := &africastalkingviews.FetchMsgResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateFetchMsgResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "FetchSMS", err)
			}
			res := africastalking.NewFetchMsgResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "FetchSMS", resp.StatusCode, string(body))
		}
	}
}

// BuildNewCheckoutTokenRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "NewCheckoutToken" endpoint
func (c *Client) BuildNewCheckoutTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: NewCheckoutTokenAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "NewCheckoutToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeNewCheckoutTokenRequest returns an encoder for requests sent to the
// africastalking NewCheckoutToken server.
func EncodeNewCheckoutTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.CheckoutTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "NewCheckoutToken", "*africastalking.CheckoutTokenPayload", v)
		}
		body := NewNewCheckoutTokenRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "NewCheckoutToken", err)
		}
		return nil
	}
}

// DecodeNewCheckoutTokenResponse returns a decoder for responses returned by
// the africastalking NewCheckoutToken endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeNewCheckoutTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body NewCheckoutTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "NewCheckoutToken", err)
			}
			p := NewNewCheckoutTokenCheckoutTokenResponseCreated(&body)
			view := "default"
			vres := &africastalkingviews.CheckoutTokenResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateCheckoutTokenResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "NewCheckoutToken", err)
			}
			res := africastalking.NewCheckoutTokenResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "NewCheckoutToken", resp.StatusCode, string(body))
		}
	}
}

// BuildNewPremiumSubscriptionRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "NewPremiumSubscription" endpoint
func (c *Client) BuildNewPremiumSubscriptionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: NewPremiumSubscriptionAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "NewPremiumSubscription", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeNewPremiumSubscriptionRequest returns an encoder for requests sent to
// the africastalking NewPremiumSubscription server.
func EncodeNewPremiumSubscriptionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.NewSubPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "NewPremiumSubscription", "*africastalking.NewSubPayload", v)
		}
		body := NewNewPremiumSubscriptionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "NewPremiumSubscription", err)
		}
		return nil
	}
}

// DecodeNewPremiumSubscriptionResponse returns a decoder for responses
// returned by the africastalking NewPremiumSubscription endpoint. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeNewPremiumSubscriptionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body NewPremiumSubscriptionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "NewPremiumSubscription", err)
			}
			p := NewNewPremiumSubscriptionNewSubResponseCreated(&body)
			view := "default"
			vres := &africastalkingviews.NewSubResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateNewSubResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "NewPremiumSubscription", err)
			}
			res := africastalking.NewNewSubResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "NewPremiumSubscription", resp.StatusCode, string(body))
		}
	}
}

// BuildFetchPremiumSubscriptionRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "FetchPremiumSubscription" endpoint
func (c *Client) BuildFetchPremiumSubscriptionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchPremiumSubscriptionAfricastalkingPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "FetchPremiumSubscription", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFetchPremiumSubscriptionRequest returns an encoder for requests sent
// to the africastalking FetchPremiumSubscription server.
func EncodeFetchPremiumSubscriptionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.FetchSubPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "FetchPremiumSubscription", "*africastalking.FetchSubPayload", v)
		}
		values := req.URL.Query()
		values.Add("username", p.Username)
		values.Add("shortCode", p.ShortCode)
		values.Add("keyword", p.Keyword)
		values.Add("lastReceivedId", p.LastReceivedID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeFetchPremiumSubscriptionResponse returns a decoder for responses
// returned by the africastalking FetchPremiumSubscription endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeFetchPremiumSubscriptionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FetchPremiumSubscriptionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "FetchPremiumSubscription", err)
			}
			p := NewFetchPremiumSubscriptionFetchSubResponseOK(&body)
			view := "default"
			vres := &africastalkingviews.FetchSubResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateFetchSubResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "FetchPremiumSubscription", err)
			}
			res := africastalking.NewFetchSubResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "FetchPremiumSubscription", resp.StatusCode, string(body))
		}
	}
}

// BuildPurgePremiumSubscriptionRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "PurgePremiumSubscription" endpoint
func (c *Client) BuildPurgePremiumSubscriptionRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PurgePremiumSubscriptionAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "PurgePremiumSubscription", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePurgePremiumSubscriptionRequest returns an encoder for requests sent
// to the africastalking PurgePremiumSubscription server.
func EncodePurgePremiumSubscriptionRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.PurgeSubPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "PurgePremiumSubscription", "*africastalking.PurgeSubPayload", v)
		}
		body := NewPurgePremiumSubscriptionRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "PurgePremiumSubscription", err)
		}
		return nil
	}
}

// DecodePurgePremiumSubscriptionResponse returns a decoder for responses
// returned by the africastalking PurgePremiumSubscription endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodePurgePremiumSubscriptionResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body PurgePremiumSubscriptionResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "PurgePremiumSubscription", err)
			}
			p := NewPurgePremiumSubscriptionPurgeSubResponseCreated(&body)
			view := "default"
			vres := &africastalkingviews.PurgeSubResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidatePurgeSubResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "PurgePremiumSubscription", err)
			}
			res := africastalking.NewPurgeSubResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "PurgePremiumSubscription", resp.StatusCode, string(body))
		}
	}
}

// BuildMakeCallRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "MakeCall" endpoint
func (c *Client) BuildMakeCallRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MakeCallAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "MakeCall", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMakeCallRequest returns an encoder for requests sent to the
// africastalking MakeCall server.
func EncodeMakeCallRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.MakeCallPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "MakeCall", "*africastalking.MakeCallPayload", v)
		}
		body := NewMakeCallRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "MakeCall", err)
		}
		return nil
	}
}

// DecodeMakeCallResponse returns a decoder for responses returned by the
// africastalking MakeCall endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeMakeCallResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body MakeCallResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "MakeCall", err)
			}
			p := NewMakeCallResponseViewOK(&body)
			view := "default"
			vres := &africastalkingviews.MakeCallResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateMakeCallResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "MakeCall", err)
			}
			res := africastalking.NewMakeCallResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "MakeCall", resp.StatusCode, string(body))
		}
	}
}

// BuildTransferCallRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "TransferCall" endpoint
func (c *Client) BuildTransferCallRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TransferCallAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "TransferCall", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTransferCallRequest returns an encoder for requests sent to the
// africastalking TransferCall server.
func EncodeTransferCallRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.CallTransferPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "TransferCall", "*africastalking.CallTransferPayload", v)
		}
		body := NewTransferCallRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "TransferCall", err)
		}
		return nil
	}
}

// DecodeTransferCallResponse returns a decoder for responses returned by the
// africastalking TransferCall endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeTransferCallResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TransferCallResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "TransferCall", err)
			}
			p := NewTransferCallCalltransferresponseOK(&body)
			view := "default"
			vres := &africastalkingviews.Calltransferresponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateCalltransferresponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "TransferCall", err)
			}
			res := africastalking.NewCalltransferresponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "TransferCall", resp.StatusCode, string(body))
		}
	}
}

// BuildSayRequest instantiates a HTTP request object with method and path set
// to call the "africastalking" service "Say" endpoint
func (c *Client) BuildSayRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SayAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Say", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSayRequest returns an encoder for requests sent to the africastalking
// Say server.
func EncodeSayRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Say1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Say", "*africastalking.Say1", v)
		}
		body := NewSayRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Say", err)
		}
		return nil
	}
}

// DecodeSayResponse returns a decoder for responses returned by the
// africastalking Say endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeSayResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Say", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Say", resp.StatusCode, string(body))
		}
	}
}

// BuildPlayRequest instantiates a HTTP request object with method and path set
// to call the "africastalking" service "Play" endpoint
func (c *Client) BuildPlayRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PlayAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Play", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePlayRequest returns an encoder for requests sent to the africastalking
// Play server.
func EncodePlayRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Play1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Play", "*africastalking.Play1", v)
		}
		body := NewPlayRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Play", err)
		}
		return nil
	}
}

// DecodePlayResponse returns a decoder for responses returned by the
// africastalking Play endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodePlayResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Play", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Play", resp.StatusCode, string(body))
		}
	}
}

// BuildGetDigitsRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "GetDigits" endpoint
func (c *Client) BuildGetDigitsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetDigitsAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "GetDigits", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetDigitsRequest returns an encoder for requests sent to the
// africastalking GetDigits server.
func EncodeGetDigitsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.GetDigits1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "GetDigits", "*africastalking.GetDigits1", v)
		}
		body := NewGetDigitsRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "GetDigits", err)
		}
		return nil
	}
}

// DecodeGetDigitsResponse returns a decoder for responses returned by the
// africastalking GetDigits endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetDigitsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "GetDigits", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "GetDigits", resp.StatusCode, string(body))
		}
	}
}

// BuildDialRequest instantiates a HTTP request object with method and path set
// to call the "africastalking" service "Dial" endpoint
func (c *Client) BuildDialRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DialAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Dial", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDialRequest returns an encoder for requests sent to the africastalking
// Dial server.
func EncodeDialRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Dial1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Dial", "*africastalking.Dial1", v)
		}
		body := NewDialRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Dial", err)
		}
		return nil
	}
}

// DecodeDialResponse returns a decoder for responses returned by the
// africastalking Dial endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeDialResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Dial", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Dial", resp.StatusCode, string(body))
		}
	}
}

// BuildRecordRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Record" endpoint
func (c *Client) BuildRecordRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RecordAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Record", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRecordRequest returns an encoder for requests sent to the
// africastalking Record server.
func EncodeRecordRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Record1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Record", "*africastalking.Record1", v)
		}
		body := NewRecordRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Record", err)
		}
		return nil
	}
}

// DecodeRecordResponse returns a decoder for responses returned by the
// africastalking Record endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRecordResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Record", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Record", resp.StatusCode, string(body))
		}
	}
}

// BuildEnqueueRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Enqueue" endpoint
func (c *Client) BuildEnqueueRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnqueueAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Enqueue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEnqueueRequest returns an encoder for requests sent to the
// africastalking Enqueue server.
func EncodeEnqueueRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Enqueue1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Enqueue", "*africastalking.Enqueue1", v)
		}
		body := NewEnqueueRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Enqueue", err)
		}
		return nil
	}
}

// DecodeEnqueueResponse returns a decoder for responses returned by the
// africastalking Enqueue endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeEnqueueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Enqueue", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Enqueue", resp.StatusCode, string(body))
		}
	}
}

// BuildDequeueRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Dequeue" endpoint
func (c *Client) BuildDequeueRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DequeueAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Dequeue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDequeueRequest returns an encoder for requests sent to the
// africastalking Dequeue server.
func EncodeDequeueRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Dequeue1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Dequeue", "*africastalking.Dequeue1", v)
		}
		body := NewDequeueRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Dequeue", err)
		}
		return nil
	}
}

// DecodeDequeueResponse returns a decoder for responses returned by the
// africastalking Dequeue endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeDequeueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Dequeue", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Dequeue", resp.StatusCode, string(body))
		}
	}
}

// BuildRedirectRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Redirect" endpoint
func (c *Client) BuildRedirectRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RedirectAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Redirect", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRedirectRequest returns an encoder for requests sent to the
// africastalking Redirect server.
func EncodeRedirectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Redirect1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Redirect", "*africastalking.Redirect1", v)
		}
		body := NewRedirectRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Redirect", err)
		}
		return nil
	}
}

// DecodeRedirectResponse returns a decoder for responses returned by the
// africastalking Redirect endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRedirectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Redirect", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Redirect", resp.StatusCode, string(body))
		}
	}
}

// BuildRejectRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Reject" endpoint
func (c *Client) BuildRejectRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RejectAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Reject", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRejectRequest returns an encoder for requests sent to the
// africastalking Reject server.
func EncodeRejectRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.Reject1)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Reject", "*africastalking.Reject1", v)
		}
		body := NewRejectRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Reject", err)
		}
		return nil
	}
}

// DecodeRejectResponse returns a decoder for responses returned by the
// africastalking Reject endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRejectResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Reject", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Reject", resp.StatusCode, string(body))
		}
	}
}

// BuildQueueRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Queue" endpoint
func (c *Client) BuildQueueRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: QueueAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Queue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeQueueRequest returns an encoder for requests sent to the
// africastalking Queue server.
func EncodeQueueRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.QueuedCallsPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Queue", "*africastalking.QueuedCallsPayload", v)
		}
		body := NewQueueRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Queue", err)
		}
		return nil
	}
}

// DecodeQueueResponse returns a decoder for responses returned by the
// africastalking Queue endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeQueueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body QueueResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Queue", err)
			}
			p := NewQueuedstatusresultViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.Queuedstatusresult{Projected: p, View: view}
			if err = africastalkingviews.ValidateQueuedstatusresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "Queue", err)
			}
			res := africastalking.NewQueuedstatusresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Queue", resp.StatusCode, string(body))
		}
	}
}

// BuildUploadMediaRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "UploadMedia" endpoint
func (c *Client) BuildUploadMediaRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadMediaAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "UploadMedia", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadMediaRequest returns an encoder for requests sent to the
// africastalking UploadMedia server.
func EncodeUploadMediaRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.UploadMediaFile)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "UploadMedia", "*africastalking.UploadMediaFile", v)
		}
		body := NewUploadMediaRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "UploadMedia", err)
		}
		return nil
	}
}

// DecodeUploadMediaResponse returns a decoder for responses returned by the
// africastalking UploadMedia endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeUploadMediaResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "UploadMedia", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "UploadMedia", resp.StatusCode, string(body))
		}
	}
}

// BuildMobileCheckoutRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "MobileCheckout" endpoint
func (c *Client) BuildMobileCheckoutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MobileCheckoutAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "MobileCheckout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMobileCheckoutRequest returns an encoder for requests sent to the
// africastalking MobileCheckout server.
func EncodeMobileCheckoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.MobileCheckoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "MobileCheckout", "*africastalking.MobileCheckoutPayload", v)
		}
		body := NewMobileCheckoutRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "MobileCheckout", err)
		}
		return nil
	}
}

// DecodeMobileCheckoutResponse returns a decoder for responses returned by the
// africastalking MobileCheckout endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeMobileCheckoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body MobileCheckoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "MobileCheckout", err)
			}
			p := NewMobileCheckoutResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.MobileCheckoutResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateMobileCheckoutResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "MobileCheckout", err)
			}
			res := africastalking.NewMobileCheckoutResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "MobileCheckout", resp.StatusCode, string(body))
		}
	}
}

// BuildMobileB2CRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "MobileB2C" endpoint
func (c *Client) BuildMobileB2CRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MobileB2CAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "MobileB2C", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMobileB2CRequest returns an encoder for requests sent to the
// africastalking MobileB2C server.
func EncodeMobileB2CRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.MobileB2CPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "MobileB2C", "*africastalking.MobileB2CPayload", v)
		}
		body := NewMobileB2CRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "MobileB2C", err)
		}
		return nil
	}
}

// DecodeMobileB2CResponse returns a decoder for responses returned by the
// africastalking MobileB2C endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeMobileB2CResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body MobileB2CResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "MobileB2C", err)
			}
			p := NewMobileB2CResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.MobileB2CResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateMobileB2CResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "MobileB2C", err)
			}
			res := africastalking.NewMobileB2CResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "MobileB2C", resp.StatusCode, string(body))
		}
	}
}

// BuildMobileB2BRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "MobileB2B" endpoint
func (c *Client) BuildMobileB2BRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MobileB2BAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "MobileB2B", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMobileB2BRequest returns an encoder for requests sent to the
// africastalking MobileB2B server.
func EncodeMobileB2BRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.MobileB2BPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "MobileB2B", "*africastalking.MobileB2BPayload", v)
		}
		body := NewMobileB2BRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "MobileB2B", err)
		}
		return nil
	}
}

// DecodeMobileB2BResponse returns a decoder for responses returned by the
// africastalking MobileB2B endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeMobileB2BResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body MobileB2BResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "MobileB2B", err)
			}
			p := NewMobileB2BResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.MobileB2BResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateMobileB2BResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "MobileB2B", err)
			}
			res := africastalking.NewMobileB2BResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "MobileB2B", resp.StatusCode, string(body))
		}
	}
}

// BuildBankCheckoutRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "Bank Checkout" endpoint
func (c *Client) BuildBankCheckoutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BankCheckoutAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Bank Checkout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBankCheckoutRequest returns an encoder for requests sent to the
// africastalking Bank Checkout server.
func EncodeBankCheckoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.BankCheckoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Bank Checkout", "*africastalking.BankCheckoutPayload", v)
		}
		body := NewBankCheckoutRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Bank Checkout", err)
		}
		return nil
	}
}

// DecodeBankCheckoutResponse returns a decoder for responses returned by the
// africastalking Bank Checkout endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeBankCheckoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body BankCheckoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Bank Checkout", err)
			}
			p := NewBankCheckoutResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.BankCheckoutResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateBankCheckoutResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "Bank Checkout", err)
			}
			res := africastalking.NewBankCheckoutResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Bank Checkout", resp.StatusCode, string(body))
		}
	}
}

// BuildBankCheckoutValidateRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "BankCheckoutValidate" endpoint
func (c *Client) BuildBankCheckoutValidateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BankCheckoutValidateAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "BankCheckoutValidate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBankCheckoutValidateRequest returns an encoder for requests sent to
// the africastalking BankCheckoutValidate server.
func EncodeBankCheckoutValidateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.BankCheckoutValidatePayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "BankCheckoutValidate", "*africastalking.BankCheckoutValidatePayload", v)
		}
		body := NewBankCheckoutValidateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "BankCheckoutValidate", err)
		}
		return nil
	}
}

// DecodeBankCheckoutValidateResponse returns a decoder for responses returned
// by the africastalking BankCheckoutValidate endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeBankCheckoutValidateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body BankCheckoutValidateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "BankCheckoutValidate", err)
			}
			p := NewBankCheckoutValidateResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.BankCheckoutValidateResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateBankCheckoutValidateResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "BankCheckoutValidate", err)
			}
			res := africastalking.NewBankCheckoutValidateResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "BankCheckoutValidate", resp.StatusCode, string(body))
		}
	}
}

// BuildBankTransferRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "BankTransfer" endpoint
func (c *Client) BuildBankTransferRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: BankTransferAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "BankTransfer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeBankTransferRequest returns an encoder for requests sent to the
// africastalking BankTransfer server.
func EncodeBankTransferRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.BankTransferPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "BankTransfer", "*africastalking.BankTransferPayload", v)
		}
		body := NewBankTransferRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "BankTransfer", err)
		}
		return nil
	}
}

// DecodeBankTransferResponse returns a decoder for responses returned by the
// africastalking BankTransfer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeBankTransferResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body BankTransferResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "BankTransfer", err)
			}
			p := NewBankTransferResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.BankTransferResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateBankTransferResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "BankTransfer", err)
			}
			res := africastalking.NewBankTransferResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "BankTransfer", resp.StatusCode, string(body))
		}
	}
}

// BuildCardCheckoutRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "CardCheckout" endpoint
func (c *Client) BuildCardCheckoutRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CardCheckoutAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "CardCheckout", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCardCheckoutRequest returns an encoder for requests sent to the
// africastalking CardCheckout server.
func EncodeCardCheckoutRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.CardCheckoutPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "CardCheckout", "*africastalking.CardCheckoutPayload", v)
		}
		body := NewCardCheckoutRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "CardCheckout", err)
		}
		return nil
	}
}

// DecodeCardCheckoutResponse returns a decoder for responses returned by the
// africastalking CardCheckout endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCardCheckoutResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CardCheckoutResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "CardCheckout", err)
			}
			p := NewCardCheckoutResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.CardCheckoutResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateCardCheckoutResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "CardCheckout", err)
			}
			res := africastalking.NewCardCheckoutResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "CardCheckout", resp.StatusCode, string(body))
		}
	}
}

// BuildCardCheckoutValidateRequest instantiates a HTTP request object with
// method and path set to call the "africastalking" service
// "CardCheckoutValidate" endpoint
func (c *Client) BuildCardCheckoutValidateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CardCheckoutValidateAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "CardCheckoutValidate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCardCheckoutValidateRequest returns an encoder for requests sent to
// the africastalking CardCheckoutValidate server.
func EncodeCardCheckoutValidateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.CardCheckoutValidatePayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "CardCheckoutValidate", "*africastalking.CardCheckoutValidatePayload", v)
		}
		body := NewCardCheckoutValidateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "CardCheckoutValidate", err)
		}
		return nil
	}
}

// DecodeCardCheckoutValidateResponse returns a decoder for responses returned
// by the africastalking CardCheckoutValidate endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeCardCheckoutValidateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CardCheckoutValidateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "CardCheckoutValidate", err)
			}
			p := NewCardCheckoutValidateResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.CardCheckoutValidateResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateCardCheckoutValidateResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "CardCheckoutValidate", err)
			}
			res := africastalking.NewCardCheckoutValidateResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "CardCheckoutValidate", resp.StatusCode, string(body))
		}
	}
}

// BuildWalletTransferRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "WalletTransfer" endpoint
func (c *Client) BuildWalletTransferRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WalletTransferAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "WalletTransfer", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeWalletTransferRequest returns an encoder for requests sent to the
// africastalking WalletTransfer server.
func EncodeWalletTransferRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.WalletTransferPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "WalletTransfer", "*africastalking.WalletTransferPayload", v)
		}
		body := NewWalletTransferRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "WalletTransfer", err)
		}
		return nil
	}
}

// DecodeWalletTransferResponse returns a decoder for responses returned by the
// africastalking WalletTransfer endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeWalletTransferResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body WalletTransferResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "WalletTransfer", err)
			}
			p := NewWalletTransferResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.WalletTransferResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateWalletTransferResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "WalletTransfer", err)
			}
			res := africastalking.NewWalletTransferResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "WalletTransfer", resp.StatusCode, string(body))
		}
	}
}

// BuildTopupStashRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "TopupStash" endpoint
func (c *Client) BuildTopupStashRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TopupStashAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "TopupStash", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTopupStashRequest returns an encoder for requests sent to the
// africastalking TopupStash server.
func EncodeTopupStashRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.TopupStashPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "TopupStash", "*africastalking.TopupStashPayload", v)
		}
		body := NewTopupStashRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "TopupStash", err)
		}
		return nil
	}
}

// DecodeTopupStashResponse returns a decoder for responses returned by the
// africastalking TopupStash endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeTopupStashResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body TopupStashResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "TopupStash", err)
			}
			p := NewTopupStashResponseViewCreated(&body)
			view := "default"
			vres := &africastalkingviews.TopupStashResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateTopupStashResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "TopupStash", err)
			}
			res := africastalking.NewTopupStashResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "TopupStash", resp.StatusCode, string(body))
		}
	}
}

// BuildSendAirtimeRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "SendAirtime" endpoint
func (c *Client) BuildSendAirtimeRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SendAirtimeAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "SendAirtime", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSendAirtimeRequest returns an encoder for requests sent to the
// africastalking SendAirtime server.
func EncodeSendAirtimeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.AirtimePayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "SendAirtime", "*africastalking.AirtimePayload", v)
		}
		body := NewSendAirtimeRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "SendAirtime", err)
		}
		return nil
	}
}

// DecodeSendAirtimeResponse returns a decoder for responses returned by the
// africastalking SendAirtime endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeSendAirtimeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SendAirtimeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "SendAirtime", err)
			}
			p := NewSendAirtimeAirtimeResponseOK(&body)
			view := "default"
			vres := &africastalkingviews.AirtimeResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateAirtimeResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "SendAirtime", err)
			}
			res := africastalking.NewAirtimeResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "SendAirtime", resp.StatusCode, string(body))
		}
	}
}

// BuildPublishIoTRequest instantiates a HTTP request object with method and
// path set to call the "africastalking" service "PublishIoT" endpoint
func (c *Client) BuildPublishIoTRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PublishIoTAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "PublishIoT", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePublishIoTRequest returns an encoder for requests sent to the
// africastalking PublishIoT server.
func EncodePublishIoTRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.IoTPayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "PublishIoT", "*africastalking.IoTPayload", v)
		}
		body := NewPublishIoTRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "PublishIoT", err)
		}
		return nil
	}
}

// DecodePublishIoTResponse returns a decoder for responses returned by the
// africastalking PublishIoT endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodePublishIoTResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PublishIoTResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "PublishIoT", err)
			}
			p := NewPublishIoTIoTResponseOK(&body)
			view := "default"
			vres := &africastalkingviews.IoTResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateIoTResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "PublishIoT", err)
			}
			res := africastalking.NewIoTResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "PublishIoT", resp.StatusCode, string(body))
		}
	}
}

// BuildInitiateAppDataRequest instantiates a HTTP request object with method
// and path set to call the "africastalking" service "InitiateAppData" endpoint
func (c *Client) BuildInitiateAppDataRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InitiateAppDataAfricastalkingPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "InitiateAppData", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInitiateAppDataRequest returns an encoder for requests sent to the
// africastalking InitiateAppData server.
func EncodeInitiateAppDataRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(string)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "InitiateAppData", "string", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "InitiateAppData", err)
		}
		return nil
	}
}

// DecodeInitiateAppDataResponse returns a decoder for responses returned by
// the africastalking InitiateAppData endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeInitiateAppDataResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InitiateAppDataResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "InitiateAppData", err)
			}
			p := NewInitiateAppDataUserResponseOK(&body)
			view := "default"
			vres := &africastalkingviews.UserResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateUserResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "InitiateAppData", err)
			}
			res := africastalking.NewUserResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "InitiateAppData", resp.StatusCode, string(body))
		}
	}
}

// BuildGenerateRequest instantiates a HTTP request object with method and path
// set to call the "africastalking" service "Generate" endpoint
func (c *Client) BuildGenerateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GenerateAfricastalkingPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("africastalking", "Generate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGenerateRequest returns an encoder for requests sent to the
// africastalking Generate server.
func EncodeGenerateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*africastalking.GeneratePayload)
		if !ok {
			return goahttp.ErrInvalidType("africastalking", "Generate", "*africastalking.GeneratePayload", v)
		}
		body := NewGenerateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("africastalking", "Generate", err)
		}
		return nil
	}
}

// DecodeGenerateResponse returns a decoder for responses returned by the
// africastalking Generate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGenerateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GenerateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("africastalking", "Generate", err)
			}
			p := NewGenerateAccessTokenResponseOK(&body)
			view := "default"
			vres := &africastalkingviews.AccessTokenResponse{Projected: p, View: view}
			if err = africastalkingviews.ValidateAccessTokenResponse(vres); err != nil {
				return nil, goahttp.ErrValidationError("africastalking", "Generate", err)
			}
			res := africastalking.NewAccessTokenResponse(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("africastalking", "Generate", resp.StatusCode, string(body))
		}
	}
}

// unmarshalBulkSMSMessageDataResponseBodyToAfricastalkingviewsBulkSMSMessageDataView
// builds a value of type *africastalkingviews.BulkSMSMessageDataView from a
// value of type *BulkSMSMessageDataResponseBody.
func unmarshalBulkSMSMessageDataResponseBodyToAfricastalkingviewsBulkSMSMessageDataView(v *BulkSMSMessageDataResponseBody) *africastalkingviews.BulkSMSMessageDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.BulkSMSMessageDataView{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*africastalkingviews.RecipientsView, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = unmarshalRecipientsResponseBodyToAfricastalkingviewsRecipientsView(val)
		}
	}

	return res
}

// unmarshalRecipientsResponseBodyToAfricastalkingviewsRecipientsView builds a
// value of type *africastalkingviews.RecipientsView from a value of type
// *RecipientsResponseBody.
func unmarshalRecipientsResponseBodyToAfricastalkingviewsRecipientsView(v *RecipientsResponseBody) *africastalkingviews.RecipientsView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.RecipientsView{
		StatusCode: v.StatusCode,
		Number:     v.Number,
		Status:     v.Status,
		Cost:       v.Cost,
		MessageID:  v.MessageID,
	}

	return res
}

// unmarshalPremiumSMSMessageDataResponseBodyToAfricastalkingviewsPremiumSMSMessageDataView
// builds a value of type *africastalkingviews.PremiumSMSMessageDataView from a
// value of type *PremiumSMSMessageDataResponseBody.
func unmarshalPremiumSMSMessageDataResponseBodyToAfricastalkingviewsPremiumSMSMessageDataView(v *PremiumSMSMessageDataResponseBody) *africastalkingviews.PremiumSMSMessageDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.PremiumSMSMessageDataView{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*africastalkingviews.RecipientsView, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = unmarshalRecipientsResponseBodyToAfricastalkingviewsRecipientsView(val)
		}
	}

	return res
}

// unmarshalFetchSMSMessageDataResponseBodyToAfricastalkingviewsFetchSMSMessageDataView
// builds a value of type *africastalkingviews.FetchSMSMessageDataView from a
// value of type *FetchSMSMessageDataResponseBody.
func unmarshalFetchSMSMessageDataResponseBodyToAfricastalkingviewsFetchSMSMessageDataView(v *FetchSMSMessageDataResponseBody) *africastalkingviews.FetchSMSMessageDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.FetchSMSMessageDataView{}
	if v.Messages != nil {
		res.Messages = make([]*africastalkingviews.MessagesView, len(v.Messages))
		for i, val := range v.Messages {
			res.Messages[i] = unmarshalMessagesResponseBodyToAfricastalkingviewsMessagesView(val)
		}
	}

	return res
}

// unmarshalMessagesResponseBodyToAfricastalkingviewsMessagesView builds a
// value of type *africastalkingviews.MessagesView from a value of type
// *MessagesResponseBody.
func unmarshalMessagesResponseBodyToAfricastalkingviewsMessagesView(v *MessagesResponseBody) *africastalkingviews.MessagesView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.MessagesView{
		LinkID: v.LinkID,
		Text:   v.Text,
		To:     v.To,
		ID:     v.ID,
		Date:   v.Date,
		From:   v.From,
	}

	return res
}

// unmarshalSubscriptionsResponseBodyToAfricastalkingviewsSubscriptionsView
// builds a value of type *africastalkingviews.SubscriptionsView from a value
// of type *SubscriptionsResponseBody.
func unmarshalSubscriptionsResponseBodyToAfricastalkingviewsSubscriptionsView(v *SubscriptionsResponseBody) *africastalkingviews.SubscriptionsView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.SubscriptionsView{
		ID:     v.ID,
		Number: v.Number,
		Date:   v.Date,
	}

	return res
}

// unmarshalVoiceEntryResponseBodyToAfricastalkingviewsVoiceEntryView builds a
// value of type *africastalkingviews.VoiceEntryView from a value of type
// *VoiceEntryResponseBody.
func unmarshalVoiceEntryResponseBodyToAfricastalkingviewsVoiceEntryView(v *VoiceEntryResponseBody) *africastalkingviews.VoiceEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.VoiceEntryView{
		PhoneNumber: v.PhoneNumber,
		Status:      v.Status,
		SessionID:   v.SessionID,
	}
	if v.SessionID == nil {
		var tmp string = "None"
		res.SessionID = &tmp
	}

	return res
}

// unmarshalQueuedStatusEntryResponseBodyToAfricastalkingviewsQueuedStatusEntryView
// builds a value of type *africastalkingviews.QueuedStatusEntryView from a
// value of type *QueuedStatusEntryResponseBody.
func unmarshalQueuedStatusEntryResponseBodyToAfricastalkingviewsQueuedStatusEntryView(v *QueuedStatusEntryResponseBody) *africastalkingviews.QueuedStatusEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.QueuedStatusEntryView{
		PhoneNumber: v.PhoneNumber,
		QueueName:   v.QueueName,
		NumCalls:    v.NumCalls,
	}

	return res
}

// marshalAfricastalkingMobileRecipientsToMobileRecipientsRequestBody builds a
// value of type *MobileRecipientsRequestBody from a value of type
// *africastalking.MobileRecipients.
func marshalAfricastalkingMobileRecipientsToMobileRecipientsRequestBody(v *africastalking.MobileRecipients) *MobileRecipientsRequestBody {
	res := &MobileRecipientsRequestBody{
		Name:            v.Name,
		PhoneNumber:     v.PhoneNumber,
		CurrencyCode:    v.CurrencyCode,
		Amount:          v.Amount,
		ProviderChannel: v.ProviderChannel,
		Reason:          v.Reason,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients builds a
// value of type *africastalking.MobileRecipients from a value of type
// *MobileRecipientsRequestBody.
func marshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients(v *MobileRecipientsRequestBody) *africastalking.MobileRecipients {
	res := &africastalking.MobileRecipients{
		Name:            v.Name,
		PhoneNumber:     v.PhoneNumber,
		CurrencyCode:    v.CurrencyCode,
		Amount:          v.Amount,
		ProviderChannel: v.ProviderChannel,
		Reason:          v.Reason,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalB2CEntryResponseBodyToAfricastalkingviewsB2CEntryView builds a
// value of type *africastalkingviews.B2CEntryView from a value of type
// *B2CEntryResponseBody.
func unmarshalB2CEntryResponseBodyToAfricastalkingviewsB2CEntryView(v *B2CEntryResponseBody) *africastalkingviews.B2CEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.B2CEntryView{
		PhoneNumber:     v.PhoneNumber,
		Status:          v.Status,
		TransactionID:   v.TransactionID,
		Provider:        v.Provider,
		ProviderChannel: v.ProviderChannel,
		Value:           v.Value,
		TransactionFee:  v.TransactionFee,
		ErrorMessage:    v.ErrorMessage,
	}

	return res
}

// marshalAfricastalkingBankAccountToBankAccountRequestBody builds a value of
// type *BankAccountRequestBody from a value of type
// *africastalking.BankAccount.
func marshalAfricastalkingBankAccountToBankAccountRequestBody(v *africastalking.BankAccount) *BankAccountRequestBody {
	res := &BankAccountRequestBody{
		AccountName:   v.AccountName,
		AccountNumber: v.AccountNumber,
		BankCode:      v.BankCode,
		DateOfBirth:   v.DateOfBirth,
	}

	return res
}

// marshalBankAccountRequestBodyToAfricastalkingBankAccount builds a value of
// type *africastalking.BankAccount from a value of type
// *BankAccountRequestBody.
func marshalBankAccountRequestBodyToAfricastalkingBankAccount(v *BankAccountRequestBody) *africastalking.BankAccount {
	res := &africastalking.BankAccount{
		AccountName:   v.AccountName,
		AccountNumber: v.AccountNumber,
		BankCode:      v.BankCode,
		DateOfBirth:   v.DateOfBirth,
	}

	return res
}

// marshalAfricastalkingTransferRecipientsToTransferRecipientsRequestBody
// builds a value of type *TransferRecipientsRequestBody from a value of type
// *africastalking.TransferRecipients.
func marshalAfricastalkingTransferRecipientsToTransferRecipientsRequestBody(v *africastalking.TransferRecipients) *TransferRecipientsRequestBody {
	res := &TransferRecipientsRequestBody{
		BankAccount:   v.BankAccount,
		AccountName:   v.AccountName,
		AccountNumber: v.AccountNumber,
		BankCode:      v.BankCode,
		DateOfBirth:   v.DateOfBirth,
		CurrencyCode:  v.CurrencyCode,
		Amount:        v.Amount,
		Narration:     v.Narration,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients
// builds a value of type *africastalking.TransferRecipients from a value of
// type *TransferRecipientsRequestBody.
func marshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients(v *TransferRecipientsRequestBody) *africastalking.TransferRecipients {
	res := &africastalking.TransferRecipients{
		BankAccount:   v.BankAccount,
		AccountName:   v.AccountName,
		AccountNumber: v.AccountNumber,
		BankCode:      v.BankCode,
		DateOfBirth:   v.DateOfBirth,
		CurrencyCode:  v.CurrencyCode,
		Amount:        v.Amount,
		Narration:     v.Narration,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// unmarshalTransferEntriesResponseBodyToAfricastalkingviewsTransferEntriesView
// builds a value of type *africastalkingviews.TransferEntriesView from a value
// of type *TransferEntriesResponseBody.
func unmarshalTransferEntriesResponseBodyToAfricastalkingviewsTransferEntriesView(v *TransferEntriesResponseBody) *africastalkingviews.TransferEntriesView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.TransferEntriesView{
		AccountNumber:  v.AccountNumber,
		Status:         v.Status,
		TransactionID:  v.TransactionID,
		TransactionFee: v.TransactionFee,
		ErrorMessage:   v.ErrorMessage,
	}

	return res
}

// marshalAfricastalkingPaymentCardToPaymentCardRequestBody builds a value of
// type *PaymentCardRequestBody from a value of type
// *africastalking.PaymentCard.
func marshalAfricastalkingPaymentCardToPaymentCardRequestBody(v *africastalking.PaymentCard) *PaymentCardRequestBody {
	if v == nil {
		return nil
	}
	res := &PaymentCardRequestBody{
		Number:      v.Number,
		CvvNumber:   v.CvvNumber,
		ExpiryMonth: v.ExpiryMonth,
		ExpiryYear:  v.ExpiryYear,
		CountryCode: v.CountryCode,
		AuthToken:   v.AuthToken,
	}

	return res
}

// marshalPaymentCardRequestBodyToAfricastalkingPaymentCard builds a value of
// type *africastalking.PaymentCard from a value of type
// *PaymentCardRequestBody.
func marshalPaymentCardRequestBodyToAfricastalkingPaymentCard(v *PaymentCardRequestBody) *africastalking.PaymentCard {
	if v == nil {
		return nil
	}
	res := &africastalking.PaymentCard{
		Number:      v.Number,
		CvvNumber:   v.CvvNumber,
		ExpiryMonth: v.ExpiryMonth,
		ExpiryYear:  v.ExpiryYear,
		CountryCode: v.CountryCode,
		AuthToken:   v.AuthToken,
	}

	return res
}

// marshalAfricastalkingAirtimeRecipientsToAirtimeRecipientsRequestBody builds
// a value of type *AirtimeRecipientsRequestBody from a value of type
// *africastalking.AirtimeRecipients.
func marshalAfricastalkingAirtimeRecipientsToAirtimeRecipientsRequestBody(v *africastalking.AirtimeRecipients) *AirtimeRecipientsRequestBody {
	res := &AirtimeRecipientsRequestBody{
		PhoneNumber: v.PhoneNumber,
		Amount:      v.Amount,
	}

	return res
}

// marshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients builds
// a value of type *africastalking.AirtimeRecipients from a value of type
// *AirtimeRecipientsRequestBody.
func marshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients(v *AirtimeRecipientsRequestBody) *africastalking.AirtimeRecipients {
	res := &africastalking.AirtimeRecipients{
		PhoneNumber: v.PhoneNumber,
		Amount:      v.Amount,
	}

	return res
}

// unmarshalAirtimeEntryResponseBodyToAfricastalkingviewsAirtimeEntryView
// builds a value of type *africastalkingviews.AirtimeEntryView from a value of
// type *AirtimeEntryResponseBody.
func unmarshalAirtimeEntryResponseBodyToAfricastalkingviewsAirtimeEntryView(v *AirtimeEntryResponseBody) *africastalkingviews.AirtimeEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.AirtimeEntryView{
		PhoneNumber:  v.PhoneNumber,
		Amount:       v.Amount,
		Discount:     v.Discount,
		Status:       v.Status,
		RequestID:    v.RequestID,
		ErrorMessage: v.ErrorMessage,
	}

	return res
}

// unmarshalUserDataResponseBodyToAfricastalkingviewsUserDataView builds a
// value of type *africastalkingviews.UserDataView from a value of type
// *UserDataResponseBody.
func unmarshalUserDataResponseBodyToAfricastalkingviewsUserDataView(v *UserDataResponseBody) *africastalkingviews.UserDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.UserDataView{
		Balance: v.Balance,
	}

	return res
}
