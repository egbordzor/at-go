// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP server types
//
// Command:
// $ goa gen github.com/wondenge/at-go/design

package server

import (
	africastalking "github.com/wondenge/at-go/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-go/gen/africastalking/views"
	goa "goa.design/goa/v3/pkg"
)

// SendBulkSMSRequestBody is the type of the "africastalking" service
// "SendBulkSMS" endpoint HTTP request body.
type SendBulkSMSRequestBody struct {
	// Africa’s Talking application username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Recipients’ phone numbers
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// Message to be sent
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Registered Short Code or Alphanumeric
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Used by MSP to determine who gets billed for a message
	BulkSMSMode *int `form:"bulkSMSMode,omitempty" json:"bulkSMSMode,omitempty" xml:"bulkSMSMode,omitempty"`
	// Used for Bulk SMS clients
	Enqueue *int `form:"enqueue,omitempty" json:"enqueue,omitempty" xml:"enqueue,omitempty"`
	// The keyword to be used for a premium service
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// Used for premium services to send OnDemand messages
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// No. of hours subscription message should be retried
	RetryDurationInHours *string `form:"retryDurationInHours,omitempty" json:"retryDurationInHours,omitempty" xml:"retryDurationInHours,omitempty"`
}

// SendPremiumSMSRequestBody is the type of the "africastalking" service
// "SendPremiumSMS" endpoint HTTP request body.
type SendPremiumSMSRequestBody struct {
	// Africa’s Talking application username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Recipients’ phone numbers
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// Message to be sent
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Registered Short Code or Alphanumeric
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// Used by MSP to determine who gets billed for a message
	BulkSMSMode *int `form:"bulkSMSMode,omitempty" json:"bulkSMSMode,omitempty" xml:"bulkSMSMode,omitempty"`
	// Used for Bulk SMS clients
	Enqueue *int `form:"enqueue,omitempty" json:"enqueue,omitempty" xml:"enqueue,omitempty"`
	// The keyword to be used for a premium service
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// Used for premium services to send OnDemand messages
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// No. of hours subscription message should be retried
	RetryDurationInHours *string `form:"retryDurationInHours,omitempty" json:"retryDurationInHours,omitempty" xml:"retryDurationInHours,omitempty"`
}

// NewCheckoutTokenRequestBody is the type of the "africastalking" service
// "NewCheckoutToken" endpoint HTTP request body.
type NewCheckoutTokenRequestBody struct {
	// Mobile phone number you want to create a subscription for.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
}

// NewPremiumSubscriptionRequestBody is the type of the "africastalking"
// service "NewPremiumSubscription" endpoint HTTP request body.
type NewPremiumSubscriptionRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Premium short code mapped to your account
	ShortCode *string `form:"shortCode,omitempty" json:"shortCode,omitempty" xml:"shortCode,omitempty"`
	// Premium keyword under short code mapped to your account.
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// The phoneNumber to be subscribed
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Token used to validate the subscription request
	CheckoutToken *string `form:"checkoutToken,omitempty" json:"checkoutToken,omitempty" xml:"checkoutToken,omitempty"`
}

// PurgePremiumSubscriptionRequestBody is the type of the "africastalking"
// service "PurgePremiumSubscription" endpoint HTTP request body.
type PurgePremiumSubscriptionRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Premium short code mapped to your account
	ShortCode *string `form:"shortCode,omitempty" json:"shortCode,omitempty" xml:"shortCode,omitempty"`
	// Premium keyword under short code mapped to your account.
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
	// The phoneNumber to be unsubscribed.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
}

// MakeCallRequestBody is the type of the "africastalking" service "MakeCall"
// endpoint HTTP request body.
type MakeCallRequestBody struct {
	// Africa’s Talking Username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking phone number
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
	// A comma separated string of recipients’ phone numbers.
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// Variable sent to Events Callback URL used to tag the call
	ClientRequestID *string `form:"clientRequestId,omitempty" json:"clientRequestId,omitempty" xml:"clientRequestId,omitempty"`
}

// TransferCallRequestBody is the type of the "africastalking" service
// "TransferCall" endpoint HTTP request body.
type TransferCallRequestBody struct {
	// Session Id of the ongoing call, it must have two legs
	SessionID *string `form:"sessionId,omitempty" json:"sessionId,omitempty" xml:"sessionId,omitempty"`
	// Phone Number to transfer the call to
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Call leg to transfer the call to either caller or callee
	CallLeg *string `form:"callLeg,omitempty" json:"callLeg,omitempty" xml:"callLeg,omitempty"`
	// The url of the media file to be played when the user is on hold.
	HoldMusicURL *string `form:"holdMusicUrl,omitempty" json:"holdMusicUrl,omitempty" xml:"holdMusicUrl,omitempty"`
}

// SayRequestBody is the type of the "africastalking" service "Say" endpoint
// HTTP request body.
type SayRequestBody struct {
	// This parameter specifies the voice to use
	Voice *string `form:"voice,omitempty" json:"voice,omitempty" xml:"voice,omitempty"`
	// Instructs AT to play a beep after reading the text contained in the request
	PlayBeep *bool `form:"playBeep,omitempty" json:"playBeep,omitempty" xml:"playBeep,omitempty"`
}

// PlayRequestBody is the type of the "africastalking" service "Play" endpoint
// HTTP request body.
type PlayRequestBody struct {
	// A valid URL that contains a link to the file to be played.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// GetDigitsRequestBody is the type of the "africastalking" service "GetDigits"
// endpoint HTTP request body.
type GetDigitsRequestBody struct {
	// Instructs AT to forward results of the GetDigits action to the URL value
	// passed in.
	CallbackURL *string `form:"callbackUrl,omitempty" json:"callbackUrl,omitempty" xml:"callbackUrl,omitempty"`
	// This shows the number of digits you would like to grab from the user input.
	NumDigits *string `form:"numDigits,omitempty" json:"numDigits,omitempty" xml:"numDigits,omitempty"`
	// Timeout (in seconds) for getting the digits, after which the system moves on
	// to the next element.
	Timeout *string `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// The key which will terminate the action of getting digits.
	FinishOnKey *string `form:"finishOnKey,omitempty" json:"finishOnKey,omitempty" xml:"finishOnKey,omitempty"`
}

// DialRequestBody is the type of the "africastalking" service "Dial" endpoint
// HTTP request body.
type DialRequestBody struct {
	PhoneNumbers *string `form:"phoneNumbers,omitempty" json:"phoneNumbers,omitempty" xml:"phoneNumbers,omitempty"`
	Record       *string `form:"record,omitempty" json:"record,omitempty" xml:"record,omitempty"`
	Sequential   *string `form:"sequential,omitempty" json:"sequential,omitempty" xml:"sequential,omitempty"`
	CallerID     *string `form:"callerId,omitempty" json:"callerId,omitempty" xml:"callerId,omitempty"`
	RingBackTone *string `form:"ringBackTone,omitempty" json:"ringBackTone,omitempty" xml:"ringBackTone,omitempty"`
	// This contains the maximum amount of time in seconds a call should take.
	MaxDuration *string `form:"maxDuration,omitempty" json:"maxDuration,omitempty" xml:"maxDuration,omitempty"`
}

// RecordRequestBody is the type of the "africastalking" service "Record"
// endpoint HTTP request body.
type RecordRequestBody struct {
	FinishOnKey *string `form:"finishOnKey,omitempty" json:"finishOnKey,omitempty" xml:"finishOnKey,omitempty"`
	MaxLength   *string `form:"maxLength,omitempty" json:"maxLength,omitempty" xml:"maxLength,omitempty"`
	Timeout     *string `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	TrimSilence *string `form:"trimSilence,omitempty" json:"trimSilence,omitempty" xml:"trimSilence,omitempty"`
	PlayBeep    *string `form:"playBeep,omitempty" json:"playBeep,omitempty" xml:"playBeep,omitempty"`
	CallbackURL *string `form:"callbackUrl,omitempty" json:"callbackUrl,omitempty" xml:"callbackUrl,omitempty"`
}

// EnqueueRequestBody is the type of the "africastalking" service "Enqueue"
// endpoint HTTP request body.
type EnqueueRequestBody struct {
	HoldMusic *string `form:"holdMusic,omitempty" json:"holdMusic,omitempty" xml:"holdMusic,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// DequeueRequestBody is the type of the "africastalking" service "Dequeue"
// endpoint HTTP request body.
type DequeueRequestBody struct {
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RedirectRequestBody is the type of the "africastalking" service "Redirect"
// endpoint HTTP request body.
type RedirectRequestBody struct {
	// Reject
	Reject *string `form:"Reject,omitempty" json:"Reject,omitempty" xml:"Reject,omitempty"`
}

// RejectRequestBody is the type of the "africastalking" service "Reject"
// endpoint HTTP request body.
type RejectRequestBody struct {
	// Redirect
	Redirect *string `form:"Redirect,omitempty" json:"Redirect,omitempty" xml:"Redirect,omitempty"`
}

// QueueRequestBody is the type of the "africastalking" service "Queue"
// endpoint HTTP request body.
type QueueRequestBody struct {
	// Your Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// List of one or more numbers mapped to your Africa’s Talking account.
	PhoneNumbers *string `form:"phoneNumbers,omitempty" json:"phoneNumbers,omitempty" xml:"phoneNumbers,omitempty"`
}

// UploadMediaRequestBody is the type of the "africastalking" service
// "UploadMedia" endpoint HTTP request body.
type UploadMediaRequestBody struct {
	// Your Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The url of the file to upload.
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
}

// MobileCheckoutRequestBody is the type of the "africastalking" service
// "MobileCheckout" endpoint HTTP request body.
type MobileCheckoutRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Provider channel the payment will be initiated from.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Phone number of the client that will complete this transaction.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// 3-digit ISO format currency code.
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount client is expected to confirm.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Map of any metadata associates with the request
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// MobileB2CRequestBody is the type of the "africastalking" service "MobileB2C"
// endpoint HTTP request body.
type MobileB2CRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment Product to initiate this transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// A list of B2C Mobile Recipients
	Recipients []*MobileRecipientsRequestBody `form:"recipients,omitempty" json:"recipients,omitempty" xml:"recipients,omitempty"`
}

// MobileB2BRequestBody is the type of the "africastalking" service "MobileB2B"
// endpoint HTTP request body.
type MobileB2BRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment Product initiating transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Provider used to process the B2C request.
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Transfer type of the payment.
	TransferType *string `form:"transferType,omitempty" json:"transferType,omitempty" xml:"transferType,omitempty"`
	// 3-digit ISO format currency code
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount client is expected to confirm.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Name or number of the channel receiving payment by the provider.
	DestinationChannel *string `form:"destinationChannel,omitempty" json:"destinationChannel,omitempty" xml:"destinationChannel,omitempty"`
	// Account name used by the business to receive money on the provided
	// destinationChannel.
	DestinationAccount *string `form:"destinationAccount,omitempty" json:"destinationAccount,omitempty" xml:"destinationAccount,omitempty"`
	// A map of any metadata associated with the request.
	Metadata *string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// BankCheckoutRequestBody is the type of the "africastalking" service "Bank
// Checkout" endpoint HTTP request body.
type BankCheckoutRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment Product to initiate this transaction.
	ProductName *string                 `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	BankAccount *BankAccountRequestBody `form:"bankAccount,omitempty" json:"bankAccount,omitempty" xml:"bankAccount,omitempty"`
	// 3-digit ISO format currency code.
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount client is expected to confirm.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Short description of the transaction displayed on the clients statement.
	Narration *string `form:"narration,omitempty" json:"narration,omitempty" xml:"narration,omitempty"`
	// A map of any metadata that you would like us to associate with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// BankCheckoutValidateRequestBody is the type of the "africastalking" service
// "BankCheckoutValidate" endpoint HTTP request body.
type BankCheckoutValidateRequestBody struct {
	// Africa’s Talking application Username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// The ID of the transaction to be validated.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// One Time Password bank sent to the client.
	Otp *string `form:"otp,omitempty" json:"otp,omitempty" xml:"otp,omitempty"`
}

// BankTransferRequestBody is the type of the "africastalking" service
// "BankTransfer" endpoint HTTP request body.
type BankTransferRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Transfer Recipients
	Recipients []*TransferRecipientsRequestBody `form:"recipients,omitempty" json:"recipients,omitempty" xml:"recipients,omitempty"`
}

// CardCheckoutRequestBody is the type of the "africastalking" service
// "CardCheckout" endpoint HTTP request body.
type CardCheckoutRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment Product initiating transaction.
	ProductName *string                 `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	PaymentCard *PaymentCardRequestBody `form:"paymentCard,omitempty" json:"paymentCard,omitempty" xml:"paymentCard,omitempty"`
	// Token generated by AfricasTalking
	CheckoutToken *string `form:"checkoutToken,omitempty" json:"checkoutToken,omitempty" xml:"checkoutToken,omitempty"`
	// 3-digit ISO format currency code.
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount client is expected to confirm.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Short description of the transaction.
	Narration *string `form:"narration,omitempty" json:"narration,omitempty" xml:"narration,omitempty"`
	// Metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// CardCheckoutValidateRequestBody is the type of the "africastalking" service
// "CardCheckoutValidate" endpoint HTTP request body.
type CardCheckoutValidateRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// ID of the transaction application wants to validate.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// One Time Password card provider sent to the client.
	Otp *string `form:"otp,omitempty" json:"otp,omitempty" xml:"otp,omitempty"`
}

// WalletTransferRequestBody is the type of the "africastalking" service
// "WalletTransfer" endpoint HTTP request body.
type WalletTransferRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// Unique product code to transfer the funds to.
	TargetProductCode *string `form:"targetProductCode,omitempty" json:"targetProductCode,omitempty" xml:"targetProductCode,omitempty"`
	// 3-digit ISO format currency code
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount application will be topped up with.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// TopupStashRequestBody is the type of the "africastalking" service
// "TopupStash" endpoint HTTP request body.
type TopupStashRequestBody struct {
	// Africa’s Talking application username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa’s Talking Payment product initiating transaction.
	ProductName *string `form:"productName,omitempty" json:"productName,omitempty" xml:"productName,omitempty"`
	// 3-digit ISO format currency code.
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount application will be topped up with.
	Amount *float64 `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// SendAirtimeRequestBody is the type of the "africastalking" service
// "SendAirtime" endpoint HTTP request body.
type SendAirtimeRequestBody struct {
	// Africa’s Talking application username.
	Username   *string                         `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	Recipients []*AirtimeRecipientsRequestBody `form:"recipients,omitempty" json:"recipients,omitempty" xml:"recipients,omitempty"`
}

// PublishIoTRequestBody is the type of the "africastalking" service
// "PublishIoT" endpoint HTTP request body.
type PublishIoTRequestBody struct {
	// Africa’s Talking application username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Device group to which the message is to be sent
	DeviceGroup *string `form:"deviceGroup,omitempty" json:"deviceGroup,omitempty" xml:"deviceGroup,omitempty"`
	// Messaging channel to which the message is to be sent.
	Topic *string `form:"topic,omitempty" json:"topic,omitempty" xml:"topic,omitempty"`
	// Message packet to be sent to the subscribed devices
	Payload *string `form:"payload,omitempty" json:"payload,omitempty" xml:"payload,omitempty"`
}

// GenerateRequestBody is the type of the "africastalking" service "Generate"
// endpoint HTTP request body.
type GenerateRequestBody struct {
	// Africa's Talking Username.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Africa's Talking API Key.
	APIKey *string `form:"apiKey,omitempty" json:"apiKey,omitempty" xml:"apiKey,omitempty"`
}

// SendBulkSMSResponseBody is the type of the "africastalking" service
// "SendBulkSMS" endpoint HTTP response body.
type SendBulkSMSResponseBody struct {
	SMSMessageData *BulkSMSMessageDataResponseBody `form:"SMSMessageData,omitempty" json:"SMSMessageData,omitempty" xml:"SMSMessageData,omitempty"`
}

// SendPremiumSMSResponseBody is the type of the "africastalking" service
// "SendPremiumSMS" endpoint HTTP response body.
type SendPremiumSMSResponseBody struct {
	SMSMessageData *PremiumSMSMessageDataResponseBody `form:"SMSMessageData,omitempty" json:"SMSMessageData,omitempty" xml:"SMSMessageData,omitempty"`
}

// FetchSMSResponseBody is the type of the "africastalking" service "FetchSMS"
// endpoint HTTP response body.
type FetchSMSResponseBody struct {
	SMSMessageData *FetchSMSMessageDataResponseBody `form:"SMSMessageData,omitempty" json:"SMSMessageData,omitempty" xml:"SMSMessageData,omitempty"`
}

// NewCheckoutTokenResponseBody is the type of the "africastalking" service
// "NewCheckoutToken" endpoint HTTP response body.
type NewCheckoutTokenResponseBody struct {
	// A description of the status of the request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The checkout token to be used
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// NewPremiumSubscriptionResponseBody is the type of the "africastalking"
// service "NewPremiumSubscription" endpoint HTTP response body.
type NewPremiumSubscriptionResponseBody struct {
	// Indicates whether the prompt to subscribe to shortcode was successfully
	// raised or not.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Describes status of the create subscription request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// FetchPremiumSubscriptionResponseBody is the type of the "africastalking"
// service "FetchPremiumSubscription" endpoint HTTP response body.
type FetchPremiumSubscriptionResponseBody struct {
	// A list of subscriptions made to the product.
	Subscriptions []*SubscriptionsResponseBody `form:"Subscriptions,omitempty" json:"Subscriptions,omitempty" xml:"Subscriptions,omitempty"`
}

// PurgePremiumSubscriptionResponseBody is the type of the "africastalking"
// service "PurgePremiumSubscription" endpoint HTTP response body.
type PurgePremiumSubscriptionResponseBody struct {
	// Indicates whether the phone number was successfully unsubscribed or not.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Describes status of the delete subscription request.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// MakeCallResponseBody is the type of the "africastalking" service "MakeCall"
// endpoint HTTP response body.
type MakeCallResponseBody struct {
	Entries []*VoiceEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// Error message if ENTIRE request was rejected by the API.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// TransferCallResponseBody is the type of the "africastalking" service
// "TransferCall" endpoint HTTP response body.
type TransferCallResponseBody struct {
	// can be either Success or Aborted
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Why the transfer ws aborted None is successful
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// QueueResponseBody is the type of the "africastalking" service "Queue"
// endpoint HTTP response body.
type QueueResponseBody struct {
	Entries []*QueuedStatusEntryResponseBody `form:"Entries,omitempty" json:"Entries,omitempty" xml:"Entries,omitempty"`
	// Error Message
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// MobileCheckoutResponseBody is the type of the "africastalking" service
// "MobileCheckout" endpoint HTTP response body.
type MobileCheckoutResponseBody struct {
	// Status of the request
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Provider channel used to initiate this transaction.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
}

// MobileB2CResponseBody is the type of the "africastalking" service
// "MobileB2C" endpoint HTTP response body.
type MobileB2CResponseBody struct {
	// Number of B2C transactions that were successfully queued.
	NumQueued *int `form:"numQueued,omitempty" json:"numQueued,omitempty" xml:"numQueued,omitempty"`
	// Total value of all the transactions that were successfully queued.
	TotalValue *string `form:"totalValue,omitempty" json:"totalValue,omitempty" xml:"totalValue,omitempty"`
	// Total transaction fee charged for all the transactions that were
	// successfully queued.
	TotalTransactionFee *string `form:"totalTransactionFee,omitempty" json:"totalTransactionFee,omitempty" xml:"totalTransactionFee,omitempty"`
	// A list of B2C entries
	Entries []*B2CEntryResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// Error message if the ENTIRE request was rejected by the API
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// MobileB2BResponseBody is the type of the "africastalking" service
// "MobileB2B" endpoint HTTP response body.
type MobileB2BResponseBody struct {
	// The status of the B2B transaction.
	Status string `form:"status" json:"status" xml:"status"`
	// A unique id that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// Provider channel which facilitated the payment.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// BankCheckoutResponseBody is the type of the "africastalking" service "Bank
// Checkout" endpoint HTTP response body.
type BankCheckoutResponseBody struct {
	// This corresponds to the status of the request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// BankCheckoutValidateResponseBody is the type of the "africastalking" service
// "BankCheckoutValidate" endpoint HTTP response body.
type BankCheckoutValidateResponseBody struct {
	// The final status of this request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// BankTransferResponseBody is the type of the "africastalking" service
// "BankTransfer" endpoint HTTP response body.
type BankTransferResponseBody struct {
	// Transfer Entries
	Entries []*TransferEntriesResponseBody `form:"entries,omitempty" json:"entries,omitempty" xml:"entries,omitempty"`
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// CardCheckoutResponseBody is the type of the "africastalking" service
// "CardCheckout" endpoint HTTP response body.
type CardCheckoutResponseBody struct {
	// The status of the request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID generated for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// CardCheckoutValidateResponseBody is the type of the "africastalking" service
// "CardCheckoutValidate" endpoint HTTP response body.
type CardCheckoutValidateResponseBody struct {
	// Corresponds to the final status of this request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Token application can use to initiate subsequent charges.
	CheckoutToken *string `form:"checkoutToken,omitempty" json:"checkoutToken,omitempty" xml:"checkoutToken,omitempty"`
}

// WalletTransferResponseBody is the type of the "africastalking" service
// "WalletTransfer" endpoint HTTP response body.
type WalletTransferResponseBody struct {
	// Corresponds to the status of the request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// A unique id that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// TopupStashResponseBody is the type of the "africastalking" service
// "TopupStash" endpoint HTTP response body.
type TopupStashResponseBody struct {
	// Corresponds to the status of the request
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A detailed description of the request status.
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Unique ID for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
}

// SendAirtimeResponseBody is the type of the "africastalking" service
// "SendAirtime" endpoint HTTP response body.
type SendAirtimeResponseBody struct {
	// Number of requests sent to the provider
	NumSent *int `form:"numSent,omitempty" json:"numSent,omitempty" xml:"numSent,omitempty"`
	// Total value of airtime sent to the provider.
	TotalAmount *string `form:"totalAmount,omitempty" json:"totalAmount,omitempty" xml:"totalAmount,omitempty"`
	// Total discount applied on the airtime.
	TotalDiscount *string                     `form:"totalDiscount,omitempty" json:"totalDiscount,omitempty" xml:"totalDiscount,omitempty"`
	Responses     []*AirtimeEntryResponseBody `form:"responses,omitempty" json:"responses,omitempty" xml:"responses,omitempty"`
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// PublishIoTResponseBody is the type of the "africastalking" service
// "PublishIoT" endpoint HTTP response body.
type PublishIoTResponseBody struct {
	// Response status of the API request.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Verbose response message detailing the status of the HTTP response
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// InitiateAppDataResponseBody is the type of the "africastalking" service
// "InitiateAppData" endpoint HTTP response body.
type InitiateAppDataResponseBody struct {
	UserData *UserDataResponseBody `form:"UserData,omitempty" json:"UserData,omitempty" xml:"UserData,omitempty"`
}

// GenerateResponseBody is the type of the "africastalking" service "Generate"
// endpoint HTTP response body.
type GenerateResponseBody struct {
	// Generated Auth Token.
	Token string `form:"token" json:"token" xml:"token"`
	// Token Lifetime
	LifetimeInSeconds int `form:"lifetimeInSeconds" json:"lifetimeInSeconds" xml:"lifetimeInSeconds"`
}

// BulkSMSMessageDataResponseBody is used to define fields on response body
// types.
type BulkSMSMessageDataResponseBody struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string `form:"Messages,omitempty" json:"Messages,omitempty" xml:"Messages,omitempty"`
	// A list of recipients included in the original request.
	Recipients []*RecipientsResponseBody `form:"Recipients,omitempty" json:"Recipients,omitempty" xml:"Recipients,omitempty"`
}

// RecipientsResponseBody is used to define fields on response body types.
type RecipientsResponseBody struct {
	// This corresponds to the status of the request
	StatusCode *int `form:"statusCode,omitempty" json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	// The recipient’s phone number
	Number *string `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
	// A string indicating whether the sms was sent to this recipient or not.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Amount incurred to send this sms.
	Cost *string `form:"cost,omitempty" json:"cost,omitempty" xml:"cost,omitempty"`
	// The messageId received when the sms was sent.
	MessageID *string `form:"messageId,omitempty" json:"messageId,omitempty" xml:"messageId,omitempty"`
}

// PremiumSMSMessageDataResponseBody is used to define fields on response body
// types.
type PremiumSMSMessageDataResponseBody struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string `form:"Messages,omitempty" json:"Messages,omitempty" xml:"Messages,omitempty"`
	// A list of recipients included in the original request.
	Recipients []*RecipientsResponseBody `form:"Recipients,omitempty" json:"Recipients,omitempty" xml:"Recipients,omitempty"`
}

// FetchSMSMessageDataResponseBody is used to define fields on response body
// types.
type FetchSMSMessageDataResponseBody struct {
	Messages []*MessagesResponseBody `form:"Messages,omitempty" json:"Messages,omitempty" xml:"Messages,omitempty"`
}

// MessagesResponseBody is used to define fields on response body types.
type MessagesResponseBody struct {
	// A unique identifier attached to each incoming message.
	LinkID *string `form:"linkId,omitempty" json:"linkId,omitempty" xml:"linkId,omitempty"`
	// The content of the message received.
	Text *string `form:"text,omitempty" json:"text,omitempty" xml:"text,omitempty"`
	// Your registered short code that the sms was sent out to.
	To *string `form:"to,omitempty" json:"to,omitempty" xml:"to,omitempty"`
	// The id of the message.
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The date when the sms was sent.
	Date *string `form:"date,omitempty" json:"date,omitempty" xml:"date,omitempty"`
	// The sender’s phone number.
	From *string `form:"from,omitempty" json:"from,omitempty" xml:"from,omitempty"`
}

// SubscriptionsResponseBody is used to define fields on response body types.
type SubscriptionsResponseBody struct {
	// The id of the subscription
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// The phone number subscribed to the product.
	Number *string `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
	// Timestamp when the subscription was made.
	Date *string `form:"Date,omitempty" json:"Date,omitempty" xml:"Date,omitempty"`
}

// VoiceEntryResponseBody is used to define fields on response body types.
type VoiceEntryResponseBody struct {
	// The phone number queued.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	Status      *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique id for the request associated to this phone number
	SessionID string `form:"sessionId,omitempty" json:"sessionId,omitempty" xml:"sessionId,omitempty"`
}

// QueuedStatusEntryResponseBody is used to define fields on response body
// types.
type QueuedStatusEntryResponseBody struct {
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	QueueName   *string `form:"queueName,omitempty" json:"queueName,omitempty" xml:"queueName,omitempty"`
	NumCalls    *string `form:"numCalls,omitempty" json:"numCalls,omitempty" xml:"numCalls,omitempty"`
}

// B2CEntryResponseBody is used to define fields on response body types.
type B2CEntryResponseBody struct {
	// The phone number of the B2C transaction recipient.
	PhoneNumber string `form:"phoneNumber" json:"phoneNumber" xml:"phoneNumber"`
	// The status of the B2C transaction.
	Status string `form:"status" json:"status" xml:"status"`
	// Unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Provider used to process the B2C request.
	Provider *string `form:"provider,omitempty" json:"provider,omitempty" xml:"provider,omitempty"`
	// Channel used to process the B2C request.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Value sent to the mobile subscriber.
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// TransferEntriesResponseBody is used to define fields on response body types.
type TransferEntriesResponseBody struct {
	// The account number of the bank transfer recipient.
	AccountNumber *string `form:"accountNumber,omitempty" json:"accountNumber,omitempty" xml:"accountNumber,omitempty"`
	// The transaction has been accepted and queued for processing by the payment
	// provider.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// A unique ID that our API generates for successful requests.
	TransactionID *string `form:"transactionId,omitempty" json:"transactionId,omitempty" xml:"transactionId,omitempty"`
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string `form:"transactionFee,omitempty" json:"transactionFee,omitempty" xml:"transactionFee,omitempty"`
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// AirtimeEntryResponseBody is used to define fields on response body types.
type AirtimeEntryResponseBody struct {
	// Phone number for this transaction.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Value of airtime requested.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Discount applied to the requested airtime amount.
	Discount *string `form:"discount,omitempty" json:"discount,omitempty" xml:"discount,omitempty"`
	// Status of the request associated to this phone number
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Unique ID for the request associated to this phone number
	RequestID *string `form:"requestId,omitempty" json:"requestId,omitempty" xml:"requestId,omitempty"`
	// Error message for the request associated to this phone number.
	ErrorMessage *string `form:"errorMessage,omitempty" json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
}

// UserDataResponseBody is used to define fields on response body types.
type UserDataResponseBody struct {
	// Your Africa’s Talking application balance.
	Balance *string `form:"balance,omitempty" json:"balance,omitempty" xml:"balance,omitempty"`
}

// MobileRecipientsRequestBody is used to define fields on request body types.
type MobileRecipientsRequestBody struct {
	// Name of the B2C transaction recipient.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Phone number of the B2C transaction recipient.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// 3-digit ISO format currency code.
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount that the client is expected to confirm.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Channel payment will be made from.
	ProviderChannel *string `form:"providerChannel,omitempty" json:"providerChannel,omitempty" xml:"providerChannel,omitempty"`
	// Purpose of the payment.
	Reason *string `form:"reason,omitempty" json:"reason,omitempty" xml:"reason,omitempty"`
	// Map of metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// BankAccountRequestBody is used to define fields on request body types.
type BankAccountRequestBody struct {
	// Bank account name.
	AccountName *string `form:"accountName,omitempty" json:"accountName,omitempty" xml:"accountName,omitempty"`
	// Bank account number.
	AccountNumber *string `form:"accountNumber,omitempty" json:"accountNumber,omitempty" xml:"accountNumber,omitempty"`
	// 6-Digit Integer code for the bank that we allocate.
	BankCode *int `form:"bankCode,omitempty" json:"bankCode,omitempty" xml:"bankCode,omitempty"`
	// Date of birth of the account owner.
	DateOfBirth *string `form:"dateOfBirth,omitempty" json:"dateOfBirth,omitempty" xml:"dateOfBirth,omitempty"`
}

// TransferRecipientsRequestBody is used to define fields on request body types.
type TransferRecipientsRequestBody struct {
	// Details of a bank account to receive the bank transfer payment.
	BankAccount *string `form:"bankAccount,omitempty" json:"bankAccount,omitempty" xml:"bankAccount,omitempty"`
	// Bank account name.
	AccountName *string `form:"accountName,omitempty" json:"accountName,omitempty" xml:"accountName,omitempty"`
	// Bank account number.
	AccountNumber *string `form:"accountNumber,omitempty" json:"accountNumber,omitempty" xml:"accountNumber,omitempty"`
	// 6-Digit Integer code for the bank that we allocate.
	BankCode *string `form:"bankCode,omitempty" json:"bankCode,omitempty" xml:"bankCode,omitempty"`
	// Date of birth of the account owner.
	DateOfBirth *string `form:"dateOfBirth,omitempty" json:"dateOfBirth,omitempty" xml:"dateOfBirth,omitempty"`
	// 3-digit ISO format currency code
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty" xml:"currencyCode,omitempty"`
	// Amount client is expected to receive.
	Amount *string `form:"amount,omitempty" json:"amount,omitempty" xml:"amount,omitempty"`
	// Short description of the transaction displayed on the clients statement.
	Narration *string `form:"narration,omitempty" json:"narration,omitempty" xml:"narration,omitempty"`
	// A map of any metadata associated with the request.
	Metadata map[string]string `form:"metadata,omitempty" json:"metadata,omitempty" xml:"metadata,omitempty"`
}

// PaymentCardRequestBody is used to define fields on request body types.
type PaymentCardRequestBody struct {
	// Payment card number.
	Number *string `form:"number,omitempty" json:"number,omitempty" xml:"number,omitempty"`
	// 3 or 4 digit payment card verification value.
	CvvNumber *int `form:"cvvNumber,omitempty" json:"cvvNumber,omitempty" xml:"cvvNumber,omitempty"`
	// Expiration month on the payment card.
	ExpiryMonth *int `form:"expiryMonth,omitempty" json:"expiryMonth,omitempty" xml:"expiryMonth,omitempty"`
	// Expiration year on the payment card.
	ExpiryYear *int `form:"expiryYear,omitempty" json:"expiryYear,omitempty" xml:"expiryYear,omitempty"`
	// 2-Digit country code where the payment card was issued.
	CountryCode *string `form:"countryCode,omitempty" json:"countryCode,omitempty" xml:"countryCode,omitempty"`
	// The payment cards ATM PIN.
	AuthToken *string `form:"authToken,omitempty" json:"authToken,omitempty" xml:"authToken,omitempty"`
}

// AirtimeRecipientsRequestBody is used to define fields on request body types.
type AirtimeRecipientsRequestBody struct {
	// Phone number that will be topped up.
	PhoneNumber *string `form:"phoneNumber,omitempty" json:"phoneNumber,omitempty" xml:"phoneNumber,omitempty"`
	// Value of airtime to send together with the currency code.
	Amount *string `form:"amount ,omitempty" json:"amount ,omitempty" xml:"amount ,omitempty"`
}

// NewSendBulkSMSResponseBody builds the HTTP response body from the result of
// the "SendBulkSMS" endpoint of the "africastalking" service.
func NewSendBulkSMSResponseBody(res *africastalkingviews.BulkResponseView) *SendBulkSMSResponseBody {
	body := &SendBulkSMSResponseBody{}
	if res.SMSMessageData != nil {
		body.SMSMessageData = marshalAfricastalkingviewsBulkSMSMessageDataViewToBulkSMSMessageDataResponseBody(res.SMSMessageData)
	}
	return body
}

// NewSendPremiumSMSResponseBody builds the HTTP response body from the result
// of the "SendPremiumSMS" endpoint of the "africastalking" service.
func NewSendPremiumSMSResponseBody(res *africastalkingviews.PremiumSMSResponseView) *SendPremiumSMSResponseBody {
	body := &SendPremiumSMSResponseBody{}
	if res.SMSMessageData != nil {
		body.SMSMessageData = marshalAfricastalkingviewsPremiumSMSMessageDataViewToPremiumSMSMessageDataResponseBody(res.SMSMessageData)
	}
	return body
}

// NewFetchSMSResponseBody builds the HTTP response body from the result of the
// "FetchSMS" endpoint of the "africastalking" service.
func NewFetchSMSResponseBody(res *africastalkingviews.FetchMsgResponseView) *FetchSMSResponseBody {
	body := &FetchSMSResponseBody{}
	if res.SMSMessageData != nil {
		body.SMSMessageData = marshalAfricastalkingviewsFetchSMSMessageDataViewToFetchSMSMessageDataResponseBody(res.SMSMessageData)
	}
	return body
}

// NewNewCheckoutTokenResponseBody builds the HTTP response body from the
// result of the "NewCheckoutToken" endpoint of the "africastalking" service.
func NewNewCheckoutTokenResponseBody(res *africastalkingviews.CheckoutTokenResponseView) *NewCheckoutTokenResponseBody {
	body := &NewCheckoutTokenResponseBody{
		Description: res.Description,
		Token:       res.Token,
	}
	return body
}

// NewNewPremiumSubscriptionResponseBody builds the HTTP response body from the
// result of the "NewPremiumSubscription" endpoint of the "africastalking"
// service.
func NewNewPremiumSubscriptionResponseBody(res *africastalkingviews.NewSubResponseView) *NewPremiumSubscriptionResponseBody {
	body := &NewPremiumSubscriptionResponseBody{
		Status:      res.Status,
		Description: res.Description,
	}
	return body
}

// NewFetchPremiumSubscriptionResponseBody builds the HTTP response body from
// the result of the "FetchPremiumSubscription" endpoint of the
// "africastalking" service.
func NewFetchPremiumSubscriptionResponseBody(res *africastalkingviews.FetchSubResponseView) *FetchPremiumSubscriptionResponseBody {
	body := &FetchPremiumSubscriptionResponseBody{}
	if res.Subscriptions != nil {
		body.Subscriptions = make([]*SubscriptionsResponseBody, len(res.Subscriptions))
		for i, val := range res.Subscriptions {
			body.Subscriptions[i] = marshalAfricastalkingviewsSubscriptionsViewToSubscriptionsResponseBody(val)
		}
	}
	return body
}

// NewPurgePremiumSubscriptionResponseBody builds the HTTP response body from
// the result of the "PurgePremiumSubscription" endpoint of the
// "africastalking" service.
func NewPurgePremiumSubscriptionResponseBody(res *africastalkingviews.PurgeSubResponseView) *PurgePremiumSubscriptionResponseBody {
	body := &PurgePremiumSubscriptionResponseBody{
		Status:      res.Status,
		Description: res.Description,
	}
	return body
}

// NewMakeCallResponseBody builds the HTTP response body from the result of the
// "MakeCall" endpoint of the "africastalking" service.
func NewMakeCallResponseBody(res *africastalkingviews.MakeCallResponseView) *MakeCallResponseBody {
	body := &MakeCallResponseBody{
		ErrorMessage: res.ErrorMessage,
	}
	if res.Entries != nil {
		body.Entries = make([]*VoiceEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalAfricastalkingviewsVoiceEntryViewToVoiceEntryResponseBody(val)
		}
	}
	return body
}

// NewTransferCallResponseBody builds the HTTP response body from the result of
// the "TransferCall" endpoint of the "africastalking" service.
func NewTransferCallResponseBody(res *africastalkingviews.CalltransferresponseView) *TransferCallResponseBody {
	body := &TransferCallResponseBody{
		Status:       res.Status,
		ErrorMessage: res.ErrorMessage,
	}
	return body
}

// NewQueueResponseBody builds the HTTP response body from the result of the
// "Queue" endpoint of the "africastalking" service.
func NewQueueResponseBody(res *africastalkingviews.QueuedstatusresultView) *QueueResponseBody {
	body := &QueueResponseBody{
		ErrorMessage: res.ErrorMessage,
	}
	if res.Entries != nil {
		body.Entries = make([]*QueuedStatusEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalAfricastalkingviewsQueuedStatusEntryViewToQueuedStatusEntryResponseBody(val)
		}
	}
	return body
}

// NewMobileCheckoutResponseBody builds the HTTP response body from the result
// of the "MobileCheckout" endpoint of the "africastalking" service.
func NewMobileCheckoutResponseBody(res *africastalkingviews.MobileCheckoutResponseView) *MobileCheckoutResponseBody {
	body := &MobileCheckoutResponseBody{
		Status:          res.Status,
		Description:     res.Description,
		TransactionID:   res.TransactionID,
		ProviderChannel: res.ProviderChannel,
	}
	return body
}

// NewMobileB2CResponseBody builds the HTTP response body from the result of
// the "MobileB2C" endpoint of the "africastalking" service.
func NewMobileB2CResponseBody(res *africastalkingviews.MobileB2CResponseView) *MobileB2CResponseBody {
	body := &MobileB2CResponseBody{
		NumQueued:           res.NumQueued,
		TotalValue:          res.TotalValue,
		TotalTransactionFee: res.TotalTransactionFee,
		ErrorMessage:        res.ErrorMessage,
	}
	if res.Entries != nil {
		body.Entries = make([]*B2CEntryResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalAfricastalkingviewsB2CEntryViewToB2CEntryResponseBody(val)
		}
	}
	return body
}

// NewMobileB2BResponseBody builds the HTTP response body from the result of
// the "MobileB2B" endpoint of the "africastalking" service.
func NewMobileB2BResponseBody(res *africastalkingviews.MobileB2BResponseView) *MobileB2BResponseBody {
	body := &MobileB2BResponseBody{
		Status:          *res.Status,
		TransactionID:   res.TransactionID,
		TransactionFee:  res.TransactionFee,
		ProviderChannel: res.ProviderChannel,
		ErrorMessage:    res.ErrorMessage,
	}
	return body
}

// NewBankCheckoutResponseBody builds the HTTP response body from the result of
// the "Bank Checkout" endpoint of the "africastalking" service.
func NewBankCheckoutResponseBody(res *africastalkingviews.BankCheckoutResponseView) *BankCheckoutResponseBody {
	body := &BankCheckoutResponseBody{
		Status:        res.Status,
		Description:   res.Description,
		TransactionID: res.TransactionID,
	}
	return body
}

// NewBankCheckoutValidateResponseBody builds the HTTP response body from the
// result of the "BankCheckoutValidate" endpoint of the "africastalking"
// service.
func NewBankCheckoutValidateResponseBody(res *africastalkingviews.BankCheckoutValidateResponseView) *BankCheckoutValidateResponseBody {
	body := &BankCheckoutValidateResponseBody{
		Status:      res.Status,
		Description: res.Description,
	}
	return body
}

// NewBankTransferResponseBody builds the HTTP response body from the result of
// the "BankTransfer" endpoint of the "africastalking" service.
func NewBankTransferResponseBody(res *africastalkingviews.BankTransferResponseView) *BankTransferResponseBody {
	body := &BankTransferResponseBody{
		ErrorMessage: res.ErrorMessage,
	}
	if res.Entries != nil {
		body.Entries = make([]*TransferEntriesResponseBody, len(res.Entries))
		for i, val := range res.Entries {
			body.Entries[i] = marshalAfricastalkingviewsTransferEntriesViewToTransferEntriesResponseBody(val)
		}
	}
	return body
}

// NewCardCheckoutResponseBody builds the HTTP response body from the result of
// the "CardCheckout" endpoint of the "africastalking" service.
func NewCardCheckoutResponseBody(res *africastalkingviews.CardCheckoutResponseView) *CardCheckoutResponseBody {
	body := &CardCheckoutResponseBody{
		Status:        res.Status,
		Description:   res.Description,
		TransactionID: res.TransactionID,
	}
	return body
}

// NewCardCheckoutValidateResponseBody builds the HTTP response body from the
// result of the "CardCheckoutValidate" endpoint of the "africastalking"
// service.
func NewCardCheckoutValidateResponseBody(res *africastalkingviews.CardCheckoutValidateResponseView) *CardCheckoutValidateResponseBody {
	body := &CardCheckoutValidateResponseBody{
		Status:        res.Status,
		Description:   res.Description,
		CheckoutToken: res.CheckoutToken,
	}
	return body
}

// NewWalletTransferResponseBody builds the HTTP response body from the result
// of the "WalletTransfer" endpoint of the "africastalking" service.
func NewWalletTransferResponseBody(res *africastalkingviews.WalletTransferResponseView) *WalletTransferResponseBody {
	body := &WalletTransferResponseBody{
		Status:        res.Status,
		Description:   res.Description,
		TransactionID: res.TransactionID,
	}
	return body
}

// NewTopupStashResponseBody builds the HTTP response body from the result of
// the "TopupStash" endpoint of the "africastalking" service.
func NewTopupStashResponseBody(res *africastalkingviews.TopupStashResponseView) *TopupStashResponseBody {
	body := &TopupStashResponseBody{
		Status:        res.Status,
		Description:   res.Description,
		TransactionID: res.TransactionID,
	}
	return body
}

// NewSendAirtimeResponseBody builds the HTTP response body from the result of
// the "SendAirtime" endpoint of the "africastalking" service.
func NewSendAirtimeResponseBody(res *africastalkingviews.AirtimeResponseView) *SendAirtimeResponseBody {
	body := &SendAirtimeResponseBody{
		NumSent:       res.NumSent,
		TotalAmount:   res.TotalAmount,
		TotalDiscount: res.TotalDiscount,
		ErrorMessage:  res.ErrorMessage,
	}
	if res.Responses != nil {
		body.Responses = make([]*AirtimeEntryResponseBody, len(res.Responses))
		for i, val := range res.Responses {
			body.Responses[i] = marshalAfricastalkingviewsAirtimeEntryViewToAirtimeEntryResponseBody(val)
		}
	}
	return body
}

// NewPublishIoTResponseBody builds the HTTP response body from the result of
// the "PublishIoT" endpoint of the "africastalking" service.
func NewPublishIoTResponseBody(res *africastalkingviews.IoTResponseView) *PublishIoTResponseBody {
	body := &PublishIoTResponseBody{
		Status:      res.Status,
		Description: res.Description,
	}
	return body
}

// NewInitiateAppDataResponseBody builds the HTTP response body from the result
// of the "InitiateAppData" endpoint of the "africastalking" service.
func NewInitiateAppDataResponseBody(res *africastalkingviews.UserResponseView) *InitiateAppDataResponseBody {
	body := &InitiateAppDataResponseBody{}
	if res.UserData != nil {
		body.UserData = marshalAfricastalkingviewsUserDataViewToUserDataResponseBody(res.UserData)
	}
	return body
}

// NewGenerateResponseBody builds the HTTP response body from the result of the
// "Generate" endpoint of the "africastalking" service.
func NewGenerateResponseBody(res *africastalkingviews.AccessTokenResponseView) *GenerateResponseBody {
	body := &GenerateResponseBody{
		Token:             *res.Token,
		LifetimeInSeconds: *res.LifetimeInSeconds,
	}
	return body
}

// NewSendBulkSMSBulkPayload builds a africastalking service SendBulkSMS
// endpoint payload.
func NewSendBulkSMSBulkPayload(body *SendBulkSMSRequestBody) *africastalking.BulkPayload {
	v := &africastalking.BulkPayload{
		Username:             *body.Username,
		To:                   *body.To,
		Message:              *body.Message,
		From:                 body.From,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}
	if body.BulkSMSMode != nil {
		v.BulkSMSMode = *body.BulkSMSMode
	}
	if body.Enqueue != nil {
		v.Enqueue = *body.Enqueue
	}
	if body.BulkSMSMode == nil {
		v.BulkSMSMode = 1
	}
	if body.Enqueue == nil {
		v.Enqueue = 1
	}

	return v
}

// NewSendPremiumSMSPremiumPayload builds a africastalking service
// SendPremiumSMS endpoint payload.
func NewSendPremiumSMSPremiumPayload(body *SendPremiumSMSRequestBody) *africastalking.PremiumPayload {
	v := &africastalking.PremiumPayload{
		Username:             *body.Username,
		To:                   *body.To,
		Message:              *body.Message,
		From:                 body.From,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}
	if body.BulkSMSMode != nil {
		v.BulkSMSMode = *body.BulkSMSMode
	}
	if body.Enqueue != nil {
		v.Enqueue = *body.Enqueue
	}
	if body.BulkSMSMode == nil {
		v.BulkSMSMode = 1
	}
	if body.Enqueue == nil {
		v.Enqueue = 1
	}

	return v
}

// NewFetchSMSFetchMsgPayload builds a africastalking service FetchSMS endpoint
// payload.
func NewFetchSMSFetchMsgPayload(username string, lastReceivedID string) *africastalking.FetchMsgPayload {
	v := &africastalking.FetchMsgPayload{}
	v.Username = username
	v.LastReceivedID = lastReceivedID

	return v
}

// NewNewCheckoutTokenCheckoutTokenPayload builds a africastalking service
// NewCheckoutToken endpoint payload.
func NewNewCheckoutTokenCheckoutTokenPayload(body *NewCheckoutTokenRequestBody) *africastalking.CheckoutTokenPayload {
	v := &africastalking.CheckoutTokenPayload{
		PhoneNumber: *body.PhoneNumber,
	}

	return v
}

// NewNewPremiumSubscriptionNewSubPayload builds a africastalking service
// NewPremiumSubscription endpoint payload.
func NewNewPremiumSubscriptionNewSubPayload(body *NewPremiumSubscriptionRequestBody) *africastalking.NewSubPayload {
	v := &africastalking.NewSubPayload{
		Username:      *body.Username,
		ShortCode:     *body.ShortCode,
		Keyword:       *body.Keyword,
		PhoneNumber:   *body.PhoneNumber,
		CheckoutToken: *body.CheckoutToken,
	}

	return v
}

// NewFetchPremiumSubscriptionFetchSubPayload builds a africastalking service
// FetchPremiumSubscription endpoint payload.
func NewFetchPremiumSubscriptionFetchSubPayload(username string, shortCode string, keyword string, lastReceivedID string) *africastalking.FetchSubPayload {
	v := &africastalking.FetchSubPayload{}
	v.Username = username
	v.ShortCode = shortCode
	v.Keyword = keyword
	v.LastReceivedID = lastReceivedID

	return v
}

// NewPurgePremiumSubscriptionPurgeSubPayload builds a africastalking service
// PurgePremiumSubscription endpoint payload.
func NewPurgePremiumSubscriptionPurgeSubPayload(body *PurgePremiumSubscriptionRequestBody) *africastalking.PurgeSubPayload {
	v := &africastalking.PurgeSubPayload{
		Username:    *body.Username,
		ShortCode:   *body.ShortCode,
		Keyword:     *body.Keyword,
		PhoneNumber: *body.PhoneNumber,
	}

	return v
}

// NewMakeCallPayload builds a africastalking service MakeCall endpoint payload.
func NewMakeCallPayload(body *MakeCallRequestBody) *africastalking.MakeCallPayload {
	v := &africastalking.MakeCallPayload{
		Username:        *body.Username,
		From:            *body.From,
		To:              *body.To,
		ClientRequestID: body.ClientRequestID,
	}

	return v
}

// NewTransferCallCallTransferPayload builds a africastalking service
// TransferCall endpoint payload.
func NewTransferCallCallTransferPayload(body *TransferCallRequestBody) *africastalking.CallTransferPayload {
	v := &africastalking.CallTransferPayload{
		SessionID:    *body.SessionID,
		PhoneNumber:  *body.PhoneNumber,
		HoldMusicURL: body.HoldMusicURL,
	}
	if body.CallLeg != nil {
		v.CallLeg = *body.CallLeg
	}
	if body.CallLeg == nil {
		v.CallLeg = "callee"
	}

	return v
}

// NewSay1 builds a africastalking service Say endpoint payload.
func NewSay1(body *SayRequestBody) *africastalking.Say1 {
	v := &africastalking.Say1{}
	if body.Voice != nil {
		v.Voice = *body.Voice
	}
	if body.PlayBeep != nil {
		v.PlayBeep = *body.PlayBeep
	}
	if body.Voice == nil {
		v.Voice = "woman"
	}
	if body.PlayBeep == nil {
		v.PlayBeep = false
	}

	return v
}

// NewPlay1 builds a africastalking service Play endpoint payload.
func NewPlay1(body *PlayRequestBody) *africastalking.Play1 {
	v := &africastalking.Play1{
		URL: *body.URL,
	}

	return v
}

// NewGetDigits1 builds a africastalking service GetDigits endpoint payload.
func NewGetDigits1(body *GetDigitsRequestBody) *africastalking.GetDigits1 {
	v := &africastalking.GetDigits1{
		CallbackURL: body.CallbackURL,
		NumDigits:   body.NumDigits,
		Timeout:     body.Timeout,
		FinishOnKey: body.FinishOnKey,
	}

	return v
}

// NewDial1 builds a africastalking service Dial endpoint payload.
func NewDial1(body *DialRequestBody) *africastalking.Dial1 {
	v := &africastalking.Dial1{
		PhoneNumbers: *body.PhoneNumbers,
		Record:       body.Record,
		Sequential:   body.Sequential,
		CallerID:     body.CallerID,
		RingBackTone: body.RingBackTone,
		MaxDuration:  body.MaxDuration,
	}

	return v
}

// NewRecord1 builds a africastalking service Record endpoint payload.
func NewRecord1(body *RecordRequestBody) *africastalking.Record1 {
	v := &africastalking.Record1{
		FinishOnKey: body.FinishOnKey,
		MaxLength:   body.MaxLength,
		Timeout:     body.Timeout,
		TrimSilence: body.TrimSilence,
		PlayBeep:    body.PlayBeep,
		CallbackURL: body.CallbackURL,
	}

	return v
}

// NewEnqueue1 builds a africastalking service Enqueue endpoint payload.
func NewEnqueue1(body *EnqueueRequestBody) *africastalking.Enqueue1 {
	v := &africastalking.Enqueue1{
		HoldMusic: body.HoldMusic,
		Name:      body.Name,
	}

	return v
}

// NewDequeue1 builds a africastalking service Dequeue endpoint payload.
func NewDequeue1(body *DequeueRequestBody) *africastalking.Dequeue1 {
	v := &africastalking.Dequeue1{
		PhoneNumber: body.PhoneNumber,
		Name:        body.Name,
	}

	return v
}

// NewRedirect1 builds a africastalking service Redirect endpoint payload.
func NewRedirect1(body *RedirectRequestBody) *africastalking.Redirect1 {
	v := &africastalking.Redirect1{
		Reject: body.Reject,
	}

	return v
}

// NewReject1 builds a africastalking service Reject endpoint payload.
func NewReject1(body *RejectRequestBody) *africastalking.Reject1 {
	v := &africastalking.Reject1{
		Redirect: body.Redirect,
	}

	return v
}

// NewQueuedCallsPayload builds a africastalking service Queue endpoint payload.
func NewQueuedCallsPayload(body *QueueRequestBody) *africastalking.QueuedCallsPayload {
	v := &africastalking.QueuedCallsPayload{
		Username:     *body.Username,
		PhoneNumbers: *body.PhoneNumbers,
	}

	return v
}

// NewUploadMediaFile builds a africastalking service UploadMedia endpoint
// payload.
func NewUploadMediaFile(body *UploadMediaRequestBody) *africastalking.UploadMediaFile {
	v := &africastalking.UploadMediaFile{
		Username: body.Username,
		URL:      body.URL,
	}

	return v
}

// NewMobileCheckoutPayload builds a africastalking service MobileCheckout
// endpoint payload.
func NewMobileCheckoutPayload(body *MobileCheckoutRequestBody) *africastalking.MobileCheckoutPayload {
	v := &africastalking.MobileCheckoutPayload{
		Username:        *body.Username,
		ProductName:     *body.ProductName,
		ProviderChannel: body.ProviderChannel,
		PhoneNumber:     *body.PhoneNumber,
		CurrencyCode:    *body.CurrencyCode,
		Amount:          *body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewMobileB2CPayload builds a africastalking service MobileB2C endpoint
// payload.
func NewMobileB2CPayload(body *MobileB2CRequestBody) *africastalking.MobileB2CPayload {
	v := &africastalking.MobileB2CPayload{
		Username:    *body.Username,
		ProductName: *body.ProductName,
	}
	v.Recipients = make([]*africastalking.MobileRecipients, len(body.Recipients))
	for i, val := range body.Recipients {
		v.Recipients[i] = unmarshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients(val)
	}

	return v
}

// NewMobileB2BPayload builds a africastalking service MobileB2B endpoint
// payload.
func NewMobileB2BPayload(body *MobileB2BRequestBody) *africastalking.MobileB2BPayload {
	v := &africastalking.MobileB2BPayload{
		Username:           body.Username,
		ProductName:        body.ProductName,
		Provider:           body.Provider,
		TransferType:       body.TransferType,
		CurrencyCode:       body.CurrencyCode,
		Amount:             body.Amount,
		DestinationChannel: body.DestinationChannel,
		DestinationAccount: body.DestinationAccount,
		Metadata:           body.Metadata,
	}

	return v
}

// NewBankCheckoutPayload builds a africastalking service Bank Checkout
// endpoint payload.
func NewBankCheckoutPayload(body *BankCheckoutRequestBody) *africastalking.BankCheckoutPayload {
	v := &africastalking.BankCheckoutPayload{
		Username:     *body.Username,
		ProductName:  *body.ProductName,
		CurrencyCode: *body.CurrencyCode,
		Amount:       *body.Amount,
		Narration:    *body.Narration,
	}
	v.BankAccount = unmarshalBankAccountRequestBodyToAfricastalkingBankAccount(body.BankAccount)
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewBankCheckoutValidatePayload builds a africastalking service
// BankCheckoutValidate endpoint payload.
func NewBankCheckoutValidatePayload(body *BankCheckoutValidateRequestBody) *africastalking.BankCheckoutValidatePayload {
	v := &africastalking.BankCheckoutValidatePayload{
		Username:      *body.Username,
		TransactionID: *body.TransactionID,
		Otp:           *body.Otp,
	}

	return v
}

// NewBankTransferPayload builds a africastalking service BankTransfer endpoint
// payload.
func NewBankTransferPayload(body *BankTransferRequestBody) *africastalking.BankTransferPayload {
	v := &africastalking.BankTransferPayload{
		Username:    *body.Username,
		ProductName: *body.ProductName,
	}
	v.Recipients = make([]*africastalking.TransferRecipients, len(body.Recipients))
	for i, val := range body.Recipients {
		v.Recipients[i] = unmarshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients(val)
	}

	return v
}

// NewCardCheckoutPayload builds a africastalking service CardCheckout endpoint
// payload.
func NewCardCheckoutPayload(body *CardCheckoutRequestBody) *africastalking.CardCheckoutPayload {
	v := &africastalking.CardCheckoutPayload{
		Username:      *body.Username,
		ProductName:   *body.ProductName,
		CheckoutToken: body.CheckoutToken,
		CurrencyCode:  *body.CurrencyCode,
		Amount:        *body.Amount,
		Narration:     *body.Narration,
	}
	if body.PaymentCard != nil {
		v.PaymentCard = unmarshalPaymentCardRequestBodyToAfricastalkingPaymentCard(body.PaymentCard)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v
}

// NewCardCheckoutValidatePayload builds a africastalking service
// CardCheckoutValidate endpoint payload.
func NewCardCheckoutValidatePayload(body *CardCheckoutValidateRequestBody) *africastalking.CardCheckoutValidatePayload {
	v := &africastalking.CardCheckoutValidatePayload{
		Username:      *body.Username,
		TransactionID: *body.TransactionID,
		Otp:           *body.Otp,
	}

	return v
}

// NewWalletTransferPayload builds a africastalking service WalletTransfer
// endpoint payload.
func NewWalletTransferPayload(body *WalletTransferRequestBody) *africastalking.WalletTransferPayload {
	v := &africastalking.WalletTransferPayload{
		Username:          *body.Username,
		ProductName:       *body.ProductName,
		TargetProductCode: *body.TargetProductCode,
		CurrencyCode:      *body.CurrencyCode,
		Amount:            *body.Amount,
	}
	v.Metadata = make(map[string]string, len(body.Metadata))
	for key, val := range body.Metadata {
		tk := key
		tv := val
		v.Metadata[tk] = tv
	}

	return v
}

// NewTopupStashPayload builds a africastalking service TopupStash endpoint
// payload.
func NewTopupStashPayload(body *TopupStashRequestBody) *africastalking.TopupStashPayload {
	v := &africastalking.TopupStashPayload{
		Username:     *body.Username,
		ProductName:  *body.ProductName,
		CurrencyCode: *body.CurrencyCode,
		Amount:       *body.Amount,
	}
	v.Metadata = make(map[string]string, len(body.Metadata))
	for key, val := range body.Metadata {
		tk := key
		tv := val
		v.Metadata[tk] = tv
	}

	return v
}

// NewSendAirtimeAirtimePayload builds a africastalking service SendAirtime
// endpoint payload.
func NewSendAirtimeAirtimePayload(body *SendAirtimeRequestBody) *africastalking.AirtimePayload {
	v := &africastalking.AirtimePayload{
		Username: *body.Username,
	}
	v.Recipients = make([]*africastalking.AirtimeRecipients, len(body.Recipients))
	for i, val := range body.Recipients {
		v.Recipients[i] = unmarshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients(val)
	}

	return v
}

// NewPublishIoTIoTPayload builds a africastalking service PublishIoT endpoint
// payload.
func NewPublishIoTIoTPayload(body *PublishIoTRequestBody) *africastalking.IoTPayload {
	v := &africastalking.IoTPayload{
		Username:    *body.Username,
		DeviceGroup: *body.DeviceGroup,
		Topic:       *body.Topic,
		Payload:     *body.Payload,
	}

	return v
}

// NewGeneratePayload builds a africastalking service Generate endpoint payload.
func NewGeneratePayload(body *GenerateRequestBody) *africastalking.GeneratePayload {
	v := &africastalking.GeneratePayload{
		Username: *body.Username,
		APIKey:   *body.APIKey,
	}

	return v
}

// ValidateSendBulkSMSRequestBody runs the validations defined on
// SendBulkSMSRequestBody
func ValidateSendBulkSMSRequestBody(body *SendBulkSMSRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Enqueue != nil {
		if !(*body.Enqueue == 0 || *body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", *body.Enqueue, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateSendPremiumSMSRequestBody runs the validations defined on
// SendPremiumSMSRequestBody
func ValidateSendPremiumSMSRequestBody(body *SendPremiumSMSRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Enqueue != nil {
		if !(*body.Enqueue == 0 || *body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", *body.Enqueue, []interface{}{0, 1}))
		}
	}
	return
}

// ValidateNewCheckoutTokenRequestBody runs the validations defined on
// NewCheckoutTokenRequestBody
func ValidateNewCheckoutTokenRequestBody(body *NewCheckoutTokenRequestBody) (err error) {
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	return
}

// ValidateNewPremiumSubscriptionRequestBody runs the validations defined on
// NewPremiumSubscriptionRequestBody
func ValidateNewPremiumSubscriptionRequestBody(body *NewPremiumSubscriptionRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ShortCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("shortCode", "body"))
	}
	if body.Keyword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keyword", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.CheckoutToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("checkoutToken", "body"))
	}
	return
}

// ValidatePurgePremiumSubscriptionRequestBody runs the validations defined on
// PurgePremiumSubscriptionRequestBody
func ValidatePurgePremiumSubscriptionRequestBody(body *PurgePremiumSubscriptionRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ShortCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("shortCode", "body"))
	}
	if body.Keyword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keyword", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	return
}

// ValidateMakeCallRequestBody runs the validations defined on
// MakeCallRequestBody
func ValidateMakeCallRequestBody(body *MakeCallRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.From == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("from", "body"))
	}
	if body.To == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("to", "body"))
	}
	return
}

// ValidateTransferCallRequestBody runs the validations defined on
// TransferCallRequestBody
func ValidateTransferCallRequestBody(body *TransferCallRequestBody) (err error) {
	if body.SessionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sessionId", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.CallLeg != nil {
		if !(*body.CallLeg == "caller" || *body.CallLeg == "callee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callLeg", *body.CallLeg, []interface{}{"caller", "callee"}))
		}
	}
	return
}

// ValidateSayRequestBody runs the validations defined on SayRequestBody
func ValidateSayRequestBody(body *SayRequestBody) (err error) {
	if body.Voice != nil {
		if !(*body.Voice == "man" || *body.Voice == "woman") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.voice", *body.Voice, []interface{}{"man", "woman"}))
		}
	}
	return
}

// ValidatePlayRequestBody runs the validations defined on PlayRequestBody
func ValidatePlayRequestBody(body *PlayRequestBody) (err error) {
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	return
}

// ValidateDialRequestBody runs the validations defined on DialRequestBody
func ValidateDialRequestBody(body *DialRequestBody) (err error) {
	if body.PhoneNumbers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumbers", "body"))
	}
	return
}

// ValidateQueueRequestBody runs the validations defined on QueueRequestBody
func ValidateQueueRequestBody(body *QueueRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.PhoneNumbers == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumbers", "body"))
	}
	return
}

// ValidateMobileCheckoutRequestBody runs the validations defined on
// MobileCheckoutRequestBody
func ValidateMobileCheckoutRequestBody(body *MobileCheckoutRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	return
}

// ValidateMobileB2CRequestBody runs the validations defined on
// MobileB2CRequestBody
func ValidateMobileB2CRequestBody(body *MobileB2CRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.Recipients == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
	}
	for _, e := range body.Recipients {
		if e != nil {
			if err2 := ValidateMobileRecipientsRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateMobileB2BRequestBody runs the validations defined on
// MobileB2BRequestBody
func ValidateMobileB2BRequestBody(body *MobileB2BRequestBody) (err error) {
	if body.Provider != nil {
		if !(*body.Provider == "Mpesa" || *body.Provider == "TigoTanzania" || *body.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "TigoTanzania", "Athena"}))
		}
	}
	if body.TransferType != nil {
		if !(*body.TransferType == "BusinessBuyGoods" || *body.TransferType == "BusinessPayBill" || *body.TransferType == "DisburseFundsToBusiness" || *body.TransferType == "BusinessToBusinessTransfer") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.transferType", *body.TransferType, []interface{}{"BusinessBuyGoods", "BusinessPayBill", "DisburseFundsToBusiness", "BusinessToBusinessTransfer"}))
		}
	}
	return
}

// ValidateBankCheckoutRequestBody runs the validations defined on Bank
// CheckoutRequestBody
func ValidateBankCheckoutRequestBody(body *BankCheckoutRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.BankAccount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bankAccount", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("narration", "body"))
	}
	if body.BankAccount != nil {
		if err2 := ValidateBankAccountRequestBody(body.BankAccount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBankCheckoutValidateRequestBody runs the validations defined on
// BankCheckoutValidateRequestBody
func ValidateBankCheckoutValidateRequestBody(body *BankCheckoutValidateRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transactionId", "body"))
	}
	if body.Otp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("otp", "body"))
	}
	return
}

// ValidateBankTransferRequestBody runs the validations defined on
// BankTransferRequestBody
func ValidateBankTransferRequestBody(body *BankTransferRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.Recipients == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
	}
	if len(body.Recipients) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 1, true))
	}
	for _, e := range body.Recipients {
		if e != nil {
			if err2 := ValidateTransferRecipientsRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCardCheckoutRequestBody runs the validations defined on
// CardCheckoutRequestBody
func ValidateCardCheckoutRequestBody(body *CardCheckoutRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Narration == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("narration", "body"))
	}
	if body.PaymentCard != nil {
		if err2 := ValidatePaymentCardRequestBody(body.PaymentCard); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCardCheckoutValidateRequestBody runs the validations defined on
// CardCheckoutValidateRequestBody
func ValidateCardCheckoutValidateRequestBody(body *CardCheckoutValidateRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.TransactionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("transactionId", "body"))
	}
	if body.Otp == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("otp", "body"))
	}
	return
}

// ValidateWalletTransferRequestBody runs the validations defined on
// WalletTransferRequestBody
func ValidateWalletTransferRequestBody(body *WalletTransferRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.TargetProductCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("targetProductCode", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Metadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
	}
	return
}

// ValidateTopupStashRequestBody runs the validations defined on
// TopupStashRequestBody
func ValidateTopupStashRequestBody(body *TopupStashRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("productName", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Metadata == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
	}
	return
}

// ValidateSendAirtimeRequestBody runs the validations defined on
// SendAirtimeRequestBody
func ValidateSendAirtimeRequestBody(body *SendAirtimeRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Recipients == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
	}
	return
}

// ValidatePublishIoTRequestBody runs the validations defined on
// PublishIoTRequestBody
func ValidatePublishIoTRequestBody(body *PublishIoTRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.DeviceGroup == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deviceGroup", "body"))
	}
	if body.Topic == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("topic", "body"))
	}
	if body.Payload == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("payload", "body"))
	}
	return
}

// ValidateGenerateRequestBody runs the validations defined on
// GenerateRequestBody
func ValidateGenerateRequestBody(body *GenerateRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.APIKey == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("apiKey", "body"))
	}
	return
}

// ValidateMobileRecipientsRequestBody runs the validations defined on
// MobileRecipientsRequestBody
func ValidateMobileRecipientsRequestBody(body *MobileRecipientsRequestBody) (err error) {
	if body.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	if body.Reason != nil {
		if !(*body.Reason == "SalaryPayment" || *body.Reason == "SalaryPaymentWithWithdrawalChargePaid" || *body.Reason == "BusinessPayment" || *body.Reason == "BusinessPaymentWithWithdrawalChargePaid" || *body.Reason == "PromotionPayment") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.reason", *body.Reason, []interface{}{"SalaryPayment", "SalaryPaymentWithWithdrawalChargePaid", "BusinessPayment", "BusinessPaymentWithWithdrawalChargePaid", "PromotionPayment"}))
		}
	}
	return
}

// ValidateBankAccountRequestBody runs the validations defined on
// BankAccountRequestBody
func ValidateBankAccountRequestBody(body *BankAccountRequestBody) (err error) {
	if body.AccountName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accountName", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accountNumber", "body"))
	}
	if body.BankCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bankCode", "body"))
	}
	if body.DateOfBirth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("dateOfBirth", "body"))
	}
	if body.DateOfBirth != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.dateOfBirth", *body.DateOfBirth, goa.FormatDate))
	}
	return
}

// ValidateTransferRecipientsRequestBody runs the validations defined on
// TransferRecipientsRequestBody
func ValidateTransferRecipientsRequestBody(body *TransferRecipientsRequestBody) (err error) {
	if body.BankAccount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bankAccount", "body"))
	}
	if body.AccountNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("accountNumber", "body"))
	}
	if body.BankCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("bankCode", "body"))
	}
	if body.CurrencyCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("currencyCode", "body"))
	}
	if body.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "body"))
	}
	return
}

// ValidatePaymentCardRequestBody runs the validations defined on
// PaymentCardRequestBody
func ValidatePaymentCardRequestBody(body *PaymentCardRequestBody) (err error) {
	if body.Number == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("number", "body"))
	}
	if body.CvvNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cvvNumber", "body"))
	}
	if body.ExpiryMonth == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expiryMonth", "body"))
	}
	if body.ExpiryYear == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expiryYear", "body"))
	}
	if body.CountryCode == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("countryCode", "body"))
	}
	if body.AuthToken == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("authToken", "body"))
	}
	if body.CountryCode != nil {
		if !(*body.CountryCode == "NG") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.countryCode", *body.CountryCode, []interface{}{"NG"}))
		}
	}
	return
}
