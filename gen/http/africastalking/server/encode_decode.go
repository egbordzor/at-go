// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-go/design

package server

import (
	"context"
	"io"
	"net/http"

	africastalking "github.com/wondenge/at-go/gen/africastalking"
	africastalkingviews "github.com/wondenge/at-go/gen/africastalking/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSendBulkSMSResponse returns an encoder for responses returned by the
// africastalking SendBulkSMS endpoint.
func EncodeSendBulkSMSResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.BulkResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewSendBulkSMSResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeSendBulkSMSRequest returns a decoder for requests sent to the
// africastalking SendBulkSMS endpoint.
func DecodeSendBulkSMSRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SendBulkSMSRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendBulkSMSRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendBulkSMSBulkPayload(&body)

		return payload, nil
	}
}

// EncodeSendPremiumSMSResponse returns an encoder for responses returned by
// the africastalking SendPremiumSMS endpoint.
func EncodeSendPremiumSMSResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.PremiumSMSResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewSendPremiumSMSResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeSendPremiumSMSRequest returns a decoder for requests sent to the
// africastalking SendPremiumSMS endpoint.
func DecodeSendPremiumSMSRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SendPremiumSMSRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendPremiumSMSRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendPremiumSMSPremiumPayload(&body)

		return payload, nil
	}
}

// EncodeFetchSMSResponse returns an encoder for responses returned by the
// africastalking FetchSMS endpoint.
func EncodeFetchSMSResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.FetchMsgResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewFetchSMSResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFetchSMSRequest returns a decoder for requests sent to the
// africastalking FetchSMS endpoint.
func DecodeFetchSMSRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			username       string
			lastReceivedID string
			err            error
		)
		username = r.URL.Query().Get("username")
		if username == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("username", "query string"))
		}
		lastReceivedIDRaw := r.URL.Query().Get("lastReceivedId")
		if lastReceivedIDRaw != "" {
			lastReceivedID = lastReceivedIDRaw
		} else {
			lastReceivedID = "0"
		}
		if err != nil {
			return nil, err
		}
		payload := NewFetchSMSFetchMsgPayload(username, lastReceivedID)

		return payload, nil
	}
}

// EncodeNewCheckoutTokenResponse returns an encoder for responses returned by
// the africastalking NewCheckoutToken endpoint.
func EncodeNewCheckoutTokenResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.CheckoutTokenResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewNewCheckoutTokenResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeNewCheckoutTokenRequest returns a decoder for requests sent to the
// africastalking NewCheckoutToken endpoint.
func DecodeNewCheckoutTokenRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body NewCheckoutTokenRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateNewCheckoutTokenRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewNewCheckoutTokenCheckoutTokenPayload(&body)

		return payload, nil
	}
}

// EncodeNewPremiumSubscriptionResponse returns an encoder for responses
// returned by the africastalking NewPremiumSubscription endpoint.
func EncodeNewPremiumSubscriptionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.NewSubResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewNewPremiumSubscriptionResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeNewPremiumSubscriptionRequest returns a decoder for requests sent to
// the africastalking NewPremiumSubscription endpoint.
func DecodeNewPremiumSubscriptionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body NewPremiumSubscriptionRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateNewPremiumSubscriptionRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewNewPremiumSubscriptionNewSubPayload(&body)

		return payload, nil
	}
}

// EncodeFetchPremiumSubscriptionResponse returns an encoder for responses
// returned by the africastalking FetchPremiumSubscription endpoint.
func EncodeFetchPremiumSubscriptionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.FetchSubResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewFetchPremiumSubscriptionResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFetchPremiumSubscriptionRequest returns a decoder for requests sent to
// the africastalking FetchPremiumSubscription endpoint.
func DecodeFetchPremiumSubscriptionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			username       string
			shortCode      string
			keyword        string
			lastReceivedID string
			err            error
		)
		username = r.URL.Query().Get("username")
		if username == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("username", "query string"))
		}
		shortCode = r.URL.Query().Get("shortCode")
		if shortCode == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("shortCode", "query string"))
		}
		keyword = r.URL.Query().Get("keyword")
		if keyword == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("keyword", "query string"))
		}
		lastReceivedIDRaw := r.URL.Query().Get("lastReceivedId")
		if lastReceivedIDRaw != "" {
			lastReceivedID = lastReceivedIDRaw
		} else {
			lastReceivedID = "0"
		}
		if err != nil {
			return nil, err
		}
		payload := NewFetchPremiumSubscriptionFetchSubPayload(username, shortCode, keyword, lastReceivedID)

		return payload, nil
	}
}

// EncodePurgePremiumSubscriptionResponse returns an encoder for responses
// returned by the africastalking PurgePremiumSubscription endpoint.
func EncodePurgePremiumSubscriptionResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.PurgeSubResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewPurgePremiumSubscriptionResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodePurgePremiumSubscriptionRequest returns a decoder for requests sent to
// the africastalking PurgePremiumSubscription endpoint.
func DecodePurgePremiumSubscriptionRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PurgePremiumSubscriptionRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePurgePremiumSubscriptionRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPurgePremiumSubscriptionPurgeSubPayload(&body)

		return payload, nil
	}
}

// EncodeMakeCallResponse returns an encoder for responses returned by the
// africastalking MakeCall endpoint.
func EncodeMakeCallResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.MakeCallResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/xml")
		enc := encoder(ctx, w)
		body := NewMakeCallResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeMakeCallRequest returns a decoder for requests sent to the
// africastalking MakeCall endpoint.
func DecodeMakeCallRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body MakeCallRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateMakeCallRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewMakeCallPayload(&body)

		return payload, nil
	}
}

// EncodeTransferCallResponse returns an encoder for responses returned by the
// africastalking TransferCall endpoint.
func EncodeTransferCallResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.Calltransferresponse)
		enc := encoder(ctx, w)
		body := NewTransferCallResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTransferCallRequest returns a decoder for requests sent to the
// africastalking TransferCall endpoint.
func DecodeTransferCallRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TransferCallRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTransferCallRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTransferCallCallTransferPayload(&body)

		return payload, nil
	}
}

// EncodeSayResponse returns an encoder for responses returned by the
// africastalking Say endpoint.
func EncodeSayResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSayRequest returns a decoder for requests sent to the africastalking
// Say endpoint.
func DecodeSayRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SayRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSayRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSay1(&body)

		return payload, nil
	}
}

// EncodePlayResponse returns an encoder for responses returned by the
// africastalking Play endpoint.
func EncodePlayResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePlayRequest returns a decoder for requests sent to the africastalking
// Play endpoint.
func DecodePlayRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PlayRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePlayRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPlay1(&body)

		return payload, nil
	}
}

// EncodeGetDigitsResponse returns an encoder for responses returned by the
// africastalking GetDigits endpoint.
func EncodeGetDigitsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetDigitsRequest returns a decoder for requests sent to the
// africastalking GetDigits endpoint.
func DecodeGetDigitsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GetDigitsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewGetDigits1(&body)

		return payload, nil
	}
}

// EncodeDialResponse returns an encoder for responses returned by the
// africastalking Dial endpoint.
func EncodeDialResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDialRequest returns a decoder for requests sent to the africastalking
// Dial endpoint.
func DecodeDialRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DialRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDialRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDial1(&body)

		return payload, nil
	}
}

// EncodeRecordResponse returns an encoder for responses returned by the
// africastalking Record endpoint.
func EncodeRecordResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRecordRequest returns a decoder for requests sent to the
// africastalking Record endpoint.
func DecodeRecordRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RecordRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewRecord1(&body)

		return payload, nil
	}
}

// EncodeEnqueueResponse returns an encoder for responses returned by the
// africastalking Enqueue endpoint.
func EncodeEnqueueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEnqueueRequest returns a decoder for requests sent to the
// africastalking Enqueue endpoint.
func DecodeEnqueueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body EnqueueRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewEnqueue1(&body)

		return payload, nil
	}
}

// EncodeDequeueResponse returns an encoder for responses returned by the
// africastalking Dequeue endpoint.
func EncodeDequeueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDequeueRequest returns a decoder for requests sent to the
// africastalking Dequeue endpoint.
func DecodeDequeueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DequeueRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewDequeue1(&body)

		return payload, nil
	}
}

// EncodeRedirectResponse returns an encoder for responses returned by the
// africastalking Redirect endpoint.
func EncodeRedirectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRedirectRequest returns a decoder for requests sent to the
// africastalking Redirect endpoint.
func DecodeRedirectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RedirectRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewRedirect1(&body)

		return payload, nil
	}
}

// EncodeRejectResponse returns an encoder for responses returned by the
// africastalking Reject endpoint.
func EncodeRejectResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRejectRequest returns a decoder for requests sent to the
// africastalking Reject endpoint.
func DecodeRejectRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RejectRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewReject1(&body)

		return payload, nil
	}
}

// EncodeQueueResponse returns an encoder for responses returned by the
// africastalking Queue endpoint.
func EncodeQueueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.Queuedstatusresult)
		enc := encoder(ctx, w)
		body := NewQueueResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeQueueRequest returns a decoder for requests sent to the africastalking
// Queue endpoint.
func DecodeQueueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body QueueRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateQueueRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewQueuedCallsPayload(&body)

		return payload, nil
	}
}

// EncodeUploadMediaResponse returns an encoder for responses returned by the
// africastalking UploadMedia endpoint.
func EncodeUploadMediaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeUploadMediaRequest returns a decoder for requests sent to the
// africastalking UploadMedia endpoint.
func DecodeUploadMediaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UploadMediaRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewUploadMediaFile(&body)

		return payload, nil
	}
}

// EncodeMobileCheckoutResponse returns an encoder for responses returned by
// the africastalking MobileCheckout endpoint.
func EncodeMobileCheckoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.MobileCheckoutResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewMobileCheckoutResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeMobileCheckoutRequest returns a decoder for requests sent to the
// africastalking MobileCheckout endpoint.
func DecodeMobileCheckoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body MobileCheckoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateMobileCheckoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewMobileCheckoutPayload(&body)

		return payload, nil
	}
}

// EncodeMobileB2CResponse returns an encoder for responses returned by the
// africastalking MobileB2C endpoint.
func EncodeMobileB2CResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.MobileB2CResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewMobileB2CResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeMobileB2CRequest returns a decoder for requests sent to the
// africastalking MobileB2C endpoint.
func DecodeMobileB2CRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body MobileB2CRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateMobileB2CRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewMobileB2CPayload(&body)

		return payload, nil
	}
}

// EncodeMobileB2BResponse returns an encoder for responses returned by the
// africastalking MobileB2B endpoint.
func EncodeMobileB2BResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.MobileB2BResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewMobileB2BResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeMobileB2BRequest returns a decoder for requests sent to the
// africastalking MobileB2B endpoint.
func DecodeMobileB2BRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body MobileB2BRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateMobileB2BRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewMobileB2BPayload(&body)

		return payload, nil
	}
}

// EncodeBankCheckoutResponse returns an encoder for responses returned by the
// africastalking Bank Checkout endpoint.
func EncodeBankCheckoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.BankCheckoutResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewBankCheckoutResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeBankCheckoutRequest returns a decoder for requests sent to the
// africastalking Bank Checkout endpoint.
func DecodeBankCheckoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body BankCheckoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateBankCheckoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewBankCheckoutPayload(&body)

		return payload, nil
	}
}

// EncodeBankCheckoutValidateResponse returns an encoder for responses returned
// by the africastalking BankCheckoutValidate endpoint.
func EncodeBankCheckoutValidateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.BankCheckoutValidateResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewBankCheckoutValidateResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeBankCheckoutValidateRequest returns a decoder for requests sent to the
// africastalking BankCheckoutValidate endpoint.
func DecodeBankCheckoutValidateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body BankCheckoutValidateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateBankCheckoutValidateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewBankCheckoutValidatePayload(&body)

		return payload, nil
	}
}

// EncodeBankTransferResponse returns an encoder for responses returned by the
// africastalking BankTransfer endpoint.
func EncodeBankTransferResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.BankTransferResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewBankTransferResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeBankTransferRequest returns a decoder for requests sent to the
// africastalking BankTransfer endpoint.
func DecodeBankTransferRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body BankTransferRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateBankTransferRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewBankTransferPayload(&body)

		return payload, nil
	}
}

// EncodeCardCheckoutResponse returns an encoder for responses returned by the
// africastalking CardCheckout endpoint.
func EncodeCardCheckoutResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.CardCheckoutResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewCardCheckoutResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCardCheckoutRequest returns a decoder for requests sent to the
// africastalking CardCheckout endpoint.
func DecodeCardCheckoutRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CardCheckoutRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCardCheckoutRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCardCheckoutPayload(&body)

		return payload, nil
	}
}

// EncodeCardCheckoutValidateResponse returns an encoder for responses returned
// by the africastalking CardCheckoutValidate endpoint.
func EncodeCardCheckoutValidateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.CardCheckoutValidateResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewCardCheckoutValidateResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCardCheckoutValidateRequest returns a decoder for requests sent to the
// africastalking CardCheckoutValidate endpoint.
func DecodeCardCheckoutValidateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CardCheckoutValidateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCardCheckoutValidateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCardCheckoutValidatePayload(&body)

		return payload, nil
	}
}

// EncodeWalletTransferResponse returns an encoder for responses returned by
// the africastalking WalletTransfer endpoint.
func EncodeWalletTransferResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.WalletTransferResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewWalletTransferResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeWalletTransferRequest returns a decoder for requests sent to the
// africastalking WalletTransfer endpoint.
func DecodeWalletTransferRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body WalletTransferRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateWalletTransferRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewWalletTransferPayload(&body)

		return payload, nil
	}
}

// EncodeTopupStashResponse returns an encoder for responses returned by the
// africastalking TopupStash endpoint.
func EncodeTopupStashResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.TopupStashResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewTopupStashResponseBody(res.Projected)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeTopupStashRequest returns a decoder for requests sent to the
// africastalking TopupStash endpoint.
func DecodeTopupStashRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TopupStashRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTopupStashRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTopupStashPayload(&body)

		return payload, nil
	}
}

// EncodeSendAirtimeResponse returns an encoder for responses returned by the
// africastalking SendAirtime endpoint.
func EncodeSendAirtimeResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.AirtimeResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewSendAirtimeResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSendAirtimeRequest returns a decoder for requests sent to the
// africastalking SendAirtime endpoint.
func DecodeSendAirtimeRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SendAirtimeRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSendAirtimeRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSendAirtimeAirtimePayload(&body)

		return payload, nil
	}
}

// EncodePublishIoTResponse returns an encoder for responses returned by the
// africastalking PublishIoT endpoint.
func EncodePublishIoTResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.IoTResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewPublishIoTResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePublishIoTRequest returns a decoder for requests sent to the
// africastalking PublishIoT endpoint.
func DecodePublishIoTRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body PublishIoTRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePublishIoTRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPublishIoTIoTPayload(&body)

		return payload, nil
	}
}

// EncodeInitiateAppDataResponse returns an encoder for responses returned by
// the africastalking InitiateAppData endpoint.
func EncodeInitiateAppDataResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.UserResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewInitiateAppDataResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeInitiateAppDataRequest returns a decoder for requests sent to the
// africastalking InitiateAppData endpoint.
func DecodeInitiateAppDataRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body string
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := body

		return payload, nil
	}
}

// EncodeGenerateResponse returns an encoder for responses returned by the
// africastalking Generate endpoint.
func EncodeGenerateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*africastalkingviews.AccessTokenResponse)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewGenerateResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGenerateRequest returns a decoder for requests sent to the
// africastalking Generate endpoint.
func DecodeGenerateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GenerateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGenerateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewGeneratePayload(&body)

		return payload, nil
	}
}

// marshalAfricastalkingviewsBulkSMSMessageDataViewToBulkSMSMessageDataResponseBody
// builds a value of type *BulkSMSMessageDataResponseBody from a value of type
// *africastalkingviews.BulkSMSMessageDataView.
func marshalAfricastalkingviewsBulkSMSMessageDataViewToBulkSMSMessageDataResponseBody(v *africastalkingviews.BulkSMSMessageDataView) *BulkSMSMessageDataResponseBody {
	if v == nil {
		return nil
	}
	res := &BulkSMSMessageDataResponseBody{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*RecipientsResponseBody, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = marshalAfricastalkingviewsRecipientsViewToRecipientsResponseBody(val)
		}
	}

	return res
}

// marshalAfricastalkingviewsRecipientsViewToRecipientsResponseBody builds a
// value of type *RecipientsResponseBody from a value of type
// *africastalkingviews.RecipientsView.
func marshalAfricastalkingviewsRecipientsViewToRecipientsResponseBody(v *africastalkingviews.RecipientsView) *RecipientsResponseBody {
	if v == nil {
		return nil
	}
	res := &RecipientsResponseBody{
		StatusCode: v.StatusCode,
		Number:     v.Number,
		Status:     v.Status,
		Cost:       v.Cost,
		MessageID:  v.MessageID,
	}

	return res
}

// marshalAfricastalkingviewsPremiumSMSMessageDataViewToPremiumSMSMessageDataResponseBody
// builds a value of type *PremiumSMSMessageDataResponseBody from a value of
// type *africastalkingviews.PremiumSMSMessageDataView.
func marshalAfricastalkingviewsPremiumSMSMessageDataViewToPremiumSMSMessageDataResponseBody(v *africastalkingviews.PremiumSMSMessageDataView) *PremiumSMSMessageDataResponseBody {
	if v == nil {
		return nil
	}
	res := &PremiumSMSMessageDataResponseBody{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*RecipientsResponseBody, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = marshalAfricastalkingviewsRecipientsViewToRecipientsResponseBody(val)
		}
	}

	return res
}

// marshalAfricastalkingviewsFetchSMSMessageDataViewToFetchSMSMessageDataResponseBody
// builds a value of type *FetchSMSMessageDataResponseBody from a value of type
// *africastalkingviews.FetchSMSMessageDataView.
func marshalAfricastalkingviewsFetchSMSMessageDataViewToFetchSMSMessageDataResponseBody(v *africastalkingviews.FetchSMSMessageDataView) *FetchSMSMessageDataResponseBody {
	if v == nil {
		return nil
	}
	res := &FetchSMSMessageDataResponseBody{}
	if v.Messages != nil {
		res.Messages = make([]*MessagesResponseBody, len(v.Messages))
		for i, val := range v.Messages {
			res.Messages[i] = marshalAfricastalkingviewsMessagesViewToMessagesResponseBody(val)
		}
	}

	return res
}

// marshalAfricastalkingviewsMessagesViewToMessagesResponseBody builds a value
// of type *MessagesResponseBody from a value of type
// *africastalkingviews.MessagesView.
func marshalAfricastalkingviewsMessagesViewToMessagesResponseBody(v *africastalkingviews.MessagesView) *MessagesResponseBody {
	if v == nil {
		return nil
	}
	res := &MessagesResponseBody{
		LinkID: v.LinkID,
		Text:   v.Text,
		To:     v.To,
		ID:     v.ID,
		Date:   v.Date,
		From:   v.From,
	}

	return res
}

// marshalAfricastalkingviewsSubscriptionsViewToSubscriptionsResponseBody
// builds a value of type *SubscriptionsResponseBody from a value of type
// *africastalkingviews.SubscriptionsView.
func marshalAfricastalkingviewsSubscriptionsViewToSubscriptionsResponseBody(v *africastalkingviews.SubscriptionsView) *SubscriptionsResponseBody {
	if v == nil {
		return nil
	}
	res := &SubscriptionsResponseBody{
		ID:     v.ID,
		Number: v.Number,
		Date:   v.Date,
	}

	return res
}

// marshalAfricastalkingviewsVoiceEntryViewToVoiceEntryResponseBody builds a
// value of type *VoiceEntryResponseBody from a value of type
// *africastalkingviews.VoiceEntryView.
func marshalAfricastalkingviewsVoiceEntryViewToVoiceEntryResponseBody(v *africastalkingviews.VoiceEntryView) *VoiceEntryResponseBody {
	if v == nil {
		return nil
	}
	res := &VoiceEntryResponseBody{
		PhoneNumber: v.PhoneNumber,
		Status:      v.Status,
	}
	if v.SessionID != nil {
		res.SessionID = *v.SessionID
	}
	if v.SessionID == nil {
		res.SessionID = "None"
	}

	return res
}

// marshalAfricastalkingviewsQueuedStatusEntryViewToQueuedStatusEntryResponseBody
// builds a value of type *QueuedStatusEntryResponseBody from a value of type
// *africastalkingviews.QueuedStatusEntryView.
func marshalAfricastalkingviewsQueuedStatusEntryViewToQueuedStatusEntryResponseBody(v *africastalkingviews.QueuedStatusEntryView) *QueuedStatusEntryResponseBody {
	if v == nil {
		return nil
	}
	res := &QueuedStatusEntryResponseBody{
		PhoneNumber: v.PhoneNumber,
		QueueName:   v.QueueName,
		NumCalls:    v.NumCalls,
	}

	return res
}

// unmarshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients builds
// a value of type *africastalking.MobileRecipients from a value of type
// *MobileRecipientsRequestBody.
func unmarshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients(v *MobileRecipientsRequestBody) *africastalking.MobileRecipients {
	res := &africastalking.MobileRecipients{
		Name:            v.Name,
		PhoneNumber:     *v.PhoneNumber,
		CurrencyCode:    *v.CurrencyCode,
		Amount:          *v.Amount,
		ProviderChannel: v.ProviderChannel,
		Reason:          v.Reason,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalAfricastalkingviewsB2CEntryViewToB2CEntryResponseBody builds a value
// of type *B2CEntryResponseBody from a value of type
// *africastalkingviews.B2CEntryView.
func marshalAfricastalkingviewsB2CEntryViewToB2CEntryResponseBody(v *africastalkingviews.B2CEntryView) *B2CEntryResponseBody {
	if v == nil {
		return nil
	}
	res := &B2CEntryResponseBody{
		PhoneNumber:     *v.PhoneNumber,
		Status:          *v.Status,
		TransactionID:   v.TransactionID,
		Provider:        v.Provider,
		ProviderChannel: v.ProviderChannel,
		Value:           v.Value,
		TransactionFee:  v.TransactionFee,
		ErrorMessage:    v.ErrorMessage,
	}

	return res
}

// unmarshalBankAccountRequestBodyToAfricastalkingBankAccount builds a value of
// type *africastalking.BankAccount from a value of type
// *BankAccountRequestBody.
func unmarshalBankAccountRequestBodyToAfricastalkingBankAccount(v *BankAccountRequestBody) *africastalking.BankAccount {
	res := &africastalking.BankAccount{
		AccountName:   *v.AccountName,
		AccountNumber: *v.AccountNumber,
		BankCode:      *v.BankCode,
		DateOfBirth:   *v.DateOfBirth,
	}

	return res
}

// unmarshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients
// builds a value of type *africastalking.TransferRecipients from a value of
// type *TransferRecipientsRequestBody.
func unmarshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients(v *TransferRecipientsRequestBody) *africastalking.TransferRecipients {
	res := &africastalking.TransferRecipients{
		BankAccount:   *v.BankAccount,
		AccountName:   v.AccountName,
		AccountNumber: *v.AccountNumber,
		BankCode:      *v.BankCode,
		DateOfBirth:   v.DateOfBirth,
		CurrencyCode:  *v.CurrencyCode,
		Amount:        *v.Amount,
		Narration:     v.Narration,
	}
	if v.Metadata != nil {
		res.Metadata = make(map[string]string, len(v.Metadata))
		for key, val := range v.Metadata {
			tk := key
			tv := val
			res.Metadata[tk] = tv
		}
	}

	return res
}

// marshalAfricastalkingviewsTransferEntriesViewToTransferEntriesResponseBody
// builds a value of type *TransferEntriesResponseBody from a value of type
// *africastalkingviews.TransferEntriesView.
func marshalAfricastalkingviewsTransferEntriesViewToTransferEntriesResponseBody(v *africastalkingviews.TransferEntriesView) *TransferEntriesResponseBody {
	if v == nil {
		return nil
	}
	res := &TransferEntriesResponseBody{
		AccountNumber:  v.AccountNumber,
		Status:         v.Status,
		TransactionID:  v.TransactionID,
		TransactionFee: v.TransactionFee,
		ErrorMessage:   v.ErrorMessage,
	}

	return res
}

// unmarshalPaymentCardRequestBodyToAfricastalkingPaymentCard builds a value of
// type *africastalking.PaymentCard from a value of type
// *PaymentCardRequestBody.
func unmarshalPaymentCardRequestBodyToAfricastalkingPaymentCard(v *PaymentCardRequestBody) *africastalking.PaymentCard {
	if v == nil {
		return nil
	}
	res := &africastalking.PaymentCard{
		Number:      *v.Number,
		CvvNumber:   *v.CvvNumber,
		ExpiryMonth: *v.ExpiryMonth,
		ExpiryYear:  *v.ExpiryYear,
		CountryCode: *v.CountryCode,
		AuthToken:   *v.AuthToken,
	}

	return res
}

// unmarshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients
// builds a value of type *africastalking.AirtimeRecipients from a value of
// type *AirtimeRecipientsRequestBody.
func unmarshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients(v *AirtimeRecipientsRequestBody) *africastalking.AirtimeRecipients {
	res := &africastalking.AirtimeRecipients{
		PhoneNumber: v.PhoneNumber,
		Amount:      v.Amount,
	}

	return res
}

// marshalAfricastalkingviewsAirtimeEntryViewToAirtimeEntryResponseBody builds
// a value of type *AirtimeEntryResponseBody from a value of type
// *africastalkingviews.AirtimeEntryView.
func marshalAfricastalkingviewsAirtimeEntryViewToAirtimeEntryResponseBody(v *africastalkingviews.AirtimeEntryView) *AirtimeEntryResponseBody {
	if v == nil {
		return nil
	}
	res := &AirtimeEntryResponseBody{
		PhoneNumber:  v.PhoneNumber,
		Amount:       v.Amount,
		Discount:     v.Discount,
		Status:       v.Status,
		RequestID:    v.RequestID,
		ErrorMessage: v.ErrorMessage,
	}

	return res
}

// marshalAfricastalkingviewsUserDataViewToUserDataResponseBody builds a value
// of type *UserDataResponseBody from a value of type
// *africastalkingviews.UserDataView.
func marshalAfricastalkingviewsUserDataViewToUserDataResponseBody(v *africastalkingviews.UserDataView) *UserDataResponseBody {
	if v == nil {
		return nil
	}
	res := &UserDataResponseBody{
		Balance: v.Balance,
	}

	return res
}
