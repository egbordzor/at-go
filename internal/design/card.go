package design

import (
	. "goa.design/goa/v3/dsl"
	_ "goa.design/plugins/v3/docs"      // Generates documentation
	_ "goa.design/plugins/v3/goakit"    // Enables goakit
	_ "goa.design/plugins/v3/zaplogger" // Enables ZapLogger Plugin
)

var CardCheckoutPayload = Type("CardCheckoutPayload", func() {
	Description("Card Checkout HTTP request.")

	Attribute("username", String, func() {
		Description("Africa’s Talking application username.")
		Example("MyAppUserName")
	})
	Attribute("productName", String, func() {
		Description("Africa’s Talking Payment Product initiating transaction.")
		Example("myProductName")
	})
	Attribute("paymentCard", PaymentCard)
	Attribute("checkoutToken", String, func() {

		// As result of charging a users payment card in a previous transaction.
		// Please note: When using a checkoutToken, the paymentCard data should NOT be populated.
		Description("Token generated by AfricasTalking")
		Example("1234")
	})
	Attribute("currencyCode", String, func() {
		Description("3-digit ISO format currency code.")
		Example("NGN")
	})
	Attribute("amount", Float64, func() {
		Description("Amount client is expected to confirm.")
		Example(10000.50)
	})
	Attribute("narration", String, func() {
		Description("Short description of the transaction.")
		Example("Monthly service charge for My Online Store")
	})
	Attribute("metadata", MapOf(String, String), func() {
		Description("Metadata associated with the request.")
		Key(func() {
			Pattern("[a-zA-Z]+") // Validates values of the map
			Example("Foo")
		})
		Elem(func() {
			Pattern("[a-zA-Z]+") // Validates values of the map
			Example("Bar")
		})
	})

	Required(
		"username",
		"productName",
		"currencyCode",
		"amount",
		"narration",
	)
})

var CardCheckoutResponse = ResultType("CardCheckoutResponse", func() {
	Description("Card Checkout HTTP response.")
	TypeName("CardCheckoutResponse")
	ContentType("application/json")

	Attributes(func() {
		Attribute("status", String, func() {
			Description("The status of the request.")
			Enum(
				// The request has been accepted.
				// Your application should provide
				// the user a way to enter the OTP
				// sent to them by the payment card
				// provider and finally send that
				// to us using a card checkout
				// validate request.
				"PendingConfirmation",

				// This means that the transaction
				// has been completed and there is
				// no further validation required.
				// This can only happen in the case
				// where you initiate a charge with
				// a checkoutToken
				"Success",

				// The request could not be accepted
				// as one of the fields was invalid.
				// The description field will contain
				// more information.
				"InvalidRequest",

				// Checkout to the provided payment
				// card is not supported.
				"NotSupported",

				// The request failed for some other
				// reason.
				// The description filed will contain
				// more information.
				"Failed",
			)
			Example("PendingValidation")
		})
		Attribute("description", String, func() {
			Description("A detailed description of the request status.")
			Example("Waiting for user input")
		})
		Attribute("transactionId", String, func() {
			Description("Unique ID generated for successful requests.")
			Example("ATPid_SampleTxnId123")
		})
		Required("status", "description")
	})

	View("default", func() {
		Attribute("status")
		Attribute("description")
		Attribute("transactionId")
	})
})

var CardCheckoutValidatePayload = Type("CardCheckoutValidatePayload", func() {
	Description("Card Checkout Validation HTTP request.")

	Attribute("username", String, func() {
		Description("Africa’s Talking application username.")
	})
	Attribute("transactionId", String, func() {
		Description("ID of the transaction application wants to validate.")
	})
	Attribute("otp", String, func() {
		Description("One Time Password card provider sent to the client.")
	})

	Required("username", "transactionId", "otp")
})

var CardCheckoutValidateResponse = ResultType("CardCheckoutValidateResponse", func() {
	Description("Card Checkout Validation HTTP response.")
	TypeName("CardCheckoutValidateResponse")
	ContentType("application/json")

	Attributes(func() {
		Attribute("status", String, func() {
			Description("Corresponds to the final status of this request.")
			Enum(

				// The request has been accepted and the funds have
				// been credited to your applications payment wallet.
				"Success",

				// The request failed for some other reason.
				// The description filed will contain more information.
				"Failed",
			)
			Example("Success")
		})
		Attribute("description", String, func() {
			Description("A detailed description of the request status.")
			Example("Payment completed successfully")
		})
		Attribute("checkoutToken", String, func() {

			//  Without having to go through the card checkout validation process.
			Description("Token application can use to initiate subsequent charges.")
			Example("ATCdTkn_SampleCdTknId123")
		})
		Required("status", "description")
	})

	View("default", func() {
		Attribute("status")
		Attribute("description")
		Attribute("checkoutToken")
	})
})

var PaymentCard = Type("PaymentCard", func() {
	Description("Details of the payment card to be charged.")

	Attribute("number", String, func() {
		Description("Payment card number.")
		Example("1234567890")
	})
	Attribute("cvvNumber", Int, func() {
		Description("3 or 4 digit payment card verification value.")
		Example(123)
	})
	Attribute("expiryMonth", Int, func() {
		Description("Expiration month on the payment card.")
		Example(8)
	})
	Attribute("expiryYear", Int, func() {
		Description("Expiration year on the payment card.")
		Example(2019)
	})
	Attribute("countryCode", String, func() {

		//  Only “NG” is currently supported
		Description("2-Digit country code where the payment card was issued.")
		Enum("NG")
		Default("NG")
	})
	Attribute("authToken", String, func() {

		// You can EITHER provide a paymentCard or a checkoutToken if you have one.
		Description("The payment cards ATM PIN.")
		Example("1234")
	})

	Required(
		"number",
		"cvvNumber",
		"expiryMonth",
		"expiryYear",
		"countryCode",
		"authToken",
	)
})
