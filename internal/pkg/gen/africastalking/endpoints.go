// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking endpoints
//
// Command:
// $ goa gen github.com/wondenge/at-go/design -o internal/pkg

package africastalking

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "africastalking" service endpoints.
type Endpoints struct {
	SendBulkSMS              endpoint.Endpoint
	SendPremiumSMS           endpoint.Endpoint
	FetchSMS                 endpoint.Endpoint
	NewCheckoutToken         endpoint.Endpoint
	NewPremiumSubscription   endpoint.Endpoint
	FetchPremiumSubscription endpoint.Endpoint
	PurgePremiumSubscription endpoint.Endpoint
	MakeCall                 endpoint.Endpoint
	TransferCall             endpoint.Endpoint
	Say                      endpoint.Endpoint
	Play                     endpoint.Endpoint
	GetDigits                endpoint.Endpoint
	Dial                     endpoint.Endpoint
	Record                   endpoint.Endpoint
	Enqueue                  endpoint.Endpoint
	Dequeue                  endpoint.Endpoint
	Redirect                 endpoint.Endpoint
	Reject                   endpoint.Endpoint
	Queue                    endpoint.Endpoint
	UploadMedia              endpoint.Endpoint
	MobileCheckout           endpoint.Endpoint
	MobileB2C                endpoint.Endpoint
	MobileB2B                endpoint.Endpoint
	BankCheckout             endpoint.Endpoint
	BankCheckoutValidate     endpoint.Endpoint
	BankTransfer             endpoint.Endpoint
	CardCheckout             endpoint.Endpoint
	CardCheckoutValidate     endpoint.Endpoint
	WalletTransfer           endpoint.Endpoint
	TopupStash               endpoint.Endpoint
	SendAirtime              endpoint.Endpoint
	PublishIoT               endpoint.Endpoint
	InitiateAppData          endpoint.Endpoint
	Generate                 endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "africastalking" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		SendBulkSMS:              NewSendBulkSMSEndpoint(s),
		SendPremiumSMS:           NewSendPremiumSMSEndpoint(s),
		FetchSMS:                 NewFetchSMSEndpoint(s),
		NewCheckoutToken:         NewNewCheckoutTokenEndpoint(s),
		NewPremiumSubscription:   NewNewPremiumSubscriptionEndpoint(s),
		FetchPremiumSubscription: NewFetchPremiumSubscriptionEndpoint(s),
		PurgePremiumSubscription: NewPurgePremiumSubscriptionEndpoint(s),
		MakeCall:                 NewMakeCallEndpoint(s),
		TransferCall:             NewTransferCallEndpoint(s),
		Say:                      NewSayEndpoint(s),
		Play:                     NewPlayEndpoint(s),
		GetDigits:                NewGetDigitsEndpoint(s),
		Dial:                     NewDialEndpoint(s),
		Record:                   NewRecordEndpoint(s),
		Enqueue:                  NewEnqueueEndpoint(s),
		Dequeue:                  NewDequeueEndpoint(s),
		Redirect:                 NewRedirectEndpoint(s),
		Reject:                   NewRejectEndpoint(s),
		Queue:                    NewQueueEndpoint(s),
		UploadMedia:              NewUploadMediaEndpoint(s),
		MobileCheckout:           NewMobileCheckoutEndpoint(s),
		MobileB2C:                NewMobileB2CEndpoint(s),
		MobileB2B:                NewMobileB2BEndpoint(s),
		BankCheckout:             NewBankCheckoutEndpoint(s),
		BankCheckoutValidate:     NewBankCheckoutValidateEndpoint(s),
		BankTransfer:             NewBankTransferEndpoint(s),
		CardCheckout:             NewCardCheckoutEndpoint(s),
		CardCheckoutValidate:     NewCardCheckoutValidateEndpoint(s),
		WalletTransfer:           NewWalletTransferEndpoint(s),
		TopupStash:               NewTopupStashEndpoint(s),
		SendAirtime:              NewSendAirtimeEndpoint(s),
		PublishIoT:               NewPublishIoTEndpoint(s),
		InitiateAppData:          NewInitiateAppDataEndpoint(s),
		Generate:                 NewGenerateEndpoint(s),
	}
}

// Use applies the given middleware to all the "africastalking" service
// endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.SendBulkSMS = m(e.SendBulkSMS)
	e.SendPremiumSMS = m(e.SendPremiumSMS)
	e.FetchSMS = m(e.FetchSMS)
	e.NewCheckoutToken = m(e.NewCheckoutToken)
	e.NewPremiumSubscription = m(e.NewPremiumSubscription)
	e.FetchPremiumSubscription = m(e.FetchPremiumSubscription)
	e.PurgePremiumSubscription = m(e.PurgePremiumSubscription)
	e.MakeCall = m(e.MakeCall)
	e.TransferCall = m(e.TransferCall)
	e.Say = m(e.Say)
	e.Play = m(e.Play)
	e.GetDigits = m(e.GetDigits)
	e.Dial = m(e.Dial)
	e.Record = m(e.Record)
	e.Enqueue = m(e.Enqueue)
	e.Dequeue = m(e.Dequeue)
	e.Redirect = m(e.Redirect)
	e.Reject = m(e.Reject)
	e.Queue = m(e.Queue)
	e.UploadMedia = m(e.UploadMedia)
	e.MobileCheckout = m(e.MobileCheckout)
	e.MobileB2C = m(e.MobileB2C)
	e.MobileB2B = m(e.MobileB2B)
	e.BankCheckout = m(e.BankCheckout)
	e.BankCheckoutValidate = m(e.BankCheckoutValidate)
	e.BankTransfer = m(e.BankTransfer)
	e.CardCheckout = m(e.CardCheckout)
	e.CardCheckoutValidate = m(e.CardCheckoutValidate)
	e.WalletTransfer = m(e.WalletTransfer)
	e.TopupStash = m(e.TopupStash)
	e.SendAirtime = m(e.SendAirtime)
	e.PublishIoT = m(e.PublishIoT)
	e.InitiateAppData = m(e.InitiateAppData)
	e.Generate = m(e.Generate)
}

// NewSendBulkSMSEndpoint returns an endpoint function that calls the method
// "SendBulkSMS" of service "africastalking".
func NewSendBulkSMSEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BulkPayload)
		res, err := s.SendBulkSMS(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBulkResponse(res, "default")
		return vres, nil
	}
}

// NewSendPremiumSMSEndpoint returns an endpoint function that calls the method
// "SendPremiumSMS" of service "africastalking".
func NewSendPremiumSMSEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PremiumPayload)
		res, err := s.SendPremiumSMS(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPremiumSMSResponse(res, "default")
		return vres, nil
	}
}

// NewFetchSMSEndpoint returns an endpoint function that calls the method
// "FetchSMS" of service "africastalking".
func NewFetchSMSEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FetchMsgPayload)
		res, err := s.FetchSMS(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFetchMsgResponse(res, "default")
		return vres, nil
	}
}

// NewNewCheckoutTokenEndpoint returns an endpoint function that calls the
// method "NewCheckoutToken" of service "africastalking".
func NewNewCheckoutTokenEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CheckoutTokenPayload)
		res, err := s.NewCheckoutToken(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCheckoutTokenResponse(res, "default")
		return vres, nil
	}
}

// NewNewPremiumSubscriptionEndpoint returns an endpoint function that calls
// the method "NewPremiumSubscription" of service "africastalking".
func NewNewPremiumSubscriptionEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*NewSubPayload)
		res, err := s.NewPremiumSubscription(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedNewSubResponse(res, "default")
		return vres, nil
	}
}

// NewFetchPremiumSubscriptionEndpoint returns an endpoint function that calls
// the method "FetchPremiumSubscription" of service "africastalking".
func NewFetchPremiumSubscriptionEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*FetchSubPayload)
		res, err := s.FetchPremiumSubscription(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFetchSubResponse(res, "default")
		return vres, nil
	}
}

// NewPurgePremiumSubscriptionEndpoint returns an endpoint function that calls
// the method "PurgePremiumSubscription" of service "africastalking".
func NewPurgePremiumSubscriptionEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PurgeSubPayload)
		res, err := s.PurgePremiumSubscription(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedPurgeSubResponse(res, "default")
		return vres, nil
	}
}

// NewMakeCallEndpoint returns an endpoint function that calls the method
// "MakeCall" of service "africastalking".
func NewMakeCallEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MakeCallPayload)
		res, err := s.MakeCall(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedMakeCallResponse(res, "default")
		return vres, nil
	}
}

// NewTransferCallEndpoint returns an endpoint function that calls the method
// "TransferCall" of service "africastalking".
func NewTransferCallEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CallTransferPayload)
		res, err := s.TransferCall(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCalltransferresponse(res, "default")
		return vres, nil
	}
}

// NewSayEndpoint returns an endpoint function that calls the method "Say" of
// service "africastalking".
func NewSayEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Say1)
		return s.Say(ctx, p)
	}
}

// NewPlayEndpoint returns an endpoint function that calls the method "Play" of
// service "africastalking".
func NewPlayEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Play1)
		return s.Play(ctx, p)
	}
}

// NewGetDigitsEndpoint returns an endpoint function that calls the method
// "GetDigits" of service "africastalking".
func NewGetDigitsEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetDigits1)
		return s.GetDigits(ctx, p)
	}
}

// NewDialEndpoint returns an endpoint function that calls the method "Dial" of
// service "africastalking".
func NewDialEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Dial1)
		return s.Dial(ctx, p)
	}
}

// NewRecordEndpoint returns an endpoint function that calls the method
// "Record" of service "africastalking".
func NewRecordEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Record1)
		return s.Record(ctx, p)
	}
}

// NewEnqueueEndpoint returns an endpoint function that calls the method
// "Enqueue" of service "africastalking".
func NewEnqueueEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Enqueue1)
		return s.Enqueue(ctx, p)
	}
}

// NewDequeueEndpoint returns an endpoint function that calls the method
// "Dequeue" of service "africastalking".
func NewDequeueEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Dequeue1)
		return s.Dequeue(ctx, p)
	}
}

// NewRedirectEndpoint returns an endpoint function that calls the method
// "Redirect" of service "africastalking".
func NewRedirectEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Redirect1)
		return s.Redirect(ctx, p)
	}
}

// NewRejectEndpoint returns an endpoint function that calls the method
// "Reject" of service "africastalking".
func NewRejectEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*Reject1)
		return s.Reject(ctx, p)
	}
}

// NewQueueEndpoint returns an endpoint function that calls the method "Queue"
// of service "africastalking".
func NewQueueEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*QueuedCallsPayload)
		res, err := s.Queue(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedQueuedstatusresult(res, "default")
		return vres, nil
	}
}

// NewUploadMediaEndpoint returns an endpoint function that calls the method
// "UploadMedia" of service "africastalking".
func NewUploadMediaEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UploadMediaFile)
		return s.UploadMedia(ctx, p)
	}
}

// NewMobileCheckoutEndpoint returns an endpoint function that calls the method
// "MobileCheckout" of service "africastalking".
func NewMobileCheckoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MobileCheckoutPayload)
		res, err := s.MobileCheckout(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedMobileCheckoutResponse(res, "default")
		return vres, nil
	}
}

// NewMobileB2CEndpoint returns an endpoint function that calls the method
// "MobileB2C" of service "africastalking".
func NewMobileB2CEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MobileB2CPayload)
		res, err := s.MobileB2C(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedMobileB2CResponse(res, "default")
		return vres, nil
	}
}

// NewMobileB2BEndpoint returns an endpoint function that calls the method
// "MobileB2B" of service "africastalking".
func NewMobileB2BEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MobileB2BPayload)
		res, err := s.MobileB2B(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedMobileB2BResponse(res, "default")
		return vres, nil
	}
}

// NewBankCheckoutEndpoint returns an endpoint function that calls the method
// "Bank Checkout" of service "africastalking".
func NewBankCheckoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BankCheckoutPayload)
		res, err := s.BankCheckout(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBankCheckoutResponse(res, "default")
		return vres, nil
	}
}

// NewBankCheckoutValidateEndpoint returns an endpoint function that calls the
// method "BankCheckoutValidate" of service "africastalking".
func NewBankCheckoutValidateEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BankCheckoutValidatePayload)
		res, err := s.BankCheckoutValidate(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBankCheckoutValidateResponse(res, "default")
		return vres, nil
	}
}

// NewBankTransferEndpoint returns an endpoint function that calls the method
// "BankTransfer" of service "africastalking".
func NewBankTransferEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BankTransferPayload)
		res, err := s.BankTransfer(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedBankTransferResponse(res, "default")
		return vres, nil
	}
}

// NewCardCheckoutEndpoint returns an endpoint function that calls the method
// "CardCheckout" of service "africastalking".
func NewCardCheckoutEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CardCheckoutPayload)
		res, err := s.CardCheckout(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCardCheckoutResponse(res, "default")
		return vres, nil
	}
}

// NewCardCheckoutValidateEndpoint returns an endpoint function that calls the
// method "CardCheckoutValidate" of service "africastalking".
func NewCardCheckoutValidateEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CardCheckoutValidatePayload)
		res, err := s.CardCheckoutValidate(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedCardCheckoutValidateResponse(res, "default")
		return vres, nil
	}
}

// NewWalletTransferEndpoint returns an endpoint function that calls the method
// "WalletTransfer" of service "africastalking".
func NewWalletTransferEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*WalletTransferPayload)
		res, err := s.WalletTransfer(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedWalletTransferResponse(res, "default")
		return vres, nil
	}
}

// NewTopupStashEndpoint returns an endpoint function that calls the method
// "TopupStash" of service "africastalking".
func NewTopupStashEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TopupStashPayload)
		res, err := s.TopupStash(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTopupStashResponse(res, "default")
		return vres, nil
	}
}

// NewSendAirtimeEndpoint returns an endpoint function that calls the method
// "SendAirtime" of service "africastalking".
func NewSendAirtimeEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AirtimePayload)
		res, err := s.SendAirtime(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedAirtimeResponse(res, "default")
		return vres, nil
	}
}

// NewPublishIoTEndpoint returns an endpoint function that calls the method
// "PublishIoT" of service "africastalking".
func NewPublishIoTEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IoTPayload)
		res, err := s.PublishIoT(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIoTResponse(res, "default")
		return vres, nil
	}
}

// NewInitiateAppDataEndpoint returns an endpoint function that calls the
// method "InitiateAppData" of service "africastalking".
func NewInitiateAppDataEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(string)
		res, err := s.InitiateAppData(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedUserResponse(res, "default")
		return vres, nil
	}
}

// NewGenerateEndpoint returns an endpoint function that calls the method
// "Generate" of service "africastalking".
func NewGenerateEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GeneratePayload)
		res, err := s.Generate(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedAccessTokenResponse(res, "default")
		return vres, nil
	}
}
