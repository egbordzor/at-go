// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking views
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// BulkResponse is the viewed result type that is projected based on a view.
type BulkResponse struct {
	// Type to project
	Projected *BulkResponseView
	// View to render
	View string
}

// PremiumSMSResponse is the viewed result type that is projected based on a
// view.
type PremiumSMSResponse struct {
	// Type to project
	Projected *PremiumSMSResponseView
	// View to render
	View string
}

// FetchMsgResponse is the viewed result type that is projected based on a view.
type FetchMsgResponse struct {
	// Type to project
	Projected *FetchMsgResponseView
	// View to render
	View string
}

// CheckoutTokenResponse is the viewed result type that is projected based on a
// view.
type CheckoutTokenResponse struct {
	// Type to project
	Projected *CheckoutTokenResponseView
	// View to render
	View string
}

// NewSubResponse is the viewed result type that is projected based on a view.
type NewSubResponse struct {
	// Type to project
	Projected *NewSubResponseView
	// View to render
	View string
}

// FetchSubResponse is the viewed result type that is projected based on a view.
type FetchSubResponse struct {
	// Type to project
	Projected *FetchSubResponseView
	// View to render
	View string
}

// PurgeSubResponse is the viewed result type that is projected based on a view.
type PurgeSubResponse struct {
	// Type to project
	Projected *PurgeSubResponseView
	// View to render
	View string
}

// MakeCallResponse is the viewed result type that is projected based on a view.
type MakeCallResponse struct {
	// Type to project
	Projected *MakeCallResponseView
	// View to render
	View string
}

// Calltransferresponse is the viewed result type that is projected based on a
// view.
type Calltransferresponse struct {
	// Type to project
	Projected *CalltransferresponseView
	// View to render
	View string
}

// Queuedstatusresult is the viewed result type that is projected based on a
// view.
type Queuedstatusresult struct {
	// Type to project
	Projected *QueuedstatusresultView
	// View to render
	View string
}

// MobileCheckoutResponse is the viewed result type that is projected based on
// a view.
type MobileCheckoutResponse struct {
	// Type to project
	Projected *MobileCheckoutResponseView
	// View to render
	View string
}

// MobileB2CResponse is the viewed result type that is projected based on a
// view.
type MobileB2CResponse struct {
	// Type to project
	Projected *MobileB2CResponseView
	// View to render
	View string
}

// MobileB2BResponse is the viewed result type that is projected based on a
// view.
type MobileB2BResponse struct {
	// Type to project
	Projected *MobileB2BResponseView
	// View to render
	View string
}

// BankCheckoutResponse is the viewed result type that is projected based on a
// view.
type BankCheckoutResponse struct {
	// Type to project
	Projected *BankCheckoutResponseView
	// View to render
	View string
}

// BankCheckoutValidateResponse is the viewed result type that is projected
// based on a view.
type BankCheckoutValidateResponse struct {
	// Type to project
	Projected *BankCheckoutValidateResponseView
	// View to render
	View string
}

// BankTransferResponse is the viewed result type that is projected based on a
// view.
type BankTransferResponse struct {
	// Type to project
	Projected *BankTransferResponseView
	// View to render
	View string
}

// CardCheckoutResponse is the viewed result type that is projected based on a
// view.
type CardCheckoutResponse struct {
	// Type to project
	Projected *CardCheckoutResponseView
	// View to render
	View string
}

// CardCheckoutValidateResponse is the viewed result type that is projected
// based on a view.
type CardCheckoutValidateResponse struct {
	// Type to project
	Projected *CardCheckoutValidateResponseView
	// View to render
	View string
}

// WalletTransferResponse is the viewed result type that is projected based on
// a view.
type WalletTransferResponse struct {
	// Type to project
	Projected *WalletTransferResponseView
	// View to render
	View string
}

// TopupStashResponse is the viewed result type that is projected based on a
// view.
type TopupStashResponse struct {
	// Type to project
	Projected *TopupStashResponseView
	// View to render
	View string
}

// AirtimeResponse is the viewed result type that is projected based on a view.
type AirtimeResponse struct {
	// Type to project
	Projected *AirtimeResponseView
	// View to render
	View string
}

// IoTResponse is the viewed result type that is projected based on a view.
type IoTResponse struct {
	// Type to project
	Projected *IoTResponseView
	// View to render
	View string
}

// UserResponse is the viewed result type that is projected based on a view.
type UserResponse struct {
	// Type to project
	Projected *UserResponseView
	// View to render
	View string
}

// AccessTokenResponse is the viewed result type that is projected based on a
// view.
type AccessTokenResponse struct {
	// Type to project
	Projected *AccessTokenResponseView
	// View to render
	View string
}

// BulkResponseView is a type that runs validations on a projected type.
type BulkResponseView struct {
	SMSMessageData *BulkSMSMessageDataView
}

// BulkSMSMessageDataView is a type that runs validations on a projected type.
type BulkSMSMessageDataView struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string
	// A list of recipients included in the original request.
	Recipients []*RecipientsView
}

// RecipientsView is a type that runs validations on a projected type.
type RecipientsView struct {
	// This corresponds to the status of the request
	StatusCode *int
	// The recipient’s phone number
	Number *string
	// A string indicating whether the sms was sent to this recipient or not.
	Status *string
	// Amount incurred to send this sms.
	Cost *string
	// The messageId received when the sms was sent.
	MessageID *string
}

// PremiumSMSResponseView is a type that runs validations on a projected type.
type PremiumSMSResponseView struct {
	SMSMessageData *PremiumSMSMessageDataView
}

// PremiumSMSMessageDataView is a type that runs validations on a projected
// type.
type PremiumSMSMessageDataView struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string
	// A list of recipients included in the original request.
	Recipients []*RecipientsView
}

// FetchMsgResponseView is a type that runs validations on a projected type.
type FetchMsgResponseView struct {
	SMSMessageData *FetchSMSMessageDataView
}

// FetchSMSMessageDataView is a type that runs validations on a projected type.
type FetchSMSMessageDataView struct {
	Messages []*MessagesView
}

// MessagesView is a type that runs validations on a projected type.
type MessagesView struct {
	// A unique identifier attached to each incoming message.
	LinkID *string
	// The content of the message received.
	Text *string
	// Your registered short code that the sms was sent out to.
	To *string
	// The id of the message.
	ID *int
	// The date when the sms was sent.
	Date *string
	// The sender’s phone number.
	From *string
}

// CheckoutTokenResponseView is a type that runs validations on a projected
// type.
type CheckoutTokenResponseView struct {
	// A description of the status of the request.
	Description *string
	// The checkout token to be used
	Token *string
}

// NewSubResponseView is a type that runs validations on a projected type.
type NewSubResponseView struct {
	// Indicates whether the prompt to subscribe to shortcode was successfully
	// raised or not.
	Status *string
	// Describes status of the create subscription request.
	Description *string
}

// FetchSubResponseView is a type that runs validations on a projected type.
type FetchSubResponseView struct {
	// A list of subscriptions made to the product.
	Subscriptions []*SubscriptionsView
}

// SubscriptionsView is a type that runs validations on a projected type.
type SubscriptionsView struct {
	// The id of the subscription
	ID *int
	// The phone number subscribed to the product.
	Number *string
	// Timestamp when the subscription was made.
	Date *string
}

// PurgeSubResponseView is a type that runs validations on a projected type.
type PurgeSubResponseView struct {
	// Indicates whether the phone number was successfully unsubscribed or not.
	Status *string
	// Describes status of the delete subscription request.
	Description *string
}

// MakeCallResponseView is a type that runs validations on a projected type.
type MakeCallResponseView struct {
	Entries []*VoiceEntryView
	// Error message if ENTIRE request was rejected by the API.
	ErrorMessage *string
}

// VoiceEntryView is a type that runs validations on a projected type.
type VoiceEntryView struct {
	// The phone number queued.
	PhoneNumber *string
	Status      *string
	// A unique id for the request associated to this phone number
	SessionID *string
}

// CalltransferresponseView is a type that runs validations on a projected type.
type CalltransferresponseView struct {
	// can be either Success or Aborted
	Status *string
	// Why the transfer ws aborted None is successful
	ErrorMessage *string
}

// QueuedstatusresultView is a type that runs validations on a projected type.
type QueuedstatusresultView struct {
	Entries []*QueuedStatusEntryView
	// Error Message
	ErrorMessage *string
}

// QueuedStatusEntryView is a type that runs validations on a projected type.
type QueuedStatusEntryView struct {
	PhoneNumber *string
	QueueName   *string
	NumCalls    *string
}

// MobileCheckoutResponseView is a type that runs validations on a projected
// type.
type MobileCheckoutResponseView struct {
	// Status of the request
	Status *string
	// Detailed description of the request status.
	Description *string
	// Unique ID that our API generates for successful requests.
	TransactionID *string
	// Provider channel used to initiate this transaction.
	ProviderChannel *string
}

// MobileB2CResponseView is a type that runs validations on a projected type.
type MobileB2CResponseView struct {
	// Number of B2C transactions that were successfully queued.
	NumQueued *int
	// Total value of all the transactions that were successfully queued.
	TotalValue *string
	// Total transaction fee charged for all the transactions that were
	// successfully queued.
	TotalTransactionFee *string
	// A list of B2C entries
	Entries []*B2CEntryView
	// Error message if the ENTIRE request was rejected by the API
	ErrorMessage *string
}

// B2CEntryView is a type that runs validations on a projected type.
type B2CEntryView struct {
	// The phone number of the B2C transaction recipient.
	PhoneNumber *string
	// The status of the B2C transaction.
	Status *string
	// Unique ID that our API generates for successful requests.
	TransactionID *string
	// Provider used to process the B2C request.
	Provider *string
	// Channel used to process the B2C request.
	ProviderChannel *string
	// Value sent to the mobile subscriber.
	Value *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string
}

// MobileB2BResponseView is a type that runs validations on a projected type.
type MobileB2BResponseView struct {
	// The status of the B2B transaction.
	Status *string
	// A unique id that our API generates for successful requests.
	TransactionID *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// Provider channel which facilitated the payment.
	ProviderChannel *string
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string
}

// BankCheckoutResponseView is a type that runs validations on a projected type.
type BankCheckoutResponseView struct {
	// This corresponds to the status of the request.
	Status *string
	// A detailed description of the request status.
	Description *string
	// Unique ID that our API generates for successful requests.
	TransactionID *string
}

// BankCheckoutValidateResponseView is a type that runs validations on a
// projected type.
type BankCheckoutValidateResponseView struct {
	// The final status of this request.
	Status *string
	// A detailed description of the request status.
	Description *string
}

// BankTransferResponseView is a type that runs validations on a projected type.
type BankTransferResponseView struct {
	// Transfer Entries
	Entries []*TransferEntriesView
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string
}

// TransferEntriesView is a type that runs validations on a projected type.
type TransferEntriesView struct {
	// The account number of the bank transfer recipient.
	AccountNumber *string
	// The transaction has been accepted and queued for processing by the payment
	// provider.
	Status *string
	// A unique ID that our API generates for successful requests.
	TransactionID *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string
}

// CardCheckoutResponseView is a type that runs validations on a projected type.
type CardCheckoutResponseView struct {
	// The status of the request.
	Status *string
	// A detailed description of the request status.
	Description *string
	// Unique ID generated for successful requests.
	TransactionID *string
}

// CardCheckoutValidateResponseView is a type that runs validations on a
// projected type.
type CardCheckoutValidateResponseView struct {
	// Corresponds to the final status of this request.
	Status *string
	// A detailed description of the request status.
	Description *string
	// Token application can use to initiate subsequent charges.
	CheckoutToken *string
}

// WalletTransferResponseView is a type that runs validations on a projected
// type.
type WalletTransferResponseView struct {
	// Corresponds to the status of the request.
	Status *string
	// A detailed description of the request status.
	Description *string
	// A unique id that our API generates for successful requests.
	TransactionID *string
}

// TopupStashResponseView is a type that runs validations on a projected type.
type TopupStashResponseView struct {
	// Corresponds to the status of the request
	Status *string
	// A detailed description of the request status.
	Description *string
	// Unique ID for successful requests.
	TransactionID *string
}

// AirtimeResponseView is a type that runs validations on a projected type.
type AirtimeResponseView struct {
	// Number of requests sent to the provider
	NumSent *int
	// Total value of airtime sent to the provider.
	TotalAmount *string
	// Total discount applied on the airtime.
	TotalDiscount *string
	Responses     []*AirtimeEntryView
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string
}

// AirtimeEntryView is a type that runs validations on a projected type.
type AirtimeEntryView struct {
	// Phone number for this transaction.
	PhoneNumber *string
	// Value of airtime requested.
	Amount *string
	// Discount applied to the requested airtime amount.
	Discount *string
	// Status of the request associated to this phone number
	Status *string
	// Unique ID for the request associated to this phone number
	RequestID *string
	// Error message for the request associated to this phone number.
	ErrorMessage *string
}

// IoTResponseView is a type that runs validations on a projected type.
type IoTResponseView struct {
	// Response status of the API request.
	Status *string
	// Verbose response message detailing the status of the HTTP response
	Description *string
}

// UserResponseView is a type that runs validations on a projected type.
type UserResponseView struct {
	UserData *UserDataView
}

// UserDataView is a type that runs validations on a projected type.
type UserDataView struct {
	// Your Africa’s Talking application balance.
	Balance *string
}

// AccessTokenResponseView is a type that runs validations on a projected type.
type AccessTokenResponseView struct {
	// Generated Auth Token.
	Token *string
	// Token Lifetime
	LifetimeInSeconds *int
}

var (
	// BulkResponseMap is a map of attribute names in result type BulkResponse
	// indexed by view name.
	BulkResponseMap = map[string][]string{
		"default": []string{
			"SMSMessageData",
		},
	}
	// PremiumSMSResponseMap is a map of attribute names in result type
	// PremiumSMSResponse indexed by view name.
	PremiumSMSResponseMap = map[string][]string{
		"default": []string{
			"SMSMessageData",
		},
	}
	// FetchMsgResponseMap is a map of attribute names in result type
	// FetchMsgResponse indexed by view name.
	FetchMsgResponseMap = map[string][]string{
		"default": []string{
			"SMSMessageData",
		},
	}
	// CheckoutTokenResponseMap is a map of attribute names in result type
	// CheckoutTokenResponse indexed by view name.
	CheckoutTokenResponseMap = map[string][]string{
		"default": []string{
			"description",
			"token",
		},
	}
	// NewSubResponseMap is a map of attribute names in result type NewSubResponse
	// indexed by view name.
	NewSubResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
		},
	}
	// FetchSubResponseMap is a map of attribute names in result type
	// FetchSubResponse indexed by view name.
	FetchSubResponseMap = map[string][]string{
		"default": []string{
			"Subscriptions",
		},
	}
	// PurgeSubResponseMap is a map of attribute names in result type
	// PurgeSubResponse indexed by view name.
	PurgeSubResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
		},
	}
	// MakeCallResponseMap is a map of attribute names in result type
	// MakeCallResponse indexed by view name.
	MakeCallResponseMap = map[string][]string{
		"default": []string{
			"entries",
			"errorMessage",
		},
	}
	// CalltransferresponseMap is a map of attribute names in result type
	// Calltransferresponse indexed by view name.
	CalltransferresponseMap = map[string][]string{
		"default": []string{
			"status",
			"errorMessage",
		},
	}
	// QueuedstatusresultMap is a map of attribute names in result type
	// Queuedstatusresult indexed by view name.
	QueuedstatusresultMap = map[string][]string{
		"default": []string{
			"Entries",
			"errorMessage",
		},
	}
	// MobileCheckoutResponseMap is a map of attribute names in result type
	// MobileCheckoutResponse indexed by view name.
	MobileCheckoutResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
			"transactionId",
			"providerChannel",
		},
	}
	// MobileB2CResponseMap is a map of attribute names in result type
	// MobileB2CResponse indexed by view name.
	MobileB2CResponseMap = map[string][]string{
		"default": []string{
			"numQueued",
			"totalValue",
			"totalTransactionFee",
			"entries",
			"errorMessage",
		},
	}
	// MobileB2BResponseMap is a map of attribute names in result type
	// MobileB2BResponse indexed by view name.
	MobileB2BResponseMap = map[string][]string{
		"default": []string{
			"status",
			"transactionId",
			"transactionFee",
			"providerChannel",
			"errorMessage",
		},
	}
	// BankCheckoutResponseMap is a map of attribute names in result type
	// BankCheckoutResponse indexed by view name.
	BankCheckoutResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
			"transactionId",
		},
	}
	// BankCheckoutValidateResponseMap is a map of attribute names in result type
	// BankCheckoutValidateResponse indexed by view name.
	BankCheckoutValidateResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
		},
	}
	// BankTransferResponseMap is a map of attribute names in result type
	// BankTransferResponse indexed by view name.
	BankTransferResponseMap = map[string][]string{
		"default": []string{
			"entries",
			"errorMessage",
		},
	}
	// CardCheckoutResponseMap is a map of attribute names in result type
	// CardCheckoutResponse indexed by view name.
	CardCheckoutResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
			"transactionId",
		},
	}
	// CardCheckoutValidateResponseMap is a map of attribute names in result type
	// CardCheckoutValidateResponse indexed by view name.
	CardCheckoutValidateResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
			"checkoutToken",
		},
	}
	// WalletTransferResponseMap is a map of attribute names in result type
	// WalletTransferResponse indexed by view name.
	WalletTransferResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
			"transactionId",
		},
	}
	// TopupStashResponseMap is a map of attribute names in result type
	// TopupStashResponse indexed by view name.
	TopupStashResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
			"transactionId",
		},
	}
	// AirtimeResponseMap is a map of attribute names in result type
	// AirtimeResponse indexed by view name.
	AirtimeResponseMap = map[string][]string{
		"default": []string{
			"numSent",
			"totalAmount",
			"totalDiscount",
			"responses",
			"errorMessage",
		},
	}
	// IoTResponseMap is a map of attribute names in result type IoTResponse
	// indexed by view name.
	IoTResponseMap = map[string][]string{
		"default": []string{
			"status",
			"description",
		},
	}
	// UserResponseMap is a map of attribute names in result type UserResponse
	// indexed by view name.
	UserResponseMap = map[string][]string{
		"default": []string{
			"UserData",
		},
	}
	// AccessTokenResponseMap is a map of attribute names in result type
	// AccessTokenResponse indexed by view name.
	AccessTokenResponseMap = map[string][]string{
		"default": []string{
			"token",
			"lifetimeInSeconds",
		},
	}
)

// ValidateBulkResponse runs the validations defined on the viewed result type
// BulkResponse.
func ValidateBulkResponse(result *BulkResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBulkResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePremiumSMSResponse runs the validations defined on the viewed result
// type PremiumSMSResponse.
func ValidatePremiumSMSResponse(result *PremiumSMSResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePremiumSMSResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateFetchMsgResponse runs the validations defined on the viewed result
// type FetchMsgResponse.
func ValidateFetchMsgResponse(result *FetchMsgResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFetchMsgResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCheckoutTokenResponse runs the validations defined on the viewed
// result type CheckoutTokenResponse.
func ValidateCheckoutTokenResponse(result *CheckoutTokenResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCheckoutTokenResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateNewSubResponse runs the validations defined on the viewed result
// type NewSubResponse.
func ValidateNewSubResponse(result *NewSubResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateNewSubResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateFetchSubResponse runs the validations defined on the viewed result
// type FetchSubResponse.
func ValidateFetchSubResponse(result *FetchSubResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFetchSubResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidatePurgeSubResponse runs the validations defined on the viewed result
// type PurgeSubResponse.
func ValidatePurgeSubResponse(result *PurgeSubResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidatePurgeSubResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateMakeCallResponse runs the validations defined on the viewed result
// type MakeCallResponse.
func ValidateMakeCallResponse(result *MakeCallResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMakeCallResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCalltransferresponse runs the validations defined on the viewed
// result type Calltransferresponse.
func ValidateCalltransferresponse(result *Calltransferresponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCalltransferresponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateQueuedstatusresult runs the validations defined on the viewed result
// type Queuedstatusresult.
func ValidateQueuedstatusresult(result *Queuedstatusresult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateQueuedstatusresultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateMobileCheckoutResponse runs the validations defined on the viewed
// result type MobileCheckoutResponse.
func ValidateMobileCheckoutResponse(result *MobileCheckoutResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMobileCheckoutResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateMobileB2CResponse runs the validations defined on the viewed result
// type MobileB2CResponse.
func ValidateMobileB2CResponse(result *MobileB2CResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMobileB2CResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateMobileB2BResponse runs the validations defined on the viewed result
// type MobileB2BResponse.
func ValidateMobileB2BResponse(result *MobileB2BResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMobileB2BResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBankCheckoutResponse runs the validations defined on the viewed
// result type BankCheckoutResponse.
func ValidateBankCheckoutResponse(result *BankCheckoutResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBankCheckoutResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBankCheckoutValidateResponse runs the validations defined on the
// viewed result type BankCheckoutValidateResponse.
func ValidateBankCheckoutValidateResponse(result *BankCheckoutValidateResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBankCheckoutValidateResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBankTransferResponse runs the validations defined on the viewed
// result type BankTransferResponse.
func ValidateBankTransferResponse(result *BankTransferResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateBankTransferResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCardCheckoutResponse runs the validations defined on the viewed
// result type CardCheckoutResponse.
func ValidateCardCheckoutResponse(result *CardCheckoutResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCardCheckoutResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateCardCheckoutValidateResponse runs the validations defined on the
// viewed result type CardCheckoutValidateResponse.
func ValidateCardCheckoutValidateResponse(result *CardCheckoutValidateResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCardCheckoutValidateResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateWalletTransferResponse runs the validations defined on the viewed
// result type WalletTransferResponse.
func ValidateWalletTransferResponse(result *WalletTransferResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateWalletTransferResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTopupStashResponse runs the validations defined on the viewed result
// type TopupStashResponse.
func ValidateTopupStashResponse(result *TopupStashResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTopupStashResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAirtimeResponse runs the validations defined on the viewed result
// type AirtimeResponse.
func ValidateAirtimeResponse(result *AirtimeResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAirtimeResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateIoTResponse runs the validations defined on the viewed result type
// IoTResponse.
func ValidateIoTResponse(result *IoTResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateIoTResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserResponse runs the validations defined on the viewed result type
// UserResponse.
func ValidateUserResponse(result *UserResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateAccessTokenResponse runs the validations defined on the viewed
// result type AccessTokenResponse.
func ValidateAccessTokenResponse(result *AccessTokenResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateAccessTokenResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateBulkResponseView runs the validations defined on BulkResponseView
// using the "default" view.
func ValidateBulkResponseView(result *BulkResponseView) (err error) {
	if result.SMSMessageData != nil {
		if err2 := ValidateBulkSMSMessageDataView(result.SMSMessageData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateBulkSMSMessageDataView runs the validations defined on
// BulkSMSMessageDataView.
func ValidateBulkSMSMessageDataView(result *BulkSMSMessageDataView) (err error) {
	if result.Messages != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.Messages", *result.Messages, "[a-zA-Z]+"))
	}
	if len(result.Recipients) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Recipients", result.Recipients, len(result.Recipients), 1, true))
	}
	for _, e := range result.Recipients {
		if e != nil {
			if err2 := ValidateRecipientsView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateRecipientsView runs the validations defined on RecipientsView.
func ValidateRecipientsView(result *RecipientsView) (err error) {
	if result.StatusCode != nil {
		if !(*result.StatusCode == 100 || *result.StatusCode == 101 || *result.StatusCode == 102 || *result.StatusCode == 401 || *result.StatusCode == 402 || *result.StatusCode == 403 || *result.StatusCode == 404 || *result.StatusCode == 405 || *result.StatusCode == 406 || *result.StatusCode == 407 || *result.StatusCode == 408 || *result.StatusCode == 501 || *result.StatusCode == 502) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.statusCode", *result.StatusCode, []interface{}{100, 101, 102, 401, 402, 403, 404, 405, 406, 407, 408, 501, 502}))
		}
	}
	return
}

// ValidatePremiumSMSResponseView runs the validations defined on
// PremiumSMSResponseView using the "default" view.
func ValidatePremiumSMSResponseView(result *PremiumSMSResponseView) (err error) {
	if result.SMSMessageData != nil {
		if err2 := ValidatePremiumSMSMessageDataView(result.SMSMessageData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePremiumSMSMessageDataView runs the validations defined on
// PremiumSMSMessageDataView.
func ValidatePremiumSMSMessageDataView(result *PremiumSMSMessageDataView) (err error) {
	if result.Messages != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("result.Messages", *result.Messages, "[a-zA-Z]+"))
	}
	if len(result.Recipients) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Recipients", result.Recipients, len(result.Recipients), 1, true))
	}
	for _, e := range result.Recipients {
		if e != nil {
			if err2 := ValidateRecipientsView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateFetchMsgResponseView runs the validations defined on
// FetchMsgResponseView using the "default" view.
func ValidateFetchMsgResponseView(result *FetchMsgResponseView) (err error) {
	if result.SMSMessageData != nil {
		if err2 := ValidateFetchSMSMessageDataView(result.SMSMessageData); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFetchSMSMessageDataView runs the validations defined on
// FetchSMSMessageDataView.
func ValidateFetchSMSMessageDataView(result *FetchSMSMessageDataView) (err error) {
	if len(result.Messages) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Messages", result.Messages, len(result.Messages), 1, true))
	}
	return
}

// ValidateMessagesView runs the validations defined on MessagesView.
func ValidateMessagesView(result *MessagesView) (err error) {

	return
}

// ValidateCheckoutTokenResponseView runs the validations defined on
// CheckoutTokenResponseView using the "default" view.
func ValidateCheckoutTokenResponseView(result *CheckoutTokenResponseView) (err error) {
	if result.Description != nil {
		if !(*result.Description == "Success" || *result.Description == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.description", *result.Description, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateNewSubResponseView runs the validations defined on
// NewSubResponseView using the "default" view.
func ValidateNewSubResponseView(result *NewSubResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateFetchSubResponseView runs the validations defined on
// FetchSubResponseView using the "default" view.
func ValidateFetchSubResponseView(result *FetchSubResponseView) (err error) {
	if len(result.Subscriptions) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.Subscriptions", result.Subscriptions, len(result.Subscriptions), 1, true))
	}
	for _, e := range result.Subscriptions {
		if e != nil {
			if err2 := ValidateSubscriptionsView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubscriptionsView runs the validations defined on SubscriptionsView.
func ValidateSubscriptionsView(result *SubscriptionsView) (err error) {
	if result.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.Date", *result.Date, goa.FormatDateTime))
	}
	return
}

// ValidatePurgeSubResponseView runs the validations defined on
// PurgeSubResponseView using the "default" view.
func ValidatePurgeSubResponseView(result *PurgeSubResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateMakeCallResponseView runs the validations defined on
// MakeCallResponseView using the "default" view.
func ValidateMakeCallResponseView(result *MakeCallResponseView) (err error) {
	for _, e := range result.Entries {
		if e != nil {
			if err2 := ValidateVoiceEntryView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateVoiceEntryView runs the validations defined on VoiceEntryView.
func ValidateVoiceEntryView(result *VoiceEntryView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Queued" || *result.Status == "InvalidPhoneNumber" || *result.Status == "DestinationNotSupported" || *result.Status == "InsufficientCredit") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Queued", "InvalidPhoneNumber", "DestinationNotSupported", "InsufficientCredit"}))
		}
	}
	return
}

// ValidateCalltransferresponseView runs the validations defined on
// CalltransferresponseView using the "default" view.
func ValidateCalltransferresponseView(result *CalltransferresponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Aborted") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Aborted"}))
		}
	}
	return
}

// ValidateQueuedstatusresultView runs the validations defined on
// QueuedstatusresultView using the "default" view.
func ValidateQueuedstatusresultView(result *QueuedstatusresultView) (err error) {

	return
}

// ValidateQueuedStatusEntryView runs the validations defined on
// QueuedStatusEntryView.
func ValidateQueuedStatusEntryView(result *QueuedStatusEntryView) (err error) {

	return
}

// ValidateMobileCheckoutResponseView runs the validations defined on
// MobileCheckoutResponseView using the "default" view.
func ValidateMobileCheckoutResponseView(result *MobileCheckoutResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "PendingConfirmation" || *result.Status == "InvalidRequest" || *result.Status == "NotSupported" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"PendingConfirmation", "InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	return
}

// ValidateMobileB2CResponseView runs the validations defined on
// MobileB2CResponseView using the "default" view.
func ValidateMobileB2CResponseView(result *MobileB2CResponseView) (err error) {
	for _, e := range result.Entries {
		if e != nil {
			if err2 := ValidateB2CEntryView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateB2CEntryView runs the validations defined on B2CEntryView.
func ValidateB2CEntryView(result *B2CEntryView) (err error) {
	if result.PhoneNumber == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phoneNumber", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "Queued" || *result.Status == "InvalidRequest" || *result.Status == "NotSupported" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Queued", "InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	if result.Provider != nil {
		if !(*result.Provider == "Mpesa" || *result.Provider == "Segovia" || *result.Provider == "Athena") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.provider", *result.Provider, []interface{}{"Mpesa", "Segovia", "Athena"}))
		}
	}
	return
}

// ValidateMobileB2BResponseView runs the validations defined on
// MobileB2BResponseView using the "default" view.
func ValidateMobileB2BResponseView(result *MobileB2BResponseView) (err error) {
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.Status != nil {
		if !(*result.Status == "Queued" || *result.Status == "InvalidRequest" || *result.Status == "NotSupported" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Queued", "InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	return
}

// ValidateBankCheckoutResponseView runs the validations defined on
// BankCheckoutResponseView using the "default" view.
func ValidateBankCheckoutResponseView(result *BankCheckoutResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "PendingConfirmation" || *result.Status == "InvalidRequest" || *result.Status == "NotSupported" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"PendingConfirmation", "InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	return
}

// ValidateBankCheckoutValidateResponseView runs the validations defined on
// BankCheckoutValidateResponseView using the "default" view.
func ValidateBankCheckoutValidateResponseView(result *BankCheckoutValidateResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateBankTransferResponseView runs the validations defined on
// BankTransferResponseView using the "default" view.
func ValidateBankTransferResponseView(result *BankTransferResponseView) (err error) {
	if len(result.Entries) < 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("result.entries", result.Entries, len(result.Entries), 1, true))
	}
	for _, e := range result.Entries {
		if e != nil {
			if err2 := ValidateTransferEntriesView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTransferEntriesView runs the validations defined on
// TransferEntriesView.
func ValidateTransferEntriesView(result *TransferEntriesView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "InvalidRequest" || *result.Status == "NotSupported" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	return
}

// ValidateCardCheckoutResponseView runs the validations defined on
// CardCheckoutResponseView using the "default" view.
func ValidateCardCheckoutResponseView(result *CardCheckoutResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "PendingConfirmation" || *result.Status == "Success" || *result.Status == "InvalidRequest" || *result.Status == "NotSupported" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"PendingConfirmation", "Success", "InvalidRequest", "NotSupported", "Failed"}))
		}
	}
	return
}

// ValidateCardCheckoutValidateResponseView runs the validations defined on
// CardCheckoutValidateResponseView using the "default" view.
func ValidateCardCheckoutValidateResponseView(result *CardCheckoutValidateResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateWalletTransferResponseView runs the validations defined on
// WalletTransferResponseView using the "default" view.
func ValidateWalletTransferResponseView(result *WalletTransferResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateTopupStashResponseView runs the validations defined on
// TopupStashResponseView using the "default" view.
func ValidateTopupStashResponseView(result *TopupStashResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Success" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Success", "Failed"}))
		}
	}
	return
}

// ValidateAirtimeResponseView runs the validations defined on
// AirtimeResponseView using the "default" view.
func ValidateAirtimeResponseView(result *AirtimeResponseView) (err error) {
	for _, e := range result.Responses {
		if e != nil {
			if err2 := ValidateAirtimeEntryView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateAirtimeEntryView runs the validations defined on AirtimeEntryView.
func ValidateAirtimeEntryView(result *AirtimeEntryView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "Sent" || *result.Status == "Failed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"Sent", "Failed"}))
		}
	}
	return
}

// ValidateIoTResponseView runs the validations defined on IoTResponseView
// using the "default" view.
func ValidateIoTResponseView(result *IoTResponseView) (err error) {
	if result.Status != nil {
		if !(*result.Status == "true" || *result.Status == "false") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.status", *result.Status, []interface{}{"true", "false"}))
		}
	}
	if result.Description != nil {
		if !(*result.Description == "Message processed successfully" || *result.Description == "Publishing not allowed" || *result.Description == "The provided topic does not belong to the user") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.description", *result.Description, []interface{}{"Message processed successfully", "Publishing not allowed", "The provided topic does not belong to the user"}))
		}
	}
	return
}

// ValidateUserResponseView runs the validations defined on UserResponseView
// using the "default" view.
func ValidateUserResponseView(result *UserResponseView) (err error) {

	return
}

// ValidateUserDataView runs the validations defined on UserDataView.
func ValidateUserDataView(result *UserDataView) (err error) {

	return
}

// ValidateAccessTokenResponseView runs the validations defined on
// AccessTokenResponseView using the "default" view.
func ValidateAccessTokenResponseView(result *AccessTokenResponseView) (err error) {
	if result.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "result"))
	}
	if result.LifetimeInSeconds == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lifetimeInSeconds", "result"))
	}
	return
}
