// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking service
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package africastalking

import (
	"context"

	africastalkingviews "github.com/wondenge/at-go/internal/pkg/gen/africastalking/views"
)

// Service is the africastalking service interface.
type Service interface {
	// Send Bulk SMS
	SendBulkSMS(context.Context, *BulkPayload) (res *BulkResponse, err error)
	// Send Premium SMS
	SendPremiumSMS(context.Context, *PremiumPayload) (res *PremiumSMSResponse, err error)
	// Incrementally fetch messages from application inbox.
	FetchSMS(context.Context, *FetchMsgPayload) (res *FetchMsgResponse, err error)
	// Generate a checkout token
	NewCheckoutToken(context.Context, *CheckoutTokenPayload) (res *CheckoutTokenResponse, err error)
	// Subscribe a phone number
	NewPremiumSubscription(context.Context, *NewSubPayload) (res *NewSubResponse, err error)
	// Incrementally fetch your premium sms subscriptions.
	FetchPremiumSubscription(context.Context, *FetchSubPayload) (res *FetchSubResponse, err error)
	// Delete a Premium SMS Subscription
	PurgePremiumSubscription(context.Context, *PurgeSubPayload) (res *PurgeSubResponse, err error)
	// Makes outbound calls.
	MakeCall(context.Context, *MakeCallPayload) (res *MakeCallResponse, err error)
	// Transfers call to another number.
	TransferCall(context.Context, *CallTransferPayload) (res *CallTransferResponse, err error)
	// Used when you have more calls than you can handle at one time
	Queue(context.Context, *QueuedCallsPayload) (res *QueuedStatusResult, err error)
	// Uploads media or audio files to Africa'sTalking servers with the extension
	// .mp3 or .wav
	UploadMedia(context.Context, *UploadMediaFile) (res string, err error)
	// Set a text to be read out to the caller.
	Say(context.Context, *SayPayload) (res string, err error)
	// Play back an audio file located anywhere on the web.
	Play(context.Context, *PlayPayload) (res string, err error)
	// Get digits a user enters on their phone in response to a prompt from
	// application
	GetDigits(context.Context, *GetDigitsPayload) (res string, err error)
	// Connect the user who called your phone number to an external phone number.
	Dial(context.Context, *DialPayload) (res string, err error)
	// Record a call session into an mp3 file.
	Record(context.Context, *RecordPayload) (res string, err error)
	// Pass an incoming call to a queue to be handled later.
	Enqueue(context.Context, *EnqueuePayload) (res string, err error)
	// Pass the calls enqueued to a separate number to be handled.
	Dequeue(context.Context, *DequeuePayload) (res string, err error)
	// Transfer control of the call to the script whose URL is passed in.
	Redirect(context.Context, *RedirectPayload) (res string, err error)
	// Reject an incoming call without incurring any usage charges.
	Reject(context.Context, *RejectPayload) (res string, err error)
	// Initiate Mobile C2B payments on a mobile subscriber’s device.
	MobileCheckout(context.Context, *MobileCheckoutPayload) (res *MobileCheckoutResponse, err error)
	// Initiate Mobile B2C request
	MobileB2C(context.Context, *MobileB2CPayload) (res *MobileB2CResponse, err error)
	// Initiate Mobile B2B request
	MobileB2B(context.Context, *MobileB2BPayload) (res *MobileB2BResponse, err error)
	// Collect money into your payment wallet.
	BankCheckout(context.Context, *BankCheckoutPayload) (res *BankCheckoutResponse, err error)
	// Validate a bank checkout charge request
	BankCheckoutValidate(context.Context, *BankCheckoutValidatePayload) (res *BankCheckoutValidateResponse, err error)
	// Initiate a bank transfer request.
	BankTransfer(context.Context, *BankTransferPayload) (res *BankTransferResponse, err error)
	// Collect money into your Payment Wallet by initiating transactions that
	// deduct money from a customers Debit or Credit Card.
	CardCheckout(context.Context, *CardCheckoutPayload) (res *CardCheckoutResponse, err error)
	// Validate card checkout charge requests
	CardCheckoutValidate(context.Context, *CardCheckoutValidatePayload) (res *CardCheckoutValidateResponse, err error)
	// Transfer money from one Payment Product to another Payment Product hosted on
	// Africa’s Talking.
	WalletTransfer(context.Context, *WalletTransferPayload) (res *WalletTransferResponse, err error)
	// Move money from a Payment Product to an Africa’s Talking application stash.
	TopupStash(context.Context, *TopupStashPayload) (res *TopupStashResponse, err error)
	// Fetch transactions of a particular payment product.
	FindTransaction(context.Context, *FindTransactionPayload) (res *FindTransactionResponse, err error)
	// Fetch transactions of a particular payment product.
	FetchProductTransactions(context.Context, *ProductTransactionsPayload) (res *ProductTransactionsResponse, err error)
	// Fetch your wallet transactions
	FetchWalletTransactions(context.Context, *WalletTransactionsPayload) (res *WalletTransactionsResponse, err error)
	// Fetch your wallet balance
	FetchWalletBalance(context.Context, *WalletBalancePayload) (res *WalletBalanceResponse, err error)
	// Send Airtime.
	SendAirtime(context.Context, *AirtimePayload) (res *AirtimeResponse, err error)
	// Publishes messages to remote devices.
	PublishIoT(context.Context, *IoTPayload) (res *IoTResponse, err error)
	// Initiate an application data request.
	InitiateAppData(context.Context, string) (res *UserResponse, err error)
	// Generates a valid auth token
	Generate(context.Context, *GeneratePayload) (res *AccessTokenResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "africastalking"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [38]string{"SendBulkSMS", "SendPremiumSMS", "FetchSMS", "NewCheckoutToken", "NewPremiumSubscription", "FetchPremiumSubscription", "PurgePremiumSubscription", "MakeCall", "TransferCall", "Queue", "UploadMedia", "Say", "Play", "GetDigits", "Dial", "Record", "Enqueue", "Dequeue", "Redirect", "Reject", "MobileCheckout", "MobileB2C", "MobileB2B", "Bank Checkout", "BankCheckoutValidate", "BankTransfer", "CardCheckout", "CardCheckoutValidate", "WalletTransfer", "TopupStash", "FindTransaction", "FetchProductTransactions", "FetchWalletTransactions", "FetchWalletBalance", "SendAirtime", "PublishIoT", "InitiateAppData", "Generate"}

// BulkPayload is the payload type of the africastalking service SendBulkSMS
// method.
type BulkPayload struct {
	// Africa’s Talking application username
	Username string
	// Recipients’ phone numbers
	To string
	// Message to be sent
	Message string
	// Registered Short Code or Alphanumeric
	From *string
	// Used by MSP to determine who gets billed for a message
	BulkSMSMode int
	// Used for Bulk SMS clients
	Enqueue int
	// The keyword to be used for a premium service
	Keyword *string
	// Used for premium services to send OnDemand messages
	LinkID *string
	// No. of hours subscription message should be retried
	RetryDurationInHours *string
}

// BulkResponse is the result type of the africastalking service SendBulkSMS
// method.
type BulkResponse struct {
	SMSMessageData *BulkSMSMessageData
}

// PremiumPayload is the payload type of the africastalking service
// SendPremiumSMS method.
type PremiumPayload struct {
	// Africa’s Talking application username
	Username string
	// Recipients’ phone numbers
	To string
	// Message to be sent
	Message string
	// Registered Short Code or Alphanumeric
	From *string
	// Used by MSP to determine who gets billed for a message
	BulkSMSMode int
	// Used for Bulk SMS clients
	Enqueue int
	// The keyword to be used for a premium service
	Keyword *string
	// Used for premium services to send OnDemand messages
	LinkID *string
	// No. of hours subscription message should be retried
	RetryDurationInHours *string
}

// PremiumSMSResponse is the result type of the africastalking service
// SendPremiumSMS method.
type PremiumSMSResponse struct {
	SMSMessageData *PremiumSMSMessageData
}

// FetchMsgPayload is the payload type of the africastalking service FetchSMS
// method.
type FetchMsgPayload struct {
	// Africa’s Talking application username.
	Username string
	// This is the id of the message that you last processed.
	LastReceivedID string
}

// FetchMsgResponse is the result type of the africastalking service FetchSMS
// method.
type FetchMsgResponse struct {
	SMSMessageData *FetchSMSMessageData
}

// CheckoutTokenPayload is the payload type of the africastalking service
// NewCheckoutToken method.
type CheckoutTokenPayload struct {
	// Mobile phone number you want to create a subscription for.
	PhoneNumber string
}

// CheckoutTokenResponse is the result type of the africastalking service
// NewCheckoutToken method.
type CheckoutTokenResponse struct {
	// A description of the status of the request.
	Description *string
	// The checkout token to be used
	Token *string
}

// NewSubPayload is the payload type of the africastalking service
// NewPremiumSubscription method.
type NewSubPayload struct {
	// Africa’s Talking application username.
	Username string
	// Premium short code mapped to your account
	ShortCode string
	// Premium keyword under short code mapped to your account.
	Keyword string
	// The phoneNumber to be subscribed
	PhoneNumber string
	// Token used to validate the subscription request
	CheckoutToken string
}

// NewSubResponse is the result type of the africastalking service
// NewPremiumSubscription method.
type NewSubResponse struct {
	// Indicates whether the prompt to subscribe to shortcode was successfully
	// raised or not.
	Status *string
	// Describes status of the create subscription request.
	Description *string
}

// FetchSubPayload is the payload type of the africastalking service
// FetchPremiumSubscription method.
type FetchSubPayload struct {
	// Africa’s Talking application username.
	Username string
	// Premium short code mapped to your account
	ShortCode string
	// Premium keyword under short code mapped to your account.
	Keyword string
	// ID of the subscription you believe to be your last.
	LastReceivedID string
}

// FetchSubResponse is the result type of the africastalking service
// FetchPremiumSubscription method.
type FetchSubResponse struct {
	// A list of subscriptions made to the product.
	Subscriptions []*Subscriptions
}

// PurgeSubPayload is the payload type of the africastalking service
// PurgePremiumSubscription method.
type PurgeSubPayload struct {
	// Africa’s Talking application username.
	Username string
	// Premium short code mapped to your account
	ShortCode string
	// Premium keyword under short code mapped to your account.
	Keyword string
	// The phoneNumber to be unsubscribed.
	PhoneNumber string
}

// PurgeSubResponse is the result type of the africastalking service
// PurgePremiumSubscription method.
type PurgeSubResponse struct {
	// Indicates whether the phone number was successfully unsubscribed or not.
	Status *string
	// Describes status of the delete subscription request.
	Description *string
}

// MakeCallPayload is the payload type of the africastalking service MakeCall
// method.
type MakeCallPayload struct {
	// Africa’s Talking Username
	Username string
	// Africa’s Talking phone number
	From string
	// A comma separated string of recipients’ phone numbers.
	To string
	// Variable sent to Events Callback URL used to tag the call
	ClientRequestID *string
}

// MakeCallResponse is the result type of the africastalking service MakeCall
// method.
type MakeCallResponse struct {
	Entries []*VoiceEntry
	// Error message if ENTIRE request was rejected by the API.
	ErrorMessage *string
}

// CallTransferPayload is the payload type of the africastalking service
// TransferCall method.
type CallTransferPayload struct {
	// Session Id of the ongoing call, it must have two legs
	SessionID string
	// Phone Number to transfer the call to
	PhoneNumber string
	// Call leg to transfer the call to either caller or callee
	CallLeg string
	// The url of the media file to be played when the user is on hold.
	HoldMusicURL *string
}

// CallTransferResponse is the result type of the africastalking service
// TransferCall method.
type CallTransferResponse struct {
	// can be either Success or Aborted
	Status *string
	// Why the transfer ws aborted None is successful
	ErrorMessage *string
}

// QueuedCallsPayload is the payload type of the africastalking service Queue
// method.
type QueuedCallsPayload struct {
	// Your Africa’s Talking application username.
	Username string
	// List of one or more numbers mapped to your Africa’s Talking account.
	PhoneNumbers string
}

// QueuedStatusResult is the result type of the africastalking service Queue
// method.
type QueuedStatusResult struct {
	Entries []*QueuedStatusEntry
	// Error Message
	ErrorMessage *string
}

// UploadMediaFile is the payload type of the africastalking service
// UploadMedia method.
type UploadMediaFile struct {
	// Your Africa’s Talking application username.
	Username *string
	// The url of the file to upload.
	URL *string
}

// SayPayload is the payload type of the africastalking service Say method.
type SayPayload struct {
	// This parameter specifies the voice to use
	Voice string
	// Instructs AT to play a beep after reading the text contained in the request
	PlayBeep bool
}

// PlayPayload is the payload type of the africastalking service Play method.
type PlayPayload struct {
	// A valid URL that contains a link to the file to be played.
	URL string
}

// GetDigitsPayload is the payload type of the africastalking service GetDigits
// method.
type GetDigitsPayload struct {
	// Instructs AT to forward results of the GetDigits action to the URL value
	// passed in.
	CallbackURL *string
	// This shows the number of digits you would like to grab from the user input.
	NumDigits *string
	// Timeout (in seconds) for getting the digits, after which the system moves on
	// to the next element.
	Timeout *string
	// The key which will terminate the action of getting digits.
	FinishOnKey *string
}

// DialPayload is the payload type of the africastalking service Dial method.
type DialPayload struct {
	PhoneNumbers string
	Record       *string
	Sequential   *string
	CallerID     *string
	RingBackTone *string
	// This contains the maximum amount of time in seconds a call should take.
	MaxDuration *string
}

// RecordPayload is the payload type of the africastalking service Record
// method.
type RecordPayload struct {
	FinishOnKey *string
	MaxLength   *string
	Timeout     *string
	TrimSilence *string
	PlayBeep    *string
	CallbackURL *string
}

// EnqueuePayload is the payload type of the africastalking service Enqueue
// method.
type EnqueuePayload struct {
	HoldMusic *string
	Name      *string
}

// DequeuePayload is the payload type of the africastalking service Dequeue
// method.
type DequeuePayload struct {
	PhoneNumber *string
	Name        *string
}

// RedirectPayload is the payload type of the africastalking service Redirect
// method.
type RedirectPayload struct {
	// Reject
	Reject *string
}

// RejectPayload is the payload type of the africastalking service Reject
// method.
type RejectPayload struct {
	// Redirect
	Redirect *string
}

// MobileCheckoutPayload is the payload type of the africastalking service
// MobileCheckout method.
type MobileCheckoutPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName string
	// Provider channel the payment will be initiated from.
	ProviderChannel *string
	// Phone number of the client that will complete this transaction.
	PhoneNumber string
	// 3-digit ISO format currency code.
	CurrencyCode string
	// Amount client is expected to confirm.
	Amount float64
	// Map of any metadata associates with the request
	Metadata map[string]string
}

// MobileCheckoutResponse is the result type of the africastalking service
// MobileCheckout method.
type MobileCheckoutResponse struct {
	// Status of the request
	Status *string
	// Detailed description of the request status.
	Description *string
	// Unique ID that our API generates for successful requests.
	TransactionID *string
	// Provider channel used to initiate this transaction.
	ProviderChannel *string
}

// MobileB2CPayload is the payload type of the africastalking service MobileB2C
// method.
type MobileB2CPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment Product to initiate this transaction.
	ProductName string
	// A list of B2C Mobile Recipients
	Recipients []*MobileRecipients
}

// MobileB2CResponse is the result type of the africastalking service MobileB2C
// method.
type MobileB2CResponse struct {
	// Number of B2C transactions that were successfully queued.
	NumQueued *int
	// Total value of all the transactions that were successfully queued.
	TotalValue *string
	// Total transaction fee charged for all the transactions that were
	// successfully queued.
	TotalTransactionFee *string
	// A list of B2C entries
	Entries []*B2CEntry
	// Error message if the ENTIRE request was rejected by the API
	ErrorMessage *string
}

// MobileB2BPayload is the payload type of the africastalking service MobileB2B
// method.
type MobileB2BPayload struct {
	// Africa’s Talking application username.
	Username *string
	// Africa’s Talking Payment Product initiating transaction.
	ProductName *string
	// Provider used to process the B2C request.
	Provider *string
	// Transfer type of the payment.
	TransferType *string
	// 3-digit ISO format currency code
	CurrencyCode *string
	// Amount client is expected to confirm.
	Amount *float64
	// Name or number of the channel receiving payment by the provider.
	DestinationChannel *string
	// Account name used by the business to receive money on the provided
	// destinationChannel.
	DestinationAccount *string
	// A map of any metadata associated with the request.
	Metadata map[string]string
}

// MobileB2BResponse is the result type of the africastalking service MobileB2B
// method.
type MobileB2BResponse struct {
	// The status of the B2B transaction.
	Status string
	// A unique id that our API generates for successful requests.
	TransactionID *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// Provider channel which facilitated the payment.
	ProviderChannel *string
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string
}

// BankCheckoutPayload is the payload type of the africastalking service Bank
// Checkout method.
type BankCheckoutPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment Product to initiate this transaction.
	ProductName string
	BankAccount *BankAccount
	// 3-digit ISO format currency code.
	CurrencyCode string
	// Amount client is expected to confirm.
	Amount float64
	// Short description of the transaction displayed on the clients statement.
	Narration string
	// A map of any metadata that you would like us to associate with the request.
	Metadata map[string]string
}

// BankCheckoutResponse is the result type of the africastalking service Bank
// Checkout method.
type BankCheckoutResponse struct {
	// This corresponds to the status of the request.
	Status *string
	// A detailed description of the request status.
	Description *string
	// Unique ID that our API generates for successful requests.
	TransactionID *string
}

// BankCheckoutValidatePayload is the payload type of the africastalking
// service BankCheckoutValidate method.
type BankCheckoutValidatePayload struct {
	// Africa’s Talking application Username.
	Username string
	// The ID of the transaction to be validated.
	TransactionID string
	// One Time Password bank sent to the client.
	Otp string
}

// BankCheckoutValidateResponse is the result type of the africastalking
// service BankCheckoutValidate method.
type BankCheckoutValidateResponse struct {
	// The final status of this request.
	Status *string
	// A detailed description of the request status.
	Description *string
}

// BankTransferPayload is the payload type of the africastalking service
// BankTransfer method.
type BankTransferPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName string
	// Transfer Recipients
	Recipients []*TransferRecipients
}

// BankTransferResponse is the result type of the africastalking service
// BankTransfer method.
type BankTransferResponse struct {
	// Transfer Entries
	Entries []*TransferEntries
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string
}

// CardCheckoutPayload is the payload type of the africastalking service
// CardCheckout method.
type CardCheckoutPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment Product initiating transaction.
	ProductName string
	PaymentCard *PaymentCard
	// Token generated by AfricasTalking
	CheckoutToken *string
	// 3-digit ISO format currency code.
	CurrencyCode string
	// Amount client is expected to confirm.
	Amount float64
	// Short description of the transaction.
	Narration string
	// Metadata associated with the request.
	Metadata map[string]string
}

// CardCheckoutResponse is the result type of the africastalking service
// CardCheckout method.
type CardCheckoutResponse struct {
	// The status of the request.
	Status string
	// A detailed description of the request status.
	Description string
	// Unique ID generated for successful requests.
	TransactionID *string
}

// CardCheckoutValidatePayload is the payload type of the africastalking
// service CardCheckoutValidate method.
type CardCheckoutValidatePayload struct {
	// Africa’s Talking application username.
	Username string
	// ID of the transaction application wants to validate.
	TransactionID string
	// One Time Password card provider sent to the client.
	Otp string
}

// CardCheckoutValidateResponse is the result type of the africastalking
// service CardCheckoutValidate method.
type CardCheckoutValidateResponse struct {
	// Corresponds to the final status of this request.
	Status string
	// A detailed description of the request status.
	Description string
	// Token application can use to initiate subsequent charges.
	CheckoutToken *string
}

// WalletTransferPayload is the payload type of the africastalking service
// WalletTransfer method.
type WalletTransferPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment product to initiate this transaction.
	ProductName string
	// Unique product code to transfer the funds to.
	TargetProductCode int
	// 3-digit ISO format currency code
	CurrencyCode string
	// Amount application will be topped up with.
	Amount float64
	// Metadata associated with the request.
	Metadata map[string]string
}

// WalletTransferResponse is the result type of the africastalking service
// WalletTransfer method.
type WalletTransferResponse struct {
	// Corresponds to the status of the request.
	Status string
	// A detailed description of the request status.
	Description string
	// A unique id that our API generates for successful requests.
	TransactionID *string
}

// TopupStashPayload is the payload type of the africastalking service
// TopupStash method.
type TopupStashPayload struct {
	// Africa’s Talking application username.
	Username string
	// Africa’s Talking Payment product initiating transaction.
	ProductName string
	// 3-digit ISO format currency code.
	CurrencyCode string
	// Amount application will be topped up with.
	Amount float64
	// Metadata associated with the request.
	Metadata map[string]string
}

// TopupStashResponse is the result type of the africastalking service
// TopupStash method.
type TopupStashResponse struct {
	// Corresponds to the status of the request
	Status string
	// A detailed description of the request status.
	Description string
	// Unique ID for successful requests.
	TransactionID *string
}

// FindTransactionPayload is the payload type of the africastalking service
// FindTransaction method.
type FindTransactionPayload struct {
	// Africa’s Talking application username.
	Username string
	// ID of the transaction you would like to find.
	TransactionID string
}

// FindTransactionResponse is the result type of the africastalking service
// FindTransaction method.
type FindTransactionResponse struct {
	// Status of the request
	Status *string
	// Details of the transaction.
	Data *TransactionResponse
	// A message detailing what happened with a failed request.
	ErrorMessage *string
}

// ProductTransactionsPayload is the payload type of the africastalking service
// FetchProductTransactions method.
type ProductTransactionsPayload struct {
	// Africa’s Talking application username.
	Username string
	// Name of the payment product to fetch.
	ProductName string
	// Number of the page you’d like to read results from.
	PageNumber int
	// Number of transaction results you would like for this query.
	Count int
	// Transaction start date; in the format YYYY-MM-DD
	StartDate *string
	// Transaction end date; in the format YYYY-MM-DD
	EndDate *string
	// Transaction category you would like to consider.
	Category *string
	// Transaction provider you would like to consider.
	Provider *string
	// Transaction status you would like to consider
	Status *string
	// Transaction source you would like to consider.
	Source *string
	// Transaction destination you would like to consider.
	Destination *string
	// Transaction provider channel you would like to consider.
	ProviderChannel *string
}

// ProductTransactionsResponse is the result type of the africastalking service
// FetchProductTransactions method.
type ProductTransactionsResponse struct {
	// The status of the request.
	Status    *string
	Responses []*TransactionResponse
}

// WalletTransactionsPayload is the payload type of the africastalking service
// FetchWalletTransactions method.
type WalletTransactionsPayload struct {
	// Africa’s Talking application username.
	Username string
	// Number of the page you’d like to read results from.
	PageNumber int
	// Number of transaction results you would like for this query.
	Count int
	// Transaction start date; in the format YYYY-MM-DD
	StartDate *string
	// Transaction end date; in the format YYYY-MM-DD
	EndDate *string
	// List of transaction categories you would like to consider.
	Categories *string
}

// WalletTransactionsResponse is the result type of the africastalking service
// FetchWalletTransactions method.
type WalletTransactionsResponse struct {
	// The status of the request
	Status *string
	// List of response Entry corresponding to a transaction result.
	Responses []*WalletEntry
	// A message detailing what happened with a failed request.
	ErrorMessage *string
}

// WalletBalancePayload is the payload type of the africastalking service
// FetchWalletBalance method.
type WalletBalancePayload struct {
	// Africa’s Talking application username
	Username string
}

// WalletBalanceResponse is the result type of the africastalking service
// FetchWalletBalance method.
type WalletBalanceResponse struct {
	// The status of the request.
	Status *string
	// Balance of the payment wallet.
	Balance *string
	// A message detailing what happened with a failed request.
	ErrorMessage *string
}

// AirtimePayload is the payload type of the africastalking service SendAirtime
// method.
type AirtimePayload struct {
	// Africa’s Talking application username.
	Username   string
	Recipients []*AirtimeRecipients
}

// AirtimeResponse is the result type of the africastalking service SendAirtime
// method.
type AirtimeResponse struct {
	// Number of requests sent to the provider
	NumSent *int
	// Total value of airtime sent to the provider.
	TotalAmount *string
	// Total discount applied on the airtime.
	TotalDiscount *string
	Responses     []*AirtimeEntry
	// Error message if the ENTIRE request was rejected by the API.
	ErrorMessage *string
}

// IoTPayload is the payload type of the africastalking service PublishIoT
// method.
type IoTPayload struct {
	// Africa’s Talking application username
	Username string
	// Device group to which the message is to be sent
	DeviceGroup string
	// Messaging channel to which the message is to be sent.
	Topic string
	// Message packet to be sent to the subscribed devices
	Payload string
}

// IoTResponse is the result type of the africastalking service PublishIoT
// method.
type IoTResponse struct {
	// Response status of the API request.
	Status *string
	// Verbose response message detailing the status of the HTTP response
	Description *string
}

// UserResponse is the result type of the africastalking service
// InitiateAppData method.
type UserResponse struct {
	UserData *UserData
}

// GeneratePayload is the payload type of the africastalking service Generate
// method.
type GeneratePayload struct {
	// Africa's Talking Username.
	Username string
	// Africa's Talking API Key.
	APIKey string
}

// AccessTokenResponse is the result type of the africastalking service
// Generate method.
type AccessTokenResponse struct {
	// Generated Auth Token.
	Token string
	// Token Lifetime
	LifetimeInSeconds int
}

// A Map detailing the eventual result of the sms request
type BulkSMSMessageData struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string
	// A list of recipients included in the original request.
	Recipients []*Recipients
}

// Recipient Attributes
type Recipients struct {
	// This corresponds to the status of the request
	StatusCode *int
	// The recipient’s phone number
	Number *string
	// A string indicating whether the sms was sent to this recipient or not.
	Status *string
	// Amount incurred to send this sms.
	Cost *string
	// The messageId received when the sms was sent.
	MessageID *string
}

// A Map detailing the eventual result of the sms request
type PremiumSMSMessageData struct {
	// A summary of the total number of recipients the sms was sent to and the
	// total cost incurred.
	Messages *string
	// A list of recipients included in the original request.
	Recipients []*Recipients
}

type FetchSMSMessageData struct {
	Messages []*Messages
}

// A list of messages from your inbox.
type Messages struct {
	// A unique identifier attached to each incoming message.
	LinkID *string
	// The content of the message received.
	Text *string
	// Your registered short code that the sms was sent out to.
	To *string
	// The id of the message.
	ID *int
	// The date when the sms was sent.
	Date *string
	// The sender’s phone number.
	From *string
}

type Subscriptions struct {
	// The id of the subscription
	ID *int
	// The phone number subscribed to the product.
	Number *string
	// Timestamp when the subscription was made.
	Date *string
}

type VoiceEntry struct {
	// The phone number queued.
	PhoneNumber *string
	Status      *string
	// A unique id for the request associated to this phone number
	SessionID string
}

type QueuedStatusEntry struct {
	PhoneNumber *string
	QueueName   *string
	NumCalls    *string
}

// List of Recipient elements of a B2C transaction request.
type MobileRecipients struct {
	// Name of the B2C transaction recipient.
	Name *string
	// Phone number of the B2C transaction recipient.
	PhoneNumber string
	// 3-digit ISO format currency code.
	CurrencyCode string
	// Amount that the client is expected to confirm.
	Amount float64
	// Channel payment will be made from.
	ProviderChannel *string
	// Purpose of the payment.
	Reason *string
	// Map of metadata associated with the request.
	Metadata map[string]string
}

type B2CEntry struct {
	// The phone number of the B2C transaction recipient.
	PhoneNumber string
	// The status of the B2C transaction.
	Status string
	// Unique ID that our API generates for successful requests.
	TransactionID *string
	// Provider used to process the B2C request.
	Provider *string
	// Channel used to process the B2C request.
	ProviderChannel *string
	// Value sent to the mobile subscriber.
	Value *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string
}

type BankAccount struct {
	// Bank account name.
	AccountName string
	// Bank account number.
	AccountNumber string
	// 6-Digit Integer code for the bank that we allocate.
	BankCode int
	// Date of birth of the account owner.
	DateOfBirth string
}

// A list of Recipient elements each corresponding to a bank transfer
// transaction request.
type TransferRecipients struct {
	// Details of a bank account to receive the bank transfer payment.
	BankAccount string
	// Bank account name.
	AccountName *string
	// Bank account number.
	AccountNumber string
	// 6-Digit Integer code for the bank that we allocate.
	BankCode string
	// Date of birth of the account owner.
	DateOfBirth *string
	// 3-digit ISO format currency code
	CurrencyCode string
	// Amount client is expected to receive.
	Amount string
	// Short description of the transaction displayed on the clients statement.
	Narration *string
	// A map of any metadata associated with the request.
	Metadata map[string]string
}

// A list of bank transfer entries.
type TransferEntries struct {
	// The account number of the bank transfer recipient.
	AccountNumber *string
	// The transaction has been accepted and queued for processing by the payment
	// provider.
	Status *string
	// A unique ID that our API generates for successful requests.
	TransactionID *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// A more descriptive error message for the status of this transaction.
	ErrorMessage *string
}

// Details of the payment card to be charged.
type PaymentCard struct {
	// Payment card number.
	Number string
	// 3 or 4 digit payment card verification value.
	CvvNumber int
	// Expiration month on the payment card.
	ExpiryMonth int
	// Expiration year on the payment card.
	ExpiryYear int
	// 2-Digit country code where the payment card was issued.
	CountryCode string
	// The payment cards ATM PIN.
	AuthToken string
}

type TransactionResponse struct {
	// Metadata sent by your application when it initiated this transaction.
	RequestMetadata map[string]string
	// Type of party providing funds for this transaction (the Debit Party).
	SourceType *string
	// Uniquely identifies the party providing the funds for this transaction
	Source *string
	// Payment provider that facilitated this transaction
	Provider *string
	// Identifies party receiving funds in this transaction (the Credit Party)
	DestinationType *string
	// Contains a detailed description of this transaction .
	Description *string
	// Name or number of the channel used to facilitate this payment by the
	// provider.
	ProviderChannel *string
	// Transaction fee charged by Africa’s Talking for this transaction.
	TransactionFee *string
	// Unique ID generated by the payment provider for this transaction.
	ProviderRefID *string
	// Map of any additional data received from a payment provider.
	ProviderMetadata map[string]string
	// Final status of this transaction.
	Status *string
	// Identifies the Africa’s Talking Payment Product used.
	ProductName *string
	// Category of the payment
	Category *string
	// Date and time when a successful transaction was completed.
	TransactionDate *string
	// Uniquely identifies the party receiving the funds for this transaction.
	Destination *string
	// Value being exchanged in this transaction.
	Value *string
	// Unique transactionId generated for every payment sent and received.
	TransactionID *string
	// Date and time when a transaction was accepted by our APIs.
	CreationTime *string
}

type WalletEntry struct {
	// Detailed description of this transaction
	Description *string
	// The remaining wallet balance after the transaction was processed.
	Balance *string
	// Category of the payment
	Category *string
	// Contains details of the specific transaction
	TransactionData FindTransactionResponseCollection
	// Value being exchanged in this transaction.
	Value *string
	// A unique transactionId generated for every payment sent and received
	TransactionID *string
}

type FindTransactionResponseCollection []*FindTransactionResponse

// A url encoded json list of Recipients
type AirtimeRecipients struct {
	// Phone number that will be topped up.
	PhoneNumber *string
	// Value of airtime to send together with the currency code.
	Amount *string
}

type AirtimeEntry struct {
	// Phone number for this transaction.
	PhoneNumber *string
	// Value of airtime requested.
	Amount *string
	// Discount applied to the requested airtime amount.
	Discount *string
	// Status of the request associated to this phone number
	Status *string
	// Unique ID for the request associated to this phone number
	RequestID *string
	// Error message for the request associated to this phone number.
	ErrorMessage *string
}

type UserData struct {
	// Your Africa’s Talking application balance.
	Balance *string
}

// NewBulkResponse initializes result type BulkResponse from viewed result type
// BulkResponse.
func NewBulkResponse(vres *africastalkingviews.BulkResponse) *BulkResponse {
	return newBulkResponse(vres.Projected)
}

// NewViewedBulkResponse initializes viewed result type BulkResponse from
// result type BulkResponse using the given view.
func NewViewedBulkResponse(res *BulkResponse, view string) *africastalkingviews.BulkResponse {
	p := newBulkResponseView(res)
	return &africastalkingviews.BulkResponse{Projected: p, View: "default"}
}

// NewPremiumSMSResponse initializes result type PremiumSMSResponse from viewed
// result type PremiumSMSResponse.
func NewPremiumSMSResponse(vres *africastalkingviews.PremiumSMSResponse) *PremiumSMSResponse {
	return newPremiumSMSResponse(vres.Projected)
}

// NewViewedPremiumSMSResponse initializes viewed result type
// PremiumSMSResponse from result type PremiumSMSResponse using the given view.
func NewViewedPremiumSMSResponse(res *PremiumSMSResponse, view string) *africastalkingviews.PremiumSMSResponse {
	p := newPremiumSMSResponseView(res)
	return &africastalkingviews.PremiumSMSResponse{Projected: p, View: "default"}
}

// NewFetchMsgResponse initializes result type FetchMsgResponse from viewed
// result type FetchMsgResponse.
func NewFetchMsgResponse(vres *africastalkingviews.FetchMsgResponse) *FetchMsgResponse {
	return newFetchMsgResponse(vres.Projected)
}

// NewViewedFetchMsgResponse initializes viewed result type FetchMsgResponse
// from result type FetchMsgResponse using the given view.
func NewViewedFetchMsgResponse(res *FetchMsgResponse, view string) *africastalkingviews.FetchMsgResponse {
	p := newFetchMsgResponseView(res)
	return &africastalkingviews.FetchMsgResponse{Projected: p, View: "default"}
}

// NewCheckoutTokenResponse initializes result type CheckoutTokenResponse from
// viewed result type CheckoutTokenResponse.
func NewCheckoutTokenResponse(vres *africastalkingviews.CheckoutTokenResponse) *CheckoutTokenResponse {
	return newCheckoutTokenResponse(vres.Projected)
}

// NewViewedCheckoutTokenResponse initializes viewed result type
// CheckoutTokenResponse from result type CheckoutTokenResponse using the given
// view.
func NewViewedCheckoutTokenResponse(res *CheckoutTokenResponse, view string) *africastalkingviews.CheckoutTokenResponse {
	p := newCheckoutTokenResponseView(res)
	return &africastalkingviews.CheckoutTokenResponse{Projected: p, View: "default"}
}

// NewNewSubResponse initializes result type NewSubResponse from viewed result
// type NewSubResponse.
func NewNewSubResponse(vres *africastalkingviews.NewSubResponse) *NewSubResponse {
	return newNewSubResponse(vres.Projected)
}

// NewViewedNewSubResponse initializes viewed result type NewSubResponse from
// result type NewSubResponse using the given view.
func NewViewedNewSubResponse(res *NewSubResponse, view string) *africastalkingviews.NewSubResponse {
	p := newNewSubResponseView(res)
	return &africastalkingviews.NewSubResponse{Projected: p, View: "default"}
}

// NewFetchSubResponse initializes result type FetchSubResponse from viewed
// result type FetchSubResponse.
func NewFetchSubResponse(vres *africastalkingviews.FetchSubResponse) *FetchSubResponse {
	return newFetchSubResponse(vres.Projected)
}

// NewViewedFetchSubResponse initializes viewed result type FetchSubResponse
// from result type FetchSubResponse using the given view.
func NewViewedFetchSubResponse(res *FetchSubResponse, view string) *africastalkingviews.FetchSubResponse {
	p := newFetchSubResponseView(res)
	return &africastalkingviews.FetchSubResponse{Projected: p, View: "default"}
}

// NewPurgeSubResponse initializes result type PurgeSubResponse from viewed
// result type PurgeSubResponse.
func NewPurgeSubResponse(vres *africastalkingviews.PurgeSubResponse) *PurgeSubResponse {
	return newPurgeSubResponse(vres.Projected)
}

// NewViewedPurgeSubResponse initializes viewed result type PurgeSubResponse
// from result type PurgeSubResponse using the given view.
func NewViewedPurgeSubResponse(res *PurgeSubResponse, view string) *africastalkingviews.PurgeSubResponse {
	p := newPurgeSubResponseView(res)
	return &africastalkingviews.PurgeSubResponse{Projected: p, View: "default"}
}

// NewMakeCallResponse initializes result type MakeCallResponse from viewed
// result type MakeCallResponse.
func NewMakeCallResponse(vres *africastalkingviews.MakeCallResponse) *MakeCallResponse {
	return newMakeCallResponse(vres.Projected)
}

// NewViewedMakeCallResponse initializes viewed result type MakeCallResponse
// from result type MakeCallResponse using the given view.
func NewViewedMakeCallResponse(res *MakeCallResponse, view string) *africastalkingviews.MakeCallResponse {
	p := newMakeCallResponseView(res)
	return &africastalkingviews.MakeCallResponse{Projected: p, View: "default"}
}

// NewCallTransferResponse initializes result type CallTransferResponse from
// viewed result type CallTransferResponse.
func NewCallTransferResponse(vres *africastalkingviews.CallTransferResponse) *CallTransferResponse {
	return newCallTransferResponse(vres.Projected)
}

// NewViewedCallTransferResponse initializes viewed result type
// CallTransferResponse from result type CallTransferResponse using the given
// view.
func NewViewedCallTransferResponse(res *CallTransferResponse, view string) *africastalkingviews.CallTransferResponse {
	p := newCallTransferResponseView(res)
	return &africastalkingviews.CallTransferResponse{Projected: p, View: "default"}
}

// NewQueuedStatusResult initializes result type QueuedStatusResult from viewed
// result type QueuedStatusResult.
func NewQueuedStatusResult(vres *africastalkingviews.QueuedStatusResult) *QueuedStatusResult {
	return newQueuedStatusResult(vres.Projected)
}

// NewViewedQueuedStatusResult initializes viewed result type
// QueuedStatusResult from result type QueuedStatusResult using the given view.
func NewViewedQueuedStatusResult(res *QueuedStatusResult, view string) *africastalkingviews.QueuedStatusResult {
	p := newQueuedStatusResultView(res)
	return &africastalkingviews.QueuedStatusResult{Projected: p, View: "default"}
}

// NewMobileCheckoutResponse initializes result type MobileCheckoutResponse
// from viewed result type MobileCheckoutResponse.
func NewMobileCheckoutResponse(vres *africastalkingviews.MobileCheckoutResponse) *MobileCheckoutResponse {
	return newMobileCheckoutResponse(vres.Projected)
}

// NewViewedMobileCheckoutResponse initializes viewed result type
// MobileCheckoutResponse from result type MobileCheckoutResponse using the
// given view.
func NewViewedMobileCheckoutResponse(res *MobileCheckoutResponse, view string) *africastalkingviews.MobileCheckoutResponse {
	p := newMobileCheckoutResponseView(res)
	return &africastalkingviews.MobileCheckoutResponse{Projected: p, View: "default"}
}

// NewMobileB2CResponse initializes result type MobileB2CResponse from viewed
// result type MobileB2CResponse.
func NewMobileB2CResponse(vres *africastalkingviews.MobileB2CResponse) *MobileB2CResponse {
	return newMobileB2CResponse(vres.Projected)
}

// NewViewedMobileB2CResponse initializes viewed result type MobileB2CResponse
// from result type MobileB2CResponse using the given view.
func NewViewedMobileB2CResponse(res *MobileB2CResponse, view string) *africastalkingviews.MobileB2CResponse {
	p := newMobileB2CResponseView(res)
	return &africastalkingviews.MobileB2CResponse{Projected: p, View: "default"}
}

// NewMobileB2BResponse initializes result type MobileB2BResponse from viewed
// result type MobileB2BResponse.
func NewMobileB2BResponse(vres *africastalkingviews.MobileB2BResponse) *MobileB2BResponse {
	return newMobileB2BResponse(vres.Projected)
}

// NewViewedMobileB2BResponse initializes viewed result type MobileB2BResponse
// from result type MobileB2BResponse using the given view.
func NewViewedMobileB2BResponse(res *MobileB2BResponse, view string) *africastalkingviews.MobileB2BResponse {
	p := newMobileB2BResponseView(res)
	return &africastalkingviews.MobileB2BResponse{Projected: p, View: "default"}
}

// NewBankCheckoutResponse initializes result type BankCheckoutResponse from
// viewed result type BankCheckoutResponse.
func NewBankCheckoutResponse(vres *africastalkingviews.BankCheckoutResponse) *BankCheckoutResponse {
	return newBankCheckoutResponse(vres.Projected)
}

// NewViewedBankCheckoutResponse initializes viewed result type
// BankCheckoutResponse from result type BankCheckoutResponse using the given
// view.
func NewViewedBankCheckoutResponse(res *BankCheckoutResponse, view string) *africastalkingviews.BankCheckoutResponse {
	p := newBankCheckoutResponseView(res)
	return &africastalkingviews.BankCheckoutResponse{Projected: p, View: "default"}
}

// NewBankCheckoutValidateResponse initializes result type
// BankCheckoutValidateResponse from viewed result type
// BankCheckoutValidateResponse.
func NewBankCheckoutValidateResponse(vres *africastalkingviews.BankCheckoutValidateResponse) *BankCheckoutValidateResponse {
	return newBankCheckoutValidateResponse(vres.Projected)
}

// NewViewedBankCheckoutValidateResponse initializes viewed result type
// BankCheckoutValidateResponse from result type BankCheckoutValidateResponse
// using the given view.
func NewViewedBankCheckoutValidateResponse(res *BankCheckoutValidateResponse, view string) *africastalkingviews.BankCheckoutValidateResponse {
	p := newBankCheckoutValidateResponseView(res)
	return &africastalkingviews.BankCheckoutValidateResponse{Projected: p, View: "default"}
}

// NewBankTransferResponse initializes result type BankTransferResponse from
// viewed result type BankTransferResponse.
func NewBankTransferResponse(vres *africastalkingviews.BankTransferResponse) *BankTransferResponse {
	return newBankTransferResponse(vres.Projected)
}

// NewViewedBankTransferResponse initializes viewed result type
// BankTransferResponse from result type BankTransferResponse using the given
// view.
func NewViewedBankTransferResponse(res *BankTransferResponse, view string) *africastalkingviews.BankTransferResponse {
	p := newBankTransferResponseView(res)
	return &africastalkingviews.BankTransferResponse{Projected: p, View: "default"}
}

// NewCardCheckoutResponse initializes result type CardCheckoutResponse from
// viewed result type CardCheckoutResponse.
func NewCardCheckoutResponse(vres *africastalkingviews.CardCheckoutResponse) *CardCheckoutResponse {
	return newCardCheckoutResponse(vres.Projected)
}

// NewViewedCardCheckoutResponse initializes viewed result type
// CardCheckoutResponse from result type CardCheckoutResponse using the given
// view.
func NewViewedCardCheckoutResponse(res *CardCheckoutResponse, view string) *africastalkingviews.CardCheckoutResponse {
	p := newCardCheckoutResponseView(res)
	return &africastalkingviews.CardCheckoutResponse{Projected: p, View: "default"}
}

// NewCardCheckoutValidateResponse initializes result type
// CardCheckoutValidateResponse from viewed result type
// CardCheckoutValidateResponse.
func NewCardCheckoutValidateResponse(vres *africastalkingviews.CardCheckoutValidateResponse) *CardCheckoutValidateResponse {
	return newCardCheckoutValidateResponse(vres.Projected)
}

// NewViewedCardCheckoutValidateResponse initializes viewed result type
// CardCheckoutValidateResponse from result type CardCheckoutValidateResponse
// using the given view.
func NewViewedCardCheckoutValidateResponse(res *CardCheckoutValidateResponse, view string) *africastalkingviews.CardCheckoutValidateResponse {
	p := newCardCheckoutValidateResponseView(res)
	return &africastalkingviews.CardCheckoutValidateResponse{Projected: p, View: "default"}
}

// NewWalletTransferResponse initializes result type WalletTransferResponse
// from viewed result type WalletTransferResponse.
func NewWalletTransferResponse(vres *africastalkingviews.WalletTransferResponse) *WalletTransferResponse {
	return newWalletTransferResponse(vres.Projected)
}

// NewViewedWalletTransferResponse initializes viewed result type
// WalletTransferResponse from result type WalletTransferResponse using the
// given view.
func NewViewedWalletTransferResponse(res *WalletTransferResponse, view string) *africastalkingviews.WalletTransferResponse {
	p := newWalletTransferResponseView(res)
	return &africastalkingviews.WalletTransferResponse{Projected: p, View: "default"}
}

// NewTopupStashResponse initializes result type TopupStashResponse from viewed
// result type TopupStashResponse.
func NewTopupStashResponse(vres *africastalkingviews.TopupStashResponse) *TopupStashResponse {
	return newTopupStashResponse(vres.Projected)
}

// NewViewedTopupStashResponse initializes viewed result type
// TopupStashResponse from result type TopupStashResponse using the given view.
func NewViewedTopupStashResponse(res *TopupStashResponse, view string) *africastalkingviews.TopupStashResponse {
	p := newTopupStashResponseView(res)
	return &africastalkingviews.TopupStashResponse{Projected: p, View: "default"}
}

// NewFindTransactionResponse initializes result type FindTransactionResponse
// from viewed result type FindTransactionResponse.
func NewFindTransactionResponse(vres *africastalkingviews.FindTransactionResponse) *FindTransactionResponse {
	return newFindTransactionResponse(vres.Projected)
}

// NewViewedFindTransactionResponse initializes viewed result type
// FindTransactionResponse from result type FindTransactionResponse using the
// given view.
func NewViewedFindTransactionResponse(res *FindTransactionResponse, view string) *africastalkingviews.FindTransactionResponse {
	p := newFindTransactionResponseView(res)
	return &africastalkingviews.FindTransactionResponse{Projected: p, View: "default"}
}

// NewProductTransactionsResponse initializes result type
// ProductTransactionsResponse from viewed result type
// ProductTransactionsResponse.
func NewProductTransactionsResponse(vres *africastalkingviews.ProductTransactionsResponse) *ProductTransactionsResponse {
	return newProductTransactionsResponse(vres.Projected)
}

// NewViewedProductTransactionsResponse initializes viewed result type
// ProductTransactionsResponse from result type ProductTransactionsResponse
// using the given view.
func NewViewedProductTransactionsResponse(res *ProductTransactionsResponse, view string) *africastalkingviews.ProductTransactionsResponse {
	p := newProductTransactionsResponseView(res)
	return &africastalkingviews.ProductTransactionsResponse{Projected: p, View: "default"}
}

// NewWalletTransactionsResponse initializes result type
// WalletTransactionsResponse from viewed result type
// WalletTransactionsResponse.
func NewWalletTransactionsResponse(vres *africastalkingviews.WalletTransactionsResponse) *WalletTransactionsResponse {
	return newWalletTransactionsResponse(vres.Projected)
}

// NewViewedWalletTransactionsResponse initializes viewed result type
// WalletTransactionsResponse from result type WalletTransactionsResponse using
// the given view.
func NewViewedWalletTransactionsResponse(res *WalletTransactionsResponse, view string) *africastalkingviews.WalletTransactionsResponse {
	p := newWalletTransactionsResponseView(res)
	return &africastalkingviews.WalletTransactionsResponse{Projected: p, View: "default"}
}

// NewWalletBalanceResponse initializes result type WalletBalanceResponse from
// viewed result type WalletBalanceResponse.
func NewWalletBalanceResponse(vres *africastalkingviews.WalletBalanceResponse) *WalletBalanceResponse {
	return newWalletBalanceResponse(vres.Projected)
}

// NewViewedWalletBalanceResponse initializes viewed result type
// WalletBalanceResponse from result type WalletBalanceResponse using the given
// view.
func NewViewedWalletBalanceResponse(res *WalletBalanceResponse, view string) *africastalkingviews.WalletBalanceResponse {
	p := newWalletBalanceResponseView(res)
	return &africastalkingviews.WalletBalanceResponse{Projected: p, View: "default"}
}

// NewAirtimeResponse initializes result type AirtimeResponse from viewed
// result type AirtimeResponse.
func NewAirtimeResponse(vres *africastalkingviews.AirtimeResponse) *AirtimeResponse {
	return newAirtimeResponse(vres.Projected)
}

// NewViewedAirtimeResponse initializes viewed result type AirtimeResponse from
// result type AirtimeResponse using the given view.
func NewViewedAirtimeResponse(res *AirtimeResponse, view string) *africastalkingviews.AirtimeResponse {
	p := newAirtimeResponseView(res)
	return &africastalkingviews.AirtimeResponse{Projected: p, View: "default"}
}

// NewIoTResponse initializes result type IoTResponse from viewed result type
// IoTResponse.
func NewIoTResponse(vres *africastalkingviews.IoTResponse) *IoTResponse {
	return newIoTResponse(vres.Projected)
}

// NewViewedIoTResponse initializes viewed result type IoTResponse from result
// type IoTResponse using the given view.
func NewViewedIoTResponse(res *IoTResponse, view string) *africastalkingviews.IoTResponse {
	p := newIoTResponseView(res)
	return &africastalkingviews.IoTResponse{Projected: p, View: "default"}
}

// NewUserResponse initializes result type UserResponse from viewed result type
// UserResponse.
func NewUserResponse(vres *africastalkingviews.UserResponse) *UserResponse {
	return newUserResponse(vres.Projected)
}

// NewViewedUserResponse initializes viewed result type UserResponse from
// result type UserResponse using the given view.
func NewViewedUserResponse(res *UserResponse, view string) *africastalkingviews.UserResponse {
	p := newUserResponseView(res)
	return &africastalkingviews.UserResponse{Projected: p, View: "default"}
}

// NewAccessTokenResponse initializes result type AccessTokenResponse from
// viewed result type AccessTokenResponse.
func NewAccessTokenResponse(vres *africastalkingviews.AccessTokenResponse) *AccessTokenResponse {
	return newAccessTokenResponse(vres.Projected)
}

// NewViewedAccessTokenResponse initializes viewed result type
// AccessTokenResponse from result type AccessTokenResponse using the given
// view.
func NewViewedAccessTokenResponse(res *AccessTokenResponse, view string) *africastalkingviews.AccessTokenResponse {
	p := newAccessTokenResponseView(res)
	return &africastalkingviews.AccessTokenResponse{Projected: p, View: "default"}
}

// newBulkResponse converts projected type BulkResponse to service type
// BulkResponse.
func newBulkResponse(vres *africastalkingviews.BulkResponseView) *BulkResponse {
	res := &BulkResponse{}
	if vres.SMSMessageData != nil {
		res.SMSMessageData = transformAfricastalkingviewsBulkSMSMessageDataViewToBulkSMSMessageData(vres.SMSMessageData)
	}
	return res
}

// newBulkResponseView projects result type BulkResponse to projected type
// BulkResponseView using the "default" view.
func newBulkResponseView(res *BulkResponse) *africastalkingviews.BulkResponseView {
	vres := &africastalkingviews.BulkResponseView{}
	if res.SMSMessageData != nil {
		vres.SMSMessageData = transformBulkSMSMessageDataToAfricastalkingviewsBulkSMSMessageDataView(res.SMSMessageData)
	}
	return vres
}

// newPremiumSMSResponse converts projected type PremiumSMSResponse to service
// type PremiumSMSResponse.
func newPremiumSMSResponse(vres *africastalkingviews.PremiumSMSResponseView) *PremiumSMSResponse {
	res := &PremiumSMSResponse{}
	if vres.SMSMessageData != nil {
		res.SMSMessageData = transformAfricastalkingviewsPremiumSMSMessageDataViewToPremiumSMSMessageData(vres.SMSMessageData)
	}
	return res
}

// newPremiumSMSResponseView projects result type PremiumSMSResponse to
// projected type PremiumSMSResponseView using the "default" view.
func newPremiumSMSResponseView(res *PremiumSMSResponse) *africastalkingviews.PremiumSMSResponseView {
	vres := &africastalkingviews.PremiumSMSResponseView{}
	if res.SMSMessageData != nil {
		vres.SMSMessageData = transformPremiumSMSMessageDataToAfricastalkingviewsPremiumSMSMessageDataView(res.SMSMessageData)
	}
	return vres
}

// newFetchMsgResponse converts projected type FetchMsgResponse to service type
// FetchMsgResponse.
func newFetchMsgResponse(vres *africastalkingviews.FetchMsgResponseView) *FetchMsgResponse {
	res := &FetchMsgResponse{}
	if vres.SMSMessageData != nil {
		res.SMSMessageData = transformAfricastalkingviewsFetchSMSMessageDataViewToFetchSMSMessageData(vres.SMSMessageData)
	}
	return res
}

// newFetchMsgResponseView projects result type FetchMsgResponse to projected
// type FetchMsgResponseView using the "default" view.
func newFetchMsgResponseView(res *FetchMsgResponse) *africastalkingviews.FetchMsgResponseView {
	vres := &africastalkingviews.FetchMsgResponseView{}
	if res.SMSMessageData != nil {
		vres.SMSMessageData = transformFetchSMSMessageDataToAfricastalkingviewsFetchSMSMessageDataView(res.SMSMessageData)
	}
	return vres
}

// newCheckoutTokenResponse converts projected type CheckoutTokenResponse to
// service type CheckoutTokenResponse.
func newCheckoutTokenResponse(vres *africastalkingviews.CheckoutTokenResponseView) *CheckoutTokenResponse {
	res := &CheckoutTokenResponse{
		Description: vres.Description,
		Token:       vres.Token,
	}
	return res
}

// newCheckoutTokenResponseView projects result type CheckoutTokenResponse to
// projected type CheckoutTokenResponseView using the "default" view.
func newCheckoutTokenResponseView(res *CheckoutTokenResponse) *africastalkingviews.CheckoutTokenResponseView {
	vres := &africastalkingviews.CheckoutTokenResponseView{
		Description: res.Description,
		Token:       res.Token,
	}
	return vres
}

// newNewSubResponse converts projected type NewSubResponse to service type
// NewSubResponse.
func newNewSubResponse(vres *africastalkingviews.NewSubResponseView) *NewSubResponse {
	res := &NewSubResponse{
		Status:      vres.Status,
		Description: vres.Description,
	}
	return res
}

// newNewSubResponseView projects result type NewSubResponse to projected type
// NewSubResponseView using the "default" view.
func newNewSubResponseView(res *NewSubResponse) *africastalkingviews.NewSubResponseView {
	vres := &africastalkingviews.NewSubResponseView{
		Status:      res.Status,
		Description: res.Description,
	}
	return vres
}

// newFetchSubResponse converts projected type FetchSubResponse to service type
// FetchSubResponse.
func newFetchSubResponse(vres *africastalkingviews.FetchSubResponseView) *FetchSubResponse {
	res := &FetchSubResponse{}
	if vres.Subscriptions != nil {
		res.Subscriptions = make([]*Subscriptions, len(vres.Subscriptions))
		for i, val := range vres.Subscriptions {
			res.Subscriptions[i] = transformAfricastalkingviewsSubscriptionsViewToSubscriptions(val)
		}
	}
	return res
}

// newFetchSubResponseView projects result type FetchSubResponse to projected
// type FetchSubResponseView using the "default" view.
func newFetchSubResponseView(res *FetchSubResponse) *africastalkingviews.FetchSubResponseView {
	vres := &africastalkingviews.FetchSubResponseView{}
	if res.Subscriptions != nil {
		vres.Subscriptions = make([]*africastalkingviews.SubscriptionsView, len(res.Subscriptions))
		for i, val := range res.Subscriptions {
			vres.Subscriptions[i] = transformSubscriptionsToAfricastalkingviewsSubscriptionsView(val)
		}
	}
	return vres
}

// newPurgeSubResponse converts projected type PurgeSubResponse to service type
// PurgeSubResponse.
func newPurgeSubResponse(vres *africastalkingviews.PurgeSubResponseView) *PurgeSubResponse {
	res := &PurgeSubResponse{
		Status:      vres.Status,
		Description: vres.Description,
	}
	return res
}

// newPurgeSubResponseView projects result type PurgeSubResponse to projected
// type PurgeSubResponseView using the "default" view.
func newPurgeSubResponseView(res *PurgeSubResponse) *africastalkingviews.PurgeSubResponseView {
	vres := &africastalkingviews.PurgeSubResponseView{
		Status:      res.Status,
		Description: res.Description,
	}
	return vres
}

// newMakeCallResponse converts projected type MakeCallResponse to service type
// MakeCallResponse.
func newMakeCallResponse(vres *africastalkingviews.MakeCallResponseView) *MakeCallResponse {
	res := &MakeCallResponse{
		ErrorMessage: vres.ErrorMessage,
	}
	if vres.Entries != nil {
		res.Entries = make([]*VoiceEntry, len(vres.Entries))
		for i, val := range vres.Entries {
			res.Entries[i] = transformAfricastalkingviewsVoiceEntryViewToVoiceEntry(val)
		}
	}
	return res
}

// newMakeCallResponseView projects result type MakeCallResponse to projected
// type MakeCallResponseView using the "default" view.
func newMakeCallResponseView(res *MakeCallResponse) *africastalkingviews.MakeCallResponseView {
	vres := &africastalkingviews.MakeCallResponseView{
		ErrorMessage: res.ErrorMessage,
	}
	if res.Entries != nil {
		vres.Entries = make([]*africastalkingviews.VoiceEntryView, len(res.Entries))
		for i, val := range res.Entries {
			vres.Entries[i] = transformVoiceEntryToAfricastalkingviewsVoiceEntryView(val)
		}
	}
	return vres
}

// newCallTransferResponse converts projected type CallTransferResponse to
// service type CallTransferResponse.
func newCallTransferResponse(vres *africastalkingviews.CallTransferResponseView) *CallTransferResponse {
	res := &CallTransferResponse{
		Status:       vres.Status,
		ErrorMessage: vres.ErrorMessage,
	}
	return res
}

// newCallTransferResponseView projects result type CallTransferResponse to
// projected type CallTransferResponseView using the "default" view.
func newCallTransferResponseView(res *CallTransferResponse) *africastalkingviews.CallTransferResponseView {
	vres := &africastalkingviews.CallTransferResponseView{
		Status:       res.Status,
		ErrorMessage: res.ErrorMessage,
	}
	return vres
}

// newQueuedStatusResult converts projected type QueuedStatusResult to service
// type QueuedStatusResult.
func newQueuedStatusResult(vres *africastalkingviews.QueuedStatusResultView) *QueuedStatusResult {
	res := &QueuedStatusResult{
		ErrorMessage: vres.ErrorMessage,
	}
	if vres.Entries != nil {
		res.Entries = make([]*QueuedStatusEntry, len(vres.Entries))
		for i, val := range vres.Entries {
			res.Entries[i] = transformAfricastalkingviewsQueuedStatusEntryViewToQueuedStatusEntry(val)
		}
	}
	return res
}

// newQueuedStatusResultView projects result type QueuedStatusResult to
// projected type QueuedStatusResultView using the "default" view.
func newQueuedStatusResultView(res *QueuedStatusResult) *africastalkingviews.QueuedStatusResultView {
	vres := &africastalkingviews.QueuedStatusResultView{
		ErrorMessage: res.ErrorMessage,
	}
	if res.Entries != nil {
		vres.Entries = make([]*africastalkingviews.QueuedStatusEntryView, len(res.Entries))
		for i, val := range res.Entries {
			vres.Entries[i] = transformQueuedStatusEntryToAfricastalkingviewsQueuedStatusEntryView(val)
		}
	}
	return vres
}

// newMobileCheckoutResponse converts projected type MobileCheckoutResponse to
// service type MobileCheckoutResponse.
func newMobileCheckoutResponse(vres *africastalkingviews.MobileCheckoutResponseView) *MobileCheckoutResponse {
	res := &MobileCheckoutResponse{
		Status:          vres.Status,
		Description:     vres.Description,
		TransactionID:   vres.TransactionID,
		ProviderChannel: vres.ProviderChannel,
	}
	return res
}

// newMobileCheckoutResponseView projects result type MobileCheckoutResponse to
// projected type MobileCheckoutResponseView using the "default" view.
func newMobileCheckoutResponseView(res *MobileCheckoutResponse) *africastalkingviews.MobileCheckoutResponseView {
	vres := &africastalkingviews.MobileCheckoutResponseView{
		Status:          res.Status,
		Description:     res.Description,
		TransactionID:   res.TransactionID,
		ProviderChannel: res.ProviderChannel,
	}
	return vres
}

// newMobileB2CResponse converts projected type MobileB2CResponse to service
// type MobileB2CResponse.
func newMobileB2CResponse(vres *africastalkingviews.MobileB2CResponseView) *MobileB2CResponse {
	res := &MobileB2CResponse{
		NumQueued:           vres.NumQueued,
		TotalValue:          vres.TotalValue,
		TotalTransactionFee: vres.TotalTransactionFee,
		ErrorMessage:        vres.ErrorMessage,
	}
	if vres.Entries != nil {
		res.Entries = make([]*B2CEntry, len(vres.Entries))
		for i, val := range vres.Entries {
			res.Entries[i] = transformAfricastalkingviewsB2CEntryViewToB2CEntry(val)
		}
	}
	return res
}

// newMobileB2CResponseView projects result type MobileB2CResponse to projected
// type MobileB2CResponseView using the "default" view.
func newMobileB2CResponseView(res *MobileB2CResponse) *africastalkingviews.MobileB2CResponseView {
	vres := &africastalkingviews.MobileB2CResponseView{
		NumQueued:           res.NumQueued,
		TotalValue:          res.TotalValue,
		TotalTransactionFee: res.TotalTransactionFee,
		ErrorMessage:        res.ErrorMessage,
	}
	if res.Entries != nil {
		vres.Entries = make([]*africastalkingviews.B2CEntryView, len(res.Entries))
		for i, val := range res.Entries {
			vres.Entries[i] = transformB2CEntryToAfricastalkingviewsB2CEntryView(val)
		}
	}
	return vres
}

// newMobileB2BResponse converts projected type MobileB2BResponse to service
// type MobileB2BResponse.
func newMobileB2BResponse(vres *africastalkingviews.MobileB2BResponseView) *MobileB2BResponse {
	res := &MobileB2BResponse{
		TransactionID:   vres.TransactionID,
		TransactionFee:  vres.TransactionFee,
		ProviderChannel: vres.ProviderChannel,
		ErrorMessage:    vres.ErrorMessage,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	return res
}

// newMobileB2BResponseView projects result type MobileB2BResponse to projected
// type MobileB2BResponseView using the "default" view.
func newMobileB2BResponseView(res *MobileB2BResponse) *africastalkingviews.MobileB2BResponseView {
	vres := &africastalkingviews.MobileB2BResponseView{
		Status:          &res.Status,
		TransactionID:   res.TransactionID,
		TransactionFee:  res.TransactionFee,
		ProviderChannel: res.ProviderChannel,
		ErrorMessage:    res.ErrorMessage,
	}
	return vres
}

// newBankCheckoutResponse converts projected type BankCheckoutResponse to
// service type BankCheckoutResponse.
func newBankCheckoutResponse(vres *africastalkingviews.BankCheckoutResponseView) *BankCheckoutResponse {
	res := &BankCheckoutResponse{
		Status:        vres.Status,
		Description:   vres.Description,
		TransactionID: vres.TransactionID,
	}
	return res
}

// newBankCheckoutResponseView projects result type BankCheckoutResponse to
// projected type BankCheckoutResponseView using the "default" view.
func newBankCheckoutResponseView(res *BankCheckoutResponse) *africastalkingviews.BankCheckoutResponseView {
	vres := &africastalkingviews.BankCheckoutResponseView{
		Status:        res.Status,
		Description:   res.Description,
		TransactionID: res.TransactionID,
	}
	return vres
}

// newBankCheckoutValidateResponse converts projected type
// BankCheckoutValidateResponse to service type BankCheckoutValidateResponse.
func newBankCheckoutValidateResponse(vres *africastalkingviews.BankCheckoutValidateResponseView) *BankCheckoutValidateResponse {
	res := &BankCheckoutValidateResponse{
		Status:      vres.Status,
		Description: vres.Description,
	}
	return res
}

// newBankCheckoutValidateResponseView projects result type
// BankCheckoutValidateResponse to projected type
// BankCheckoutValidateResponseView using the "default" view.
func newBankCheckoutValidateResponseView(res *BankCheckoutValidateResponse) *africastalkingviews.BankCheckoutValidateResponseView {
	vres := &africastalkingviews.BankCheckoutValidateResponseView{
		Status:      res.Status,
		Description: res.Description,
	}
	return vres
}

// newBankTransferResponse converts projected type BankTransferResponse to
// service type BankTransferResponse.
func newBankTransferResponse(vres *africastalkingviews.BankTransferResponseView) *BankTransferResponse {
	res := &BankTransferResponse{
		ErrorMessage: vres.ErrorMessage,
	}
	if vres.Entries != nil {
		res.Entries = make([]*TransferEntries, len(vres.Entries))
		for i, val := range vres.Entries {
			res.Entries[i] = transformAfricastalkingviewsTransferEntriesViewToTransferEntries(val)
		}
	}
	return res
}

// newBankTransferResponseView projects result type BankTransferResponse to
// projected type BankTransferResponseView using the "default" view.
func newBankTransferResponseView(res *BankTransferResponse) *africastalkingviews.BankTransferResponseView {
	vres := &africastalkingviews.BankTransferResponseView{
		ErrorMessage: res.ErrorMessage,
	}
	if res.Entries != nil {
		vres.Entries = make([]*africastalkingviews.TransferEntriesView, len(res.Entries))
		for i, val := range res.Entries {
			vres.Entries[i] = transformTransferEntriesToAfricastalkingviewsTransferEntriesView(val)
		}
	}
	return vres
}

// newCardCheckoutResponse converts projected type CardCheckoutResponse to
// service type CardCheckoutResponse.
func newCardCheckoutResponse(vres *africastalkingviews.CardCheckoutResponseView) *CardCheckoutResponse {
	res := &CardCheckoutResponse{
		TransactionID: vres.TransactionID,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	return res
}

// newCardCheckoutResponseView projects result type CardCheckoutResponse to
// projected type CardCheckoutResponseView using the "default" view.
func newCardCheckoutResponseView(res *CardCheckoutResponse) *africastalkingviews.CardCheckoutResponseView {
	vres := &africastalkingviews.CardCheckoutResponseView{
		Status:        &res.Status,
		Description:   &res.Description,
		TransactionID: res.TransactionID,
	}
	return vres
}

// newCardCheckoutValidateResponse converts projected type
// CardCheckoutValidateResponse to service type CardCheckoutValidateResponse.
func newCardCheckoutValidateResponse(vres *africastalkingviews.CardCheckoutValidateResponseView) *CardCheckoutValidateResponse {
	res := &CardCheckoutValidateResponse{
		CheckoutToken: vres.CheckoutToken,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	return res
}

// newCardCheckoutValidateResponseView projects result type
// CardCheckoutValidateResponse to projected type
// CardCheckoutValidateResponseView using the "default" view.
func newCardCheckoutValidateResponseView(res *CardCheckoutValidateResponse) *africastalkingviews.CardCheckoutValidateResponseView {
	vres := &africastalkingviews.CardCheckoutValidateResponseView{
		Status:        &res.Status,
		Description:   &res.Description,
		CheckoutToken: res.CheckoutToken,
	}
	return vres
}

// newWalletTransferResponse converts projected type WalletTransferResponse to
// service type WalletTransferResponse.
func newWalletTransferResponse(vres *africastalkingviews.WalletTransferResponseView) *WalletTransferResponse {
	res := &WalletTransferResponse{
		TransactionID: vres.TransactionID,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	return res
}

// newWalletTransferResponseView projects result type WalletTransferResponse to
// projected type WalletTransferResponseView using the "default" view.
func newWalletTransferResponseView(res *WalletTransferResponse) *africastalkingviews.WalletTransferResponseView {
	vres := &africastalkingviews.WalletTransferResponseView{
		Status:        &res.Status,
		Description:   &res.Description,
		TransactionID: res.TransactionID,
	}
	return vres
}

// newTopupStashResponse converts projected type TopupStashResponse to service
// type TopupStashResponse.
func newTopupStashResponse(vres *africastalkingviews.TopupStashResponseView) *TopupStashResponse {
	res := &TopupStashResponse{
		TransactionID: vres.TransactionID,
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.Description != nil {
		res.Description = *vres.Description
	}
	return res
}

// newTopupStashResponseView projects result type TopupStashResponse to
// projected type TopupStashResponseView using the "default" view.
func newTopupStashResponseView(res *TopupStashResponse) *africastalkingviews.TopupStashResponseView {
	vres := &africastalkingviews.TopupStashResponseView{
		Status:        &res.Status,
		Description:   &res.Description,
		TransactionID: res.TransactionID,
	}
	return vres
}

// newFindTransactionResponse converts projected type FindTransactionResponse
// to service type FindTransactionResponse.
func newFindTransactionResponse(vres *africastalkingviews.FindTransactionResponseView) *FindTransactionResponse {
	res := &FindTransactionResponse{
		Status:       vres.Status,
		ErrorMessage: vres.ErrorMessage,
	}
	if vres.Data != nil {
		res.Data = transformAfricastalkingviewsTransactionResponseViewToTransactionResponse(vres.Data)
	}
	return res
}

// newFindTransactionResponseView projects result type FindTransactionResponse
// to projected type FindTransactionResponseView using the "default" view.
func newFindTransactionResponseView(res *FindTransactionResponse) *africastalkingviews.FindTransactionResponseView {
	vres := &africastalkingviews.FindTransactionResponseView{
		Status:       res.Status,
		ErrorMessage: res.ErrorMessage,
	}
	if res.Data != nil {
		vres.Data = transformTransactionResponseToAfricastalkingviewsTransactionResponseView(res.Data)
	}
	return vres
}

// newProductTransactionsResponse converts projected type
// ProductTransactionsResponse to service type ProductTransactionsResponse.
func newProductTransactionsResponse(vres *africastalkingviews.ProductTransactionsResponseView) *ProductTransactionsResponse {
	res := &ProductTransactionsResponse{
		Status: vres.Status,
	}
	if vres.Responses != nil {
		res.Responses = make([]*TransactionResponse, len(vres.Responses))
		for i, val := range vres.Responses {
			res.Responses[i] = transformAfricastalkingviewsTransactionResponseViewToTransactionResponse(val)
		}
	}
	return res
}

// newProductTransactionsResponseView projects result type
// ProductTransactionsResponse to projected type
// ProductTransactionsResponseView using the "default" view.
func newProductTransactionsResponseView(res *ProductTransactionsResponse) *africastalkingviews.ProductTransactionsResponseView {
	vres := &africastalkingviews.ProductTransactionsResponseView{
		Status: res.Status,
	}
	if res.Responses != nil {
		vres.Responses = make([]*africastalkingviews.TransactionResponseView, len(res.Responses))
		for i, val := range res.Responses {
			vres.Responses[i] = transformTransactionResponseToAfricastalkingviewsTransactionResponseView(val)
		}
	}
	return vres
}

// newWalletTransactionsResponse converts projected type
// WalletTransactionsResponse to service type WalletTransactionsResponse.
func newWalletTransactionsResponse(vres *africastalkingviews.WalletTransactionsResponseView) *WalletTransactionsResponse {
	res := &WalletTransactionsResponse{
		Status:       vres.Status,
		ErrorMessage: vres.ErrorMessage,
	}
	if vres.Responses != nil {
		res.Responses = make([]*WalletEntry, len(vres.Responses))
		for i, val := range vres.Responses {
			res.Responses[i] = transformAfricastalkingviewsWalletEntryViewToWalletEntry(val)
		}
	}
	return res
}

// newWalletTransactionsResponseView projects result type
// WalletTransactionsResponse to projected type WalletTransactionsResponseView
// using the "default" view.
func newWalletTransactionsResponseView(res *WalletTransactionsResponse) *africastalkingviews.WalletTransactionsResponseView {
	vres := &africastalkingviews.WalletTransactionsResponseView{
		Status:       res.Status,
		ErrorMessage: res.ErrorMessage,
	}
	if res.Responses != nil {
		vres.Responses = make([]*africastalkingviews.WalletEntryView, len(res.Responses))
		for i, val := range res.Responses {
			vres.Responses[i] = transformWalletEntryToAfricastalkingviewsWalletEntryView(val)
		}
	}
	return vres
}

// newFindTransactionResponseCollection converts projected type
// FindTransactionResponseCollection to service type
// FindTransactionResponseCollection.
func newFindTransactionResponseCollection(vres africastalkingviews.FindTransactionResponseCollectionView) FindTransactionResponseCollection {
	res := make(FindTransactionResponseCollection, len(vres))
	for i, n := range vres {
		res[i] = newFindTransactionResponse(n)
	}
	return res
}

// newFindTransactionResponseCollectionView projects result type
// FindTransactionResponseCollection to projected type
// FindTransactionResponseCollectionView using the "default" view.
func newFindTransactionResponseCollectionView(res FindTransactionResponseCollection) africastalkingviews.FindTransactionResponseCollectionView {
	vres := make(africastalkingviews.FindTransactionResponseCollectionView, len(res))
	for i, n := range res {
		vres[i] = newFindTransactionResponseView(n)
	}
	return vres
}

// newWalletBalanceResponse converts projected type WalletBalanceResponse to
// service type WalletBalanceResponse.
func newWalletBalanceResponse(vres *africastalkingviews.WalletBalanceResponseView) *WalletBalanceResponse {
	res := &WalletBalanceResponse{
		Status:       vres.Status,
		Balance:      vres.Balance,
		ErrorMessage: vres.ErrorMessage,
	}
	return res
}

// newWalletBalanceResponseView projects result type WalletBalanceResponse to
// projected type WalletBalanceResponseView using the "default" view.
func newWalletBalanceResponseView(res *WalletBalanceResponse) *africastalkingviews.WalletBalanceResponseView {
	vres := &africastalkingviews.WalletBalanceResponseView{
		Status:       res.Status,
		Balance:      res.Balance,
		ErrorMessage: res.ErrorMessage,
	}
	return vres
}

// newAirtimeResponse converts projected type AirtimeResponse to service type
// AirtimeResponse.
func newAirtimeResponse(vres *africastalkingviews.AirtimeResponseView) *AirtimeResponse {
	res := &AirtimeResponse{
		NumSent:       vres.NumSent,
		TotalAmount:   vres.TotalAmount,
		TotalDiscount: vres.TotalDiscount,
		ErrorMessage:  vres.ErrorMessage,
	}
	if vres.Responses != nil {
		res.Responses = make([]*AirtimeEntry, len(vres.Responses))
		for i, val := range vres.Responses {
			res.Responses[i] = transformAfricastalkingviewsAirtimeEntryViewToAirtimeEntry(val)
		}
	}
	return res
}

// newAirtimeResponseView projects result type AirtimeResponse to projected
// type AirtimeResponseView using the "default" view.
func newAirtimeResponseView(res *AirtimeResponse) *africastalkingviews.AirtimeResponseView {
	vres := &africastalkingviews.AirtimeResponseView{
		NumSent:       res.NumSent,
		TotalAmount:   res.TotalAmount,
		TotalDiscount: res.TotalDiscount,
		ErrorMessage:  res.ErrorMessage,
	}
	if res.Responses != nil {
		vres.Responses = make([]*africastalkingviews.AirtimeEntryView, len(res.Responses))
		for i, val := range res.Responses {
			vres.Responses[i] = transformAirtimeEntryToAfricastalkingviewsAirtimeEntryView(val)
		}
	}
	return vres
}

// newIoTResponse converts projected type IoTResponse to service type
// IoTResponse.
func newIoTResponse(vres *africastalkingviews.IoTResponseView) *IoTResponse {
	res := &IoTResponse{
		Status:      vres.Status,
		Description: vres.Description,
	}
	return res
}

// newIoTResponseView projects result type IoTResponse to projected type
// IoTResponseView using the "default" view.
func newIoTResponseView(res *IoTResponse) *africastalkingviews.IoTResponseView {
	vres := &africastalkingviews.IoTResponseView{
		Status:      res.Status,
		Description: res.Description,
	}
	return vres
}

// newUserResponse converts projected type UserResponse to service type
// UserResponse.
func newUserResponse(vres *africastalkingviews.UserResponseView) *UserResponse {
	res := &UserResponse{}
	if vres.UserData != nil {
		res.UserData = transformAfricastalkingviewsUserDataViewToUserData(vres.UserData)
	}
	return res
}

// newUserResponseView projects result type UserResponse to projected type
// UserResponseView using the "default" view.
func newUserResponseView(res *UserResponse) *africastalkingviews.UserResponseView {
	vres := &africastalkingviews.UserResponseView{}
	if res.UserData != nil {
		vres.UserData = transformUserDataToAfricastalkingviewsUserDataView(res.UserData)
	}
	return vres
}

// newAccessTokenResponse converts projected type AccessTokenResponse to
// service type AccessTokenResponse.
func newAccessTokenResponse(vres *africastalkingviews.AccessTokenResponseView) *AccessTokenResponse {
	res := &AccessTokenResponse{}
	if vres.Token != nil {
		res.Token = *vres.Token
	}
	if vres.LifetimeInSeconds != nil {
		res.LifetimeInSeconds = *vres.LifetimeInSeconds
	}
	return res
}

// newAccessTokenResponseView projects result type AccessTokenResponse to
// projected type AccessTokenResponseView using the "default" view.
func newAccessTokenResponseView(res *AccessTokenResponse) *africastalkingviews.AccessTokenResponseView {
	vres := &africastalkingviews.AccessTokenResponseView{
		Token:             &res.Token,
		LifetimeInSeconds: &res.LifetimeInSeconds,
	}
	return vres
}

// transformAfricastalkingviewsBulkSMSMessageDataViewToBulkSMSMessageData
// builds a value of type *BulkSMSMessageData from a value of type
// *africastalkingviews.BulkSMSMessageDataView.
func transformAfricastalkingviewsBulkSMSMessageDataViewToBulkSMSMessageData(v *africastalkingviews.BulkSMSMessageDataView) *BulkSMSMessageData {
	if v == nil {
		return nil
	}
	res := &BulkSMSMessageData{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*Recipients, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = transformAfricastalkingviewsRecipientsViewToRecipients(val)
		}
	}

	return res
}

// transformAfricastalkingviewsRecipientsViewToRecipients builds a value of
// type *Recipients from a value of type *africastalkingviews.RecipientsView.
func transformAfricastalkingviewsRecipientsViewToRecipients(v *africastalkingviews.RecipientsView) *Recipients {
	if v == nil {
		return nil
	}
	res := &Recipients{
		StatusCode: v.StatusCode,
		Number:     v.Number,
		Status:     v.Status,
		Cost:       v.Cost,
		MessageID:  v.MessageID,
	}

	return res
}

// transformBulkSMSMessageDataToAfricastalkingviewsBulkSMSMessageDataView
// builds a value of type *africastalkingviews.BulkSMSMessageDataView from a
// value of type *BulkSMSMessageData.
func transformBulkSMSMessageDataToAfricastalkingviewsBulkSMSMessageDataView(v *BulkSMSMessageData) *africastalkingviews.BulkSMSMessageDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.BulkSMSMessageDataView{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*africastalkingviews.RecipientsView, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = transformRecipientsToAfricastalkingviewsRecipientsView(val)
		}
	}

	return res
}

// transformRecipientsToAfricastalkingviewsRecipientsView builds a value of
// type *africastalkingviews.RecipientsView from a value of type *Recipients.
func transformRecipientsToAfricastalkingviewsRecipientsView(v *Recipients) *africastalkingviews.RecipientsView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.RecipientsView{
		StatusCode: v.StatusCode,
		Number:     v.Number,
		Status:     v.Status,
		Cost:       v.Cost,
		MessageID:  v.MessageID,
	}

	return res
}

// transformAfricastalkingviewsPremiumSMSMessageDataViewToPremiumSMSMessageData
// builds a value of type *PremiumSMSMessageData from a value of type
// *africastalkingviews.PremiumSMSMessageDataView.
func transformAfricastalkingviewsPremiumSMSMessageDataViewToPremiumSMSMessageData(v *africastalkingviews.PremiumSMSMessageDataView) *PremiumSMSMessageData {
	if v == nil {
		return nil
	}
	res := &PremiumSMSMessageData{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*Recipients, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = transformAfricastalkingviewsRecipientsViewToRecipients(val)
		}
	}

	return res
}

// transformPremiumSMSMessageDataToAfricastalkingviewsPremiumSMSMessageDataView
// builds a value of type *africastalkingviews.PremiumSMSMessageDataView from a
// value of type *PremiumSMSMessageData.
func transformPremiumSMSMessageDataToAfricastalkingviewsPremiumSMSMessageDataView(v *PremiumSMSMessageData) *africastalkingviews.PremiumSMSMessageDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.PremiumSMSMessageDataView{
		Messages: v.Messages,
	}
	if v.Recipients != nil {
		res.Recipients = make([]*africastalkingviews.RecipientsView, len(v.Recipients))
		for i, val := range v.Recipients {
			res.Recipients[i] = transformRecipientsToAfricastalkingviewsRecipientsView(val)
		}
	}

	return res
}

// transformAfricastalkingviewsFetchSMSMessageDataViewToFetchSMSMessageData
// builds a value of type *FetchSMSMessageData from a value of type
// *africastalkingviews.FetchSMSMessageDataView.
func transformAfricastalkingviewsFetchSMSMessageDataViewToFetchSMSMessageData(v *africastalkingviews.FetchSMSMessageDataView) *FetchSMSMessageData {
	if v == nil {
		return nil
	}
	res := &FetchSMSMessageData{}
	if v.Messages != nil {
		res.Messages = make([]*Messages, len(v.Messages))
		for i, val := range v.Messages {
			res.Messages[i] = transformAfricastalkingviewsMessagesViewToMessages(val)
		}
	}

	return res
}

// transformAfricastalkingviewsMessagesViewToMessages builds a value of type
// *Messages from a value of type *africastalkingviews.MessagesView.
func transformAfricastalkingviewsMessagesViewToMessages(v *africastalkingviews.MessagesView) *Messages {
	if v == nil {
		return nil
	}
	res := &Messages{
		LinkID: v.LinkID,
		Text:   v.Text,
		To:     v.To,
		ID:     v.ID,
		Date:   v.Date,
		From:   v.From,
	}

	return res
}

// transformFetchSMSMessageDataToAfricastalkingviewsFetchSMSMessageDataView
// builds a value of type *africastalkingviews.FetchSMSMessageDataView from a
// value of type *FetchSMSMessageData.
func transformFetchSMSMessageDataToAfricastalkingviewsFetchSMSMessageDataView(v *FetchSMSMessageData) *africastalkingviews.FetchSMSMessageDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.FetchSMSMessageDataView{}
	if v.Messages != nil {
		res.Messages = make([]*africastalkingviews.MessagesView, len(v.Messages))
		for i, val := range v.Messages {
			res.Messages[i] = transformMessagesToAfricastalkingviewsMessagesView(val)
		}
	}

	return res
}

// transformMessagesToAfricastalkingviewsMessagesView builds a value of type
// *africastalkingviews.MessagesView from a value of type *Messages.
func transformMessagesToAfricastalkingviewsMessagesView(v *Messages) *africastalkingviews.MessagesView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.MessagesView{
		LinkID: v.LinkID,
		Text:   v.Text,
		To:     v.To,
		ID:     v.ID,
		Date:   v.Date,
		From:   v.From,
	}

	return res
}

// transformAfricastalkingviewsSubscriptionsViewToSubscriptions builds a value
// of type *Subscriptions from a value of type
// *africastalkingviews.SubscriptionsView.
func transformAfricastalkingviewsSubscriptionsViewToSubscriptions(v *africastalkingviews.SubscriptionsView) *Subscriptions {
	if v == nil {
		return nil
	}
	res := &Subscriptions{
		ID:     v.ID,
		Number: v.Number,
		Date:   v.Date,
	}

	return res
}

// transformSubscriptionsToAfricastalkingviewsSubscriptionsView builds a value
// of type *africastalkingviews.SubscriptionsView from a value of type
// *Subscriptions.
func transformSubscriptionsToAfricastalkingviewsSubscriptionsView(v *Subscriptions) *africastalkingviews.SubscriptionsView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.SubscriptionsView{
		ID:     v.ID,
		Number: v.Number,
		Date:   v.Date,
	}

	return res
}

// transformAfricastalkingviewsVoiceEntryViewToVoiceEntry builds a value of
// type *VoiceEntry from a value of type *africastalkingviews.VoiceEntryView.
func transformAfricastalkingviewsVoiceEntryViewToVoiceEntry(v *africastalkingviews.VoiceEntryView) *VoiceEntry {
	if v == nil {
		return nil
	}
	res := &VoiceEntry{
		PhoneNumber: v.PhoneNumber,
		Status:      v.Status,
	}
	if v.SessionID != nil {
		res.SessionID = *v.SessionID
	}
	if v.SessionID == nil {
		res.SessionID = "None"
	}

	return res
}

// transformVoiceEntryToAfricastalkingviewsVoiceEntryView builds a value of
// type *africastalkingviews.VoiceEntryView from a value of type *VoiceEntry.
func transformVoiceEntryToAfricastalkingviewsVoiceEntryView(v *VoiceEntry) *africastalkingviews.VoiceEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.VoiceEntryView{
		PhoneNumber: v.PhoneNumber,
		Status:      v.Status,
		SessionID:   &v.SessionID,
	}

	return res
}

// transformAfricastalkingviewsQueuedStatusEntryViewToQueuedStatusEntry builds
// a value of type *QueuedStatusEntry from a value of type
// *africastalkingviews.QueuedStatusEntryView.
func transformAfricastalkingviewsQueuedStatusEntryViewToQueuedStatusEntry(v *africastalkingviews.QueuedStatusEntryView) *QueuedStatusEntry {
	if v == nil {
		return nil
	}
	res := &QueuedStatusEntry{
		PhoneNumber: v.PhoneNumber,
		QueueName:   v.QueueName,
		NumCalls:    v.NumCalls,
	}

	return res
}

// transformQueuedStatusEntryToAfricastalkingviewsQueuedStatusEntryView builds
// a value of type *africastalkingviews.QueuedStatusEntryView from a value of
// type *QueuedStatusEntry.
func transformQueuedStatusEntryToAfricastalkingviewsQueuedStatusEntryView(v *QueuedStatusEntry) *africastalkingviews.QueuedStatusEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.QueuedStatusEntryView{
		PhoneNumber: v.PhoneNumber,
		QueueName:   v.QueueName,
		NumCalls:    v.NumCalls,
	}

	return res
}

// transformAfricastalkingviewsB2CEntryViewToB2CEntry builds a value of type
// *B2CEntry from a value of type *africastalkingviews.B2CEntryView.
func transformAfricastalkingviewsB2CEntryViewToB2CEntry(v *africastalkingviews.B2CEntryView) *B2CEntry {
	if v == nil {
		return nil
	}
	res := &B2CEntry{
		PhoneNumber:     *v.PhoneNumber,
		Status:          *v.Status,
		TransactionID:   v.TransactionID,
		Provider:        v.Provider,
		ProviderChannel: v.ProviderChannel,
		Value:           v.Value,
		TransactionFee:  v.TransactionFee,
		ErrorMessage:    v.ErrorMessage,
	}

	return res
}

// transformB2CEntryToAfricastalkingviewsB2CEntryView builds a value of type
// *africastalkingviews.B2CEntryView from a value of type *B2CEntry.
func transformB2CEntryToAfricastalkingviewsB2CEntryView(v *B2CEntry) *africastalkingviews.B2CEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.B2CEntryView{
		PhoneNumber:     &v.PhoneNumber,
		Status:          &v.Status,
		TransactionID:   v.TransactionID,
		Provider:        v.Provider,
		ProviderChannel: v.ProviderChannel,
		Value:           v.Value,
		TransactionFee:  v.TransactionFee,
		ErrorMessage:    v.ErrorMessage,
	}

	return res
}

// transformAfricastalkingviewsTransferEntriesViewToTransferEntries builds a
// value of type *TransferEntries from a value of type
// *africastalkingviews.TransferEntriesView.
func transformAfricastalkingviewsTransferEntriesViewToTransferEntries(v *africastalkingviews.TransferEntriesView) *TransferEntries {
	if v == nil {
		return nil
	}
	res := &TransferEntries{
		AccountNumber:  v.AccountNumber,
		Status:         v.Status,
		TransactionID:  v.TransactionID,
		TransactionFee: v.TransactionFee,
		ErrorMessage:   v.ErrorMessage,
	}

	return res
}

// transformTransferEntriesToAfricastalkingviewsTransferEntriesView builds a
// value of type *africastalkingviews.TransferEntriesView from a value of type
// *TransferEntries.
func transformTransferEntriesToAfricastalkingviewsTransferEntriesView(v *TransferEntries) *africastalkingviews.TransferEntriesView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.TransferEntriesView{
		AccountNumber:  v.AccountNumber,
		Status:         v.Status,
		TransactionID:  v.TransactionID,
		TransactionFee: v.TransactionFee,
		ErrorMessage:   v.ErrorMessage,
	}

	return res
}

// transformAfricastalkingviewsTransactionResponseViewToTransactionResponse
// builds a value of type *TransactionResponse from a value of type
// *africastalkingviews.TransactionResponseView.
func transformAfricastalkingviewsTransactionResponseViewToTransactionResponse(v *africastalkingviews.TransactionResponseView) *TransactionResponse {
	if v == nil {
		return nil
	}
	res := &TransactionResponse{
		SourceType:      v.SourceType,
		Source:          v.Source,
		Provider:        v.Provider,
		DestinationType: v.DestinationType,
		Description:     v.Description,
		ProviderChannel: v.ProviderChannel,
		TransactionFee:  v.TransactionFee,
		ProviderRefID:   v.ProviderRefID,
		Status:          v.Status,
		ProductName:     v.ProductName,
		Category:        v.Category,
		TransactionDate: v.TransactionDate,
		Destination:     v.Destination,
		Value:           v.Value,
		TransactionID:   v.TransactionID,
		CreationTime:    v.CreationTime,
	}
	if v.RequestMetadata != nil {
		res.RequestMetadata = make(map[string]string, len(v.RequestMetadata))
		for key, val := range v.RequestMetadata {
			tk := key
			tv := val
			res.RequestMetadata[tk] = tv
		}
	}
	if v.ProviderMetadata != nil {
		res.ProviderMetadata = make(map[string]string, len(v.ProviderMetadata))
		for key, val := range v.ProviderMetadata {
			tk := key
			tv := val
			res.ProviderMetadata[tk] = tv
		}
	}

	return res
}

// transformTransactionResponseToAfricastalkingviewsTransactionResponseView
// builds a value of type *africastalkingviews.TransactionResponseView from a
// value of type *TransactionResponse.
func transformTransactionResponseToAfricastalkingviewsTransactionResponseView(v *TransactionResponse) *africastalkingviews.TransactionResponseView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.TransactionResponseView{
		SourceType:      v.SourceType,
		Source:          v.Source,
		Provider:        v.Provider,
		DestinationType: v.DestinationType,
		Description:     v.Description,
		ProviderChannel: v.ProviderChannel,
		TransactionFee:  v.TransactionFee,
		ProviderRefID:   v.ProviderRefID,
		Status:          v.Status,
		ProductName:     v.ProductName,
		Category:        v.Category,
		TransactionDate: v.TransactionDate,
		Destination:     v.Destination,
		Value:           v.Value,
		TransactionID:   v.TransactionID,
		CreationTime:    v.CreationTime,
	}
	if v.RequestMetadata != nil {
		res.RequestMetadata = make(map[string]string, len(v.RequestMetadata))
		for key, val := range v.RequestMetadata {
			tk := key
			tv := val
			res.RequestMetadata[tk] = tv
		}
	}
	if v.ProviderMetadata != nil {
		res.ProviderMetadata = make(map[string]string, len(v.ProviderMetadata))
		for key, val := range v.ProviderMetadata {
			tk := key
			tv := val
			res.ProviderMetadata[tk] = tv
		}
	}

	return res
}

// transformAfricastalkingviewsWalletEntryViewToWalletEntry builds a value of
// type *WalletEntry from a value of type *africastalkingviews.WalletEntryView.
func transformAfricastalkingviewsWalletEntryViewToWalletEntry(v *africastalkingviews.WalletEntryView) *WalletEntry {
	if v == nil {
		return nil
	}
	res := &WalletEntry{
		Description:   v.Description,
		Balance:       v.Balance,
		Category:      v.Category,
		Value:         v.Value,
		TransactionID: v.TransactionID,
	}
	if v.TransactionData != nil {
		res.TransactionData = make([]*FindTransactionResponse, len(v.TransactionData))
		for i, val := range v.TransactionData {
			res.TransactionData[i] = transformAfricastalkingviewsFindTransactionResponseViewToFindTransactionResponse(val)
		}
	}

	return res
}

// transformAfricastalkingviewsFindTransactionResponseViewToFindTransactionResponse
// builds a value of type *FindTransactionResponse from a value of type
// *africastalkingviews.FindTransactionResponseView.
func transformAfricastalkingviewsFindTransactionResponseViewToFindTransactionResponse(v *africastalkingviews.FindTransactionResponseView) *FindTransactionResponse {
	if v == nil {
		return nil
	}
	res := &FindTransactionResponse{
		Status:       v.Status,
		ErrorMessage: v.ErrorMessage,
	}
	if v.Data != nil {
		res.Data = transformAfricastalkingviewsTransactionResponseViewToTransactionResponse(v.Data)
	}

	return res
}

// transformWalletEntryToAfricastalkingviewsWalletEntryView builds a value of
// type *africastalkingviews.WalletEntryView from a value of type *WalletEntry.
func transformWalletEntryToAfricastalkingviewsWalletEntryView(v *WalletEntry) *africastalkingviews.WalletEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.WalletEntryView{
		Description:   v.Description,
		Balance:       v.Balance,
		Category:      v.Category,
		Value:         v.Value,
		TransactionID: v.TransactionID,
	}
	if v.TransactionData != nil {
		res.TransactionData = make([]*africastalkingviews.FindTransactionResponseView, len(v.TransactionData))
		for i, val := range v.TransactionData {
			res.TransactionData[i] = transformFindTransactionResponseToAfricastalkingviewsFindTransactionResponseView(val)
		}
	}

	return res
}

// transformFindTransactionResponseToAfricastalkingviewsFindTransactionResponseView
// builds a value of type *africastalkingviews.FindTransactionResponseView from
// a value of type *FindTransactionResponse.
func transformFindTransactionResponseToAfricastalkingviewsFindTransactionResponseView(v *FindTransactionResponse) *africastalkingviews.FindTransactionResponseView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.FindTransactionResponseView{
		Status:       v.Status,
		ErrorMessage: v.ErrorMessage,
	}
	if v.Data != nil {
		res.Data = transformTransactionResponseToAfricastalkingviewsTransactionResponseView(v.Data)
	}

	return res
}

// transformAfricastalkingviewsAirtimeEntryViewToAirtimeEntry builds a value of
// type *AirtimeEntry from a value of type
// *africastalkingviews.AirtimeEntryView.
func transformAfricastalkingviewsAirtimeEntryViewToAirtimeEntry(v *africastalkingviews.AirtimeEntryView) *AirtimeEntry {
	if v == nil {
		return nil
	}
	res := &AirtimeEntry{
		PhoneNumber:  v.PhoneNumber,
		Amount:       v.Amount,
		Discount:     v.Discount,
		Status:       v.Status,
		RequestID:    v.RequestID,
		ErrorMessage: v.ErrorMessage,
	}

	return res
}

// transformAirtimeEntryToAfricastalkingviewsAirtimeEntryView builds a value of
// type *africastalkingviews.AirtimeEntryView from a value of type
// *AirtimeEntry.
func transformAirtimeEntryToAfricastalkingviewsAirtimeEntryView(v *AirtimeEntry) *africastalkingviews.AirtimeEntryView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.AirtimeEntryView{
		PhoneNumber:  v.PhoneNumber,
		Amount:       v.Amount,
		Discount:     v.Discount,
		Status:       v.Status,
		RequestID:    v.RequestID,
		ErrorMessage: v.ErrorMessage,
	}

	return res
}

// transformAfricastalkingviewsUserDataViewToUserData builds a value of type
// *UserData from a value of type *africastalkingviews.UserDataView.
func transformAfricastalkingviewsUserDataViewToUserData(v *africastalkingviews.UserDataView) *UserData {
	if v == nil {
		return nil
	}
	res := &UserData{
		Balance: v.Balance,
	}

	return res
}

// transformUserDataToAfricastalkingviewsUserDataView builds a value of type
// *africastalkingviews.UserDataView from a value of type *UserData.
func transformUserDataToAfricastalkingviewsUserDataView(v *UserData) *africastalkingviews.UserDataView {
	if v == nil {
		return nil
	}
	res := &africastalkingviews.UserDataView{
		Balance: v.Balance,
	}

	return res
}
