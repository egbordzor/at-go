// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP server
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package server

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	africastalking "github.com/wondenge/at-go/internal/pkg/gen/africastalking"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the africastalking service endpoint HTTP handlers.
type Server struct {
	Mounts                   []*MountPoint
	SendBulkSMS              http.Handler
	SendPremiumSMS           http.Handler
	FetchSMS                 http.Handler
	NewCheckoutToken         http.Handler
	NewPremiumSubscription   http.Handler
	FetchPremiumSubscription http.Handler
	PurgePremiumSubscription http.Handler
	MakeCall                 http.Handler
	TransferCall             http.Handler
	UploadMedia              http.Handler
	MobileCheckout           http.Handler
	MobileB2C                http.Handler
	MobileB2B                http.Handler
	BankCheckout             http.Handler
	BankCheckoutValidate     http.Handler
	BankTransfer             http.Handler
	CardCheckout             http.Handler
	CardCheckoutValidate     http.Handler
	WalletTransfer           http.Handler
	TopupStash               http.Handler
	FindTransaction          http.Handler
	FetchProductTransactions http.Handler
	FetchWalletTransactions  http.Handler
	FetchWalletBalance       http.Handler
	SendAirtime              http.Handler
	PublishIoT               http.Handler
	InitiateAppData          http.Handler
	Generate                 http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the africastalking service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *africastalking.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"SendBulkSMS", "POST", "/version1/messaging"},
			{"SendPremiumSMS", "POST", "/version1/messaging"},
			{"FetchSMS", "GET", "/version1/messaging"},
			{"NewCheckoutToken", "POST", "/checkout/token/create"},
			{"NewPremiumSubscription", "POST", "/version1/subscription/create"},
			{"FetchPremiumSubscription", "GET", "/version1/subscription"},
			{"PurgePremiumSubscription", "POST", "/version1/subscription/delete"},
			{"MakeCall", "POST", "/call"},
			{"TransferCall", "POST", "/callTransfer"},
			{"UploadMedia", "POST", "/mediaUpload"},
			{"MobileCheckout", "POST", "/mobile/checkout/request"},
			{"MobileB2C", "POST", "/mobile/b2c/request"},
			{"MobileB2B", "POST", "/mobile/b2b/request"},
			{"BankCheckout", "POST", "/bank/checkout/charge"},
			{"BankCheckoutValidate", "POST", "/bank/checkout/validate"},
			{"BankTransfer", "POST", "/bank/transfer"},
			{"CardCheckout", "POST", "/card/checkout/charge"},
			{"CardCheckoutValidate", "POST", "/card/checkout/validate"},
			{"WalletTransfer", "POST", "/transfer/wallet"},
			{"TopupStash", "POST", "/topup/stash"},
			{"FindTransaction", "GET", "/query/transaction/find"},
			{"FetchProductTransactions", "GET", "/query/transaction/fetch"},
			{"FetchWalletTransactions", "GET", "/query/wallet/fetch"},
			{"FetchWalletBalance", "GET", "/query/wallet/balance"},
			{"SendAirtime", "POST", "/version1/airtime/send"},
			{"PublishIoT", "POST", "/data/publish"},
			{"InitiateAppData", "GET", "/version1/user"},
			{"Generate", "POST", "/auth-token/generate"},
		},
		SendBulkSMS:              NewSendBulkSMSHandler(e.SendBulkSMS, mux, decoder, encoder, errhandler, formatter),
		SendPremiumSMS:           NewSendPremiumSMSHandler(e.SendPremiumSMS, mux, decoder, encoder, errhandler, formatter),
		FetchSMS:                 NewFetchSMSHandler(e.FetchSMS, mux, decoder, encoder, errhandler, formatter),
		NewCheckoutToken:         NewNewCheckoutTokenHandler(e.NewCheckoutToken, mux, decoder, encoder, errhandler, formatter),
		NewPremiumSubscription:   NewNewPremiumSubscriptionHandler(e.NewPremiumSubscription, mux, decoder, encoder, errhandler, formatter),
		FetchPremiumSubscription: NewFetchPremiumSubscriptionHandler(e.FetchPremiumSubscription, mux, decoder, encoder, errhandler, formatter),
		PurgePremiumSubscription: NewPurgePremiumSubscriptionHandler(e.PurgePremiumSubscription, mux, decoder, encoder, errhandler, formatter),
		MakeCall:                 NewMakeCallHandler(e.MakeCall, mux, decoder, encoder, errhandler, formatter),
		TransferCall:             NewTransferCallHandler(e.TransferCall, mux, decoder, encoder, errhandler, formatter),
		UploadMedia:              NewUploadMediaHandler(e.UploadMedia, mux, decoder, encoder, errhandler, formatter),
		MobileCheckout:           NewMobileCheckoutHandler(e.MobileCheckout, mux, decoder, encoder, errhandler, formatter),
		MobileB2C:                NewMobileB2CHandler(e.MobileB2C, mux, decoder, encoder, errhandler, formatter),
		MobileB2B:                NewMobileB2BHandler(e.MobileB2B, mux, decoder, encoder, errhandler, formatter),
		BankCheckout:             NewBankCheckoutHandler(e.BankCheckout, mux, decoder, encoder, errhandler, formatter),
		BankCheckoutValidate:     NewBankCheckoutValidateHandler(e.BankCheckoutValidate, mux, decoder, encoder, errhandler, formatter),
		BankTransfer:             NewBankTransferHandler(e.BankTransfer, mux, decoder, encoder, errhandler, formatter),
		CardCheckout:             NewCardCheckoutHandler(e.CardCheckout, mux, decoder, encoder, errhandler, formatter),
		CardCheckoutValidate:     NewCardCheckoutValidateHandler(e.CardCheckoutValidate, mux, decoder, encoder, errhandler, formatter),
		WalletTransfer:           NewWalletTransferHandler(e.WalletTransfer, mux, decoder, encoder, errhandler, formatter),
		TopupStash:               NewTopupStashHandler(e.TopupStash, mux, decoder, encoder, errhandler, formatter),
		FindTransaction:          NewFindTransactionHandler(e.FindTransaction, mux, decoder, encoder, errhandler, formatter),
		FetchProductTransactions: NewFetchProductTransactionsHandler(e.FetchProductTransactions, mux, decoder, encoder, errhandler, formatter),
		FetchWalletTransactions:  NewFetchWalletTransactionsHandler(e.FetchWalletTransactions, mux, decoder, encoder, errhandler, formatter),
		FetchWalletBalance:       NewFetchWalletBalanceHandler(e.FetchWalletBalance, mux, decoder, encoder, errhandler, formatter),
		SendAirtime:              NewSendAirtimeHandler(e.SendAirtime, mux, decoder, encoder, errhandler, formatter),
		PublishIoT:               NewPublishIoTHandler(e.PublishIoT, mux, decoder, encoder, errhandler, formatter),
		InitiateAppData:          NewInitiateAppDataHandler(e.InitiateAppData, mux, decoder, encoder, errhandler, formatter),
		Generate:                 NewGenerateHandler(e.Generate, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "africastalking" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.SendBulkSMS = m(s.SendBulkSMS)
	s.SendPremiumSMS = m(s.SendPremiumSMS)
	s.FetchSMS = m(s.FetchSMS)
	s.NewCheckoutToken = m(s.NewCheckoutToken)
	s.NewPremiumSubscription = m(s.NewPremiumSubscription)
	s.FetchPremiumSubscription = m(s.FetchPremiumSubscription)
	s.PurgePremiumSubscription = m(s.PurgePremiumSubscription)
	s.MakeCall = m(s.MakeCall)
	s.TransferCall = m(s.TransferCall)
	s.UploadMedia = m(s.UploadMedia)
	s.MobileCheckout = m(s.MobileCheckout)
	s.MobileB2C = m(s.MobileB2C)
	s.MobileB2B = m(s.MobileB2B)
	s.BankCheckout = m(s.BankCheckout)
	s.BankCheckoutValidate = m(s.BankCheckoutValidate)
	s.BankTransfer = m(s.BankTransfer)
	s.CardCheckout = m(s.CardCheckout)
	s.CardCheckoutValidate = m(s.CardCheckoutValidate)
	s.WalletTransfer = m(s.WalletTransfer)
	s.TopupStash = m(s.TopupStash)
	s.FindTransaction = m(s.FindTransaction)
	s.FetchProductTransactions = m(s.FetchProductTransactions)
	s.FetchWalletTransactions = m(s.FetchWalletTransactions)
	s.FetchWalletBalance = m(s.FetchWalletBalance)
	s.SendAirtime = m(s.SendAirtime)
	s.PublishIoT = m(s.PublishIoT)
	s.InitiateAppData = m(s.InitiateAppData)
	s.Generate = m(s.Generate)
}

// Mount configures the mux to serve the africastalking endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSendBulkSMSHandler(mux, h.SendBulkSMS)
	MountSendPremiumSMSHandler(mux, h.SendPremiumSMS)
	MountFetchSMSHandler(mux, h.FetchSMS)
	MountNewCheckoutTokenHandler(mux, h.NewCheckoutToken)
	MountNewPremiumSubscriptionHandler(mux, h.NewPremiumSubscription)
	MountFetchPremiumSubscriptionHandler(mux, h.FetchPremiumSubscription)
	MountPurgePremiumSubscriptionHandler(mux, h.PurgePremiumSubscription)
	MountMakeCallHandler(mux, h.MakeCall)
	MountTransferCallHandler(mux, h.TransferCall)
	MountUploadMediaHandler(mux, h.UploadMedia)
	MountMobileCheckoutHandler(mux, h.MobileCheckout)
	MountMobileB2CHandler(mux, h.MobileB2C)
	MountMobileB2BHandler(mux, h.MobileB2B)
	MountBankCheckoutHandler(mux, h.BankCheckout)
	MountBankCheckoutValidateHandler(mux, h.BankCheckoutValidate)
	MountBankTransferHandler(mux, h.BankTransfer)
	MountCardCheckoutHandler(mux, h.CardCheckout)
	MountCardCheckoutValidateHandler(mux, h.CardCheckoutValidate)
	MountWalletTransferHandler(mux, h.WalletTransfer)
	MountTopupStashHandler(mux, h.TopupStash)
	MountFindTransactionHandler(mux, h.FindTransaction)
	MountFetchProductTransactionsHandler(mux, h.FetchProductTransactions)
	MountFetchWalletTransactionsHandler(mux, h.FetchWalletTransactions)
	MountFetchWalletBalanceHandler(mux, h.FetchWalletBalance)
	MountSendAirtimeHandler(mux, h.SendAirtime)
	MountPublishIoTHandler(mux, h.PublishIoT)
	MountInitiateAppDataHandler(mux, h.InitiateAppData)
	MountGenerateHandler(mux, h.Generate)
}

// MountSendBulkSMSHandler configures the mux to serve the "africastalking"
// service "SendBulkSMS" endpoint.
func MountSendBulkSMSHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/messaging", f)
}

// NewSendBulkSMSHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "SendBulkSMS" endpoint.
func NewSendBulkSMSHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendBulkSMSRequest(mux, decoder)
		encodeResponse = EncodeSendBulkSMSResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SendBulkSMS")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendPremiumSMSHandler configures the mux to serve the "africastalking"
// service "SendPremiumSMS" endpoint.
func MountSendPremiumSMSHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/messaging", f)
}

// NewSendPremiumSMSHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "SendPremiumSMS" endpoint.
func NewSendPremiumSMSHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendPremiumSMSRequest(mux, decoder)
		encodeResponse = EncodeSendPremiumSMSResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SendPremiumSMS")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFetchSMSHandler configures the mux to serve the "africastalking"
// service "FetchSMS" endpoint.
func MountFetchSMSHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/version1/messaging", f)
}

// NewFetchSMSHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "FetchSMS" endpoint.
func NewFetchSMSHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFetchSMSRequest(mux, decoder)
		encodeResponse = EncodeFetchSMSResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "FetchSMS")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountNewCheckoutTokenHandler configures the mux to serve the
// "africastalking" service "NewCheckoutToken" endpoint.
func MountNewCheckoutTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/checkout/token/create", f)
}

// NewNewCheckoutTokenHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "NewCheckoutToken" endpoint.
func NewNewCheckoutTokenHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNewCheckoutTokenRequest(mux, decoder)
		encodeResponse = EncodeNewCheckoutTokenResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "NewCheckoutToken")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountNewPremiumSubscriptionHandler configures the mux to serve the
// "africastalking" service "NewPremiumSubscription" endpoint.
func MountNewPremiumSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/subscription/create", f)
}

// NewNewPremiumSubscriptionHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "NewPremiumSubscription"
// endpoint.
func NewNewPremiumSubscriptionHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeNewPremiumSubscriptionRequest(mux, decoder)
		encodeResponse = EncodeNewPremiumSubscriptionResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "NewPremiumSubscription")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFetchPremiumSubscriptionHandler configures the mux to serve the
// "africastalking" service "FetchPremiumSubscription" endpoint.
func MountFetchPremiumSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/version1/subscription", f)
}

// NewFetchPremiumSubscriptionHandler creates a HTTP handler which loads the
// HTTP request and calls the "africastalking" service
// "FetchPremiumSubscription" endpoint.
func NewFetchPremiumSubscriptionHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFetchPremiumSubscriptionRequest(mux, decoder)
		encodeResponse = EncodeFetchPremiumSubscriptionResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "FetchPremiumSubscription")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPurgePremiumSubscriptionHandler configures the mux to serve the
// "africastalking" service "PurgePremiumSubscription" endpoint.
func MountPurgePremiumSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/subscription/delete", f)
}

// NewPurgePremiumSubscriptionHandler creates a HTTP handler which loads the
// HTTP request and calls the "africastalking" service
// "PurgePremiumSubscription" endpoint.
func NewPurgePremiumSubscriptionHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePurgePremiumSubscriptionRequest(mux, decoder)
		encodeResponse = EncodePurgePremiumSubscriptionResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "PurgePremiumSubscription")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMakeCallHandler configures the mux to serve the "africastalking"
// service "MakeCall" endpoint.
func MountMakeCallHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/call", f)
}

// NewMakeCallHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "MakeCall" endpoint.
func NewMakeCallHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMakeCallRequest(mux, decoder)
		encodeResponse = EncodeMakeCallResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "MakeCall")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTransferCallHandler configures the mux to serve the "africastalking"
// service "TransferCall" endpoint.
func MountTransferCallHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callTransfer", f)
}

// NewTransferCallHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "TransferCall" endpoint.
func NewTransferCallHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTransferCallRequest(mux, decoder)
		encodeResponse = EncodeTransferCallResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "TransferCall")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUploadMediaHandler configures the mux to serve the "africastalking"
// service "UploadMedia" endpoint.
func MountUploadMediaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mediaUpload", f)
}

// NewUploadMediaHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "UploadMedia" endpoint.
func NewUploadMediaHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUploadMediaRequest(mux, decoder)
		encodeResponse = EncodeUploadMediaResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UploadMedia")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMobileCheckoutHandler configures the mux to serve the "africastalking"
// service "MobileCheckout" endpoint.
func MountMobileCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mobile/checkout/request", f)
}

// NewMobileCheckoutHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "MobileCheckout" endpoint.
func NewMobileCheckoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMobileCheckoutRequest(mux, decoder)
		encodeResponse = EncodeMobileCheckoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "MobileCheckout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMobileB2CHandler configures the mux to serve the "africastalking"
// service "MobileB2C" endpoint.
func MountMobileB2CHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mobile/b2c/request", f)
}

// NewMobileB2CHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "MobileB2C" endpoint.
func NewMobileB2CHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMobileB2CRequest(mux, decoder)
		encodeResponse = EncodeMobileB2CResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "MobileB2C")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMobileB2BHandler configures the mux to serve the "africastalking"
// service "MobileB2B" endpoint.
func MountMobileB2BHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mobile/b2b/request", f)
}

// NewMobileB2BHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "MobileB2B" endpoint.
func NewMobileB2BHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMobileB2BRequest(mux, decoder)
		encodeResponse = EncodeMobileB2BResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "MobileB2B")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBankCheckoutHandler configures the mux to serve the "africastalking"
// service "Bank Checkout" endpoint.
func MountBankCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/bank/checkout/charge", f)
}

// NewBankCheckoutHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "Bank Checkout" endpoint.
func NewBankCheckoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBankCheckoutRequest(mux, decoder)
		encodeResponse = EncodeBankCheckoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Bank Checkout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBankCheckoutValidateHandler configures the mux to serve the
// "africastalking" service "BankCheckoutValidate" endpoint.
func MountBankCheckoutValidateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/bank/checkout/validate", f)
}

// NewBankCheckoutValidateHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "BankCheckoutValidate"
// endpoint.
func NewBankCheckoutValidateHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBankCheckoutValidateRequest(mux, decoder)
		encodeResponse = EncodeBankCheckoutValidateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "BankCheckoutValidate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBankTransferHandler configures the mux to serve the "africastalking"
// service "BankTransfer" endpoint.
func MountBankTransferHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/bank/transfer", f)
}

// NewBankTransferHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "BankTransfer" endpoint.
func NewBankTransferHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBankTransferRequest(mux, decoder)
		encodeResponse = EncodeBankTransferResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "BankTransfer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCardCheckoutHandler configures the mux to serve the "africastalking"
// service "CardCheckout" endpoint.
func MountCardCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/card/checkout/charge", f)
}

// NewCardCheckoutHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "CardCheckout" endpoint.
func NewCardCheckoutHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCardCheckoutRequest(mux, decoder)
		encodeResponse = EncodeCardCheckoutResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CardCheckout")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCardCheckoutValidateHandler configures the mux to serve the
// "africastalking" service "CardCheckoutValidate" endpoint.
func MountCardCheckoutValidateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/card/checkout/validate", f)
}

// NewCardCheckoutValidateHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "CardCheckoutValidate"
// endpoint.
func NewCardCheckoutValidateHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCardCheckoutValidateRequest(mux, decoder)
		encodeResponse = EncodeCardCheckoutValidateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "CardCheckoutValidate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountWalletTransferHandler configures the mux to serve the "africastalking"
// service "WalletTransfer" endpoint.
func MountWalletTransferHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/transfer/wallet", f)
}

// NewWalletTransferHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "WalletTransfer" endpoint.
func NewWalletTransferHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeWalletTransferRequest(mux, decoder)
		encodeResponse = EncodeWalletTransferResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "WalletTransfer")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTopupStashHandler configures the mux to serve the "africastalking"
// service "TopupStash" endpoint.
func MountTopupStashHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/topup/stash", f)
}

// NewTopupStashHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "TopupStash" endpoint.
func NewTopupStashHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTopupStashRequest(mux, decoder)
		encodeResponse = EncodeTopupStashResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "TopupStash")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFindTransactionHandler configures the mux to serve the "africastalking"
// service "FindTransaction" endpoint.
func MountFindTransactionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/transaction/find", f)
}

// NewFindTransactionHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "FindTransaction" endpoint.
func NewFindTransactionHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFindTransactionRequest(mux, decoder)
		encodeResponse = EncodeFindTransactionResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "FindTransaction")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFetchProductTransactionsHandler configures the mux to serve the
// "africastalking" service "FetchProductTransactions" endpoint.
func MountFetchProductTransactionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/transaction/fetch", f)
}

// NewFetchProductTransactionsHandler creates a HTTP handler which loads the
// HTTP request and calls the "africastalking" service
// "FetchProductTransactions" endpoint.
func NewFetchProductTransactionsHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFetchProductTransactionsRequest(mux, decoder)
		encodeResponse = EncodeFetchProductTransactionsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "FetchProductTransactions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFetchWalletTransactionsHandler configures the mux to serve the
// "africastalking" service "FetchWalletTransactions" endpoint.
func MountFetchWalletTransactionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/wallet/fetch", f)
}

// NewFetchWalletTransactionsHandler creates a HTTP handler which loads the
// HTTP request and calls the "africastalking" service
// "FetchWalletTransactions" endpoint.
func NewFetchWalletTransactionsHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFetchWalletTransactionsRequest(mux, decoder)
		encodeResponse = EncodeFetchWalletTransactionsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "FetchWalletTransactions")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountFetchWalletBalanceHandler configures the mux to serve the
// "africastalking" service "FetchWalletBalance" endpoint.
func MountFetchWalletBalanceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/wallet/balance", f)
}

// NewFetchWalletBalanceHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "FetchWalletBalance" endpoint.
func NewFetchWalletBalanceHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeFetchWalletBalanceRequest(mux, decoder)
		encodeResponse = EncodeFetchWalletBalanceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "FetchWalletBalance")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSendAirtimeHandler configures the mux to serve the "africastalking"
// service "SendAirtime" endpoint.
func MountSendAirtimeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/airtime/send", f)
}

// NewSendAirtimeHandler creates a HTTP handler which loads the HTTP request
// and calls the "africastalking" service "SendAirtime" endpoint.
func NewSendAirtimeHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSendAirtimeRequest(mux, decoder)
		encodeResponse = EncodeSendAirtimeResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "SendAirtime")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountPublishIoTHandler configures the mux to serve the "africastalking"
// service "PublishIoT" endpoint.
func MountPublishIoTHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/data/publish", f)
}

// NewPublishIoTHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "PublishIoT" endpoint.
func NewPublishIoTHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodePublishIoTRequest(mux, decoder)
		encodeResponse = EncodePublishIoTResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "PublishIoT")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountInitiateAppDataHandler configures the mux to serve the "africastalking"
// service "InitiateAppData" endpoint.
func MountInitiateAppDataHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/version1/user", f)
}

// NewInitiateAppDataHandler creates a HTTP handler which loads the HTTP
// request and calls the "africastalking" service "InitiateAppData" endpoint.
func NewInitiateAppDataHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeInitiateAppDataRequest(mux, decoder)
		encodeResponse = EncodeInitiateAppDataResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "InitiateAppData")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenerateHandler configures the mux to serve the "africastalking"
// service "Generate" endpoint.
func MountGenerateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth-token/generate", f)
}

// NewGenerateHandler creates a HTTP handler which loads the HTTP request and
// calls the "africastalking" service "Generate" endpoint.
func NewGenerateHandler(
	endpoint endpoint.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGenerateRequest(mux, decoder)
		encodeResponse = EncodeGenerateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Generate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "africastalking")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
