// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking go-kit HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package server

import (
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// MountSendBulkSMSHandler configures the mux to serve the "africastalking"
// service "SendBulkSMS" endpoint.
func MountSendBulkSMSHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/messaging", f)
}

// MountSendPremiumSMSHandler configures the mux to serve the "africastalking"
// service "SendPremiumSMS" endpoint.
func MountSendPremiumSMSHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/messaging", f)
}

// MountFetchSMSHandler configures the mux to serve the "africastalking"
// service "FetchSMS" endpoint.
func MountFetchSMSHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/version1/messaging", f)
}

// MountNewCheckoutTokenHandler configures the mux to serve the
// "africastalking" service "NewCheckoutToken" endpoint.
func MountNewCheckoutTokenHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/checkout/token/create", f)
}

// MountNewPremiumSubscriptionHandler configures the mux to serve the
// "africastalking" service "NewPremiumSubscription" endpoint.
func MountNewPremiumSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/subscription/create", f)
}

// MountFetchPremiumSubscriptionHandler configures the mux to serve the
// "africastalking" service "FetchPremiumSubscription" endpoint.
func MountFetchPremiumSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/version1/subscription", f)
}

// MountPurgePremiumSubscriptionHandler configures the mux to serve the
// "africastalking" service "PurgePremiumSubscription" endpoint.
func MountPurgePremiumSubscriptionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/subscription/delete", f)
}

// MountMakeCallHandler configures the mux to serve the "africastalking"
// service "MakeCall" endpoint.
func MountMakeCallHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/call", f)
}

// MountTransferCallHandler configures the mux to serve the "africastalking"
// service "TransferCall" endpoint.
func MountTransferCallHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/callTransfer", f)
}

// MountUploadMediaHandler configures the mux to serve the "africastalking"
// service "UploadMedia" endpoint.
func MountUploadMediaHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mediaUpload", f)
}

// MountMobileCheckoutHandler configures the mux to serve the "africastalking"
// service "MobileCheckout" endpoint.
func MountMobileCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mobile/checkout/request", f)
}

// MountMobileB2CHandler configures the mux to serve the "africastalking"
// service "MobileB2C" endpoint.
func MountMobileB2CHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mobile/b2c/request", f)
}

// MountMobileB2BHandler configures the mux to serve the "africastalking"
// service "MobileB2B" endpoint.
func MountMobileB2BHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mobile/b2b/request", f)
}

// MountBankCheckoutHandler configures the mux to serve the "africastalking"
// service "Bank Checkout" endpoint.
func MountBankCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/bank/checkout/charge", f)
}

// MountBankCheckoutValidateHandler configures the mux to serve the
// "africastalking" service "BankCheckoutValidate" endpoint.
func MountBankCheckoutValidateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/bank/checkout/validate", f)
}

// MountBankTransferHandler configures the mux to serve the "africastalking"
// service "BankTransfer" endpoint.
func MountBankTransferHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/bank/transfer", f)
}

// MountCardCheckoutHandler configures the mux to serve the "africastalking"
// service "CardCheckout" endpoint.
func MountCardCheckoutHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/card/checkout/charge", f)
}

// MountCardCheckoutValidateHandler configures the mux to serve the
// "africastalking" service "CardCheckoutValidate" endpoint.
func MountCardCheckoutValidateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/card/checkout/validate", f)
}

// MountWalletTransferHandler configures the mux to serve the "africastalking"
// service "WalletTransfer" endpoint.
func MountWalletTransferHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/transfer/wallet", f)
}

// MountTopupStashHandler configures the mux to serve the "africastalking"
// service "TopupStash" endpoint.
func MountTopupStashHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/topup/stash", f)
}

// MountFindTransactionHandler configures the mux to serve the "africastalking"
// service "FindTransaction" endpoint.
func MountFindTransactionHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/transaction/find", f)
}

// MountFetchProductTransactionsHandler configures the mux to serve the
// "africastalking" service "FetchProductTransactions" endpoint.
func MountFetchProductTransactionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/transaction/fetch", f)
}

// MountFetchWalletTransactionsHandler configures the mux to serve the
// "africastalking" service "FetchWalletTransactions" endpoint.
func MountFetchWalletTransactionsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/wallet/fetch", f)
}

// MountFetchWalletBalanceHandler configures the mux to serve the
// "africastalking" service "FetchWalletBalance" endpoint.
func MountFetchWalletBalanceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/query/wallet/balance", f)
}

// MountSendAirtimeHandler configures the mux to serve the "africastalking"
// service "SendAirtime" endpoint.
func MountSendAirtimeHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/version1/airtime/send", f)
}

// MountPublishIoTHandler configures the mux to serve the "africastalking"
// service "PublishIoT" endpoint.
func MountPublishIoTHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/data/publish", f)
}

// MountInitiateAppDataHandler configures the mux to serve the "africastalking"
// service "InitiateAppData" endpoint.
func MountInitiateAppDataHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/version1/user", f)
}

// MountGenerateHandler configures the mux to serve the "africastalking"
// service "Generate" endpoint.
func MountGenerateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/auth-token/generate", f)
}
