// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking client HTTP transport
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the africastalking service endpoint HTTP clients.
type Client struct {
	// SendBulkSMS Doer is the HTTP client used to make requests to the SendBulkSMS
	// endpoint.
	SendBulkSMSDoer goahttp.Doer

	// SendPremiumSMS Doer is the HTTP client used to make requests to the
	// SendPremiumSMS endpoint.
	SendPremiumSMSDoer goahttp.Doer

	// FetchSMS Doer is the HTTP client used to make requests to the FetchSMS
	// endpoint.
	FetchSMSDoer goahttp.Doer

	// NewCheckoutToken Doer is the HTTP client used to make requests to the
	// NewCheckoutToken endpoint.
	NewCheckoutTokenDoer goahttp.Doer

	// NewPremiumSubscription Doer is the HTTP client used to make requests to the
	// NewPremiumSubscription endpoint.
	NewPremiumSubscriptionDoer goahttp.Doer

	// FetchPremiumSubscription Doer is the HTTP client used to make requests to
	// the FetchPremiumSubscription endpoint.
	FetchPremiumSubscriptionDoer goahttp.Doer

	// PurgePremiumSubscription Doer is the HTTP client used to make requests to
	// the PurgePremiumSubscription endpoint.
	PurgePremiumSubscriptionDoer goahttp.Doer

	// MakeCall Doer is the HTTP client used to make requests to the MakeCall
	// endpoint.
	MakeCallDoer goahttp.Doer

	// TransferCall Doer is the HTTP client used to make requests to the
	// TransferCall endpoint.
	TransferCallDoer goahttp.Doer

	// Say Doer is the HTTP client used to make requests to the Say endpoint.
	SayDoer goahttp.Doer

	// Play Doer is the HTTP client used to make requests to the Play endpoint.
	PlayDoer goahttp.Doer

	// GetDigits Doer is the HTTP client used to make requests to the GetDigits
	// endpoint.
	GetDigitsDoer goahttp.Doer

	// Dial Doer is the HTTP client used to make requests to the Dial endpoint.
	DialDoer goahttp.Doer

	// Record Doer is the HTTP client used to make requests to the Record endpoint.
	RecordDoer goahttp.Doer

	// Enqueue Doer is the HTTP client used to make requests to the Enqueue
	// endpoint.
	EnqueueDoer goahttp.Doer

	// Dequeue Doer is the HTTP client used to make requests to the Dequeue
	// endpoint.
	DequeueDoer goahttp.Doer

	// Redirect Doer is the HTTP client used to make requests to the Redirect
	// endpoint.
	RedirectDoer goahttp.Doer

	// Reject Doer is the HTTP client used to make requests to the Reject endpoint.
	RejectDoer goahttp.Doer

	// Queue Doer is the HTTP client used to make requests to the Queue endpoint.
	QueueDoer goahttp.Doer

	// UploadMedia Doer is the HTTP client used to make requests to the UploadMedia
	// endpoint.
	UploadMediaDoer goahttp.Doer

	// MobileCheckout Doer is the HTTP client used to make requests to the
	// MobileCheckout endpoint.
	MobileCheckoutDoer goahttp.Doer

	// MobileB2C Doer is the HTTP client used to make requests to the MobileB2C
	// endpoint.
	MobileB2CDoer goahttp.Doer

	// MobileB2B Doer is the HTTP client used to make requests to the MobileB2B
	// endpoint.
	MobileB2BDoer goahttp.Doer

	// BankCheckout Doer is the HTTP client used to make requests to the Bank
	// Checkout endpoint.
	BankCheckoutDoer goahttp.Doer

	// BankCheckoutValidate Doer is the HTTP client used to make requests to the
	// BankCheckoutValidate endpoint.
	BankCheckoutValidateDoer goahttp.Doer

	// BankTransfer Doer is the HTTP client used to make requests to the
	// BankTransfer endpoint.
	BankTransferDoer goahttp.Doer

	// CardCheckout Doer is the HTTP client used to make requests to the
	// CardCheckout endpoint.
	CardCheckoutDoer goahttp.Doer

	// CardCheckoutValidate Doer is the HTTP client used to make requests to the
	// CardCheckoutValidate endpoint.
	CardCheckoutValidateDoer goahttp.Doer

	// WalletTransfer Doer is the HTTP client used to make requests to the
	// WalletTransfer endpoint.
	WalletTransferDoer goahttp.Doer

	// TopupStash Doer is the HTTP client used to make requests to the TopupStash
	// endpoint.
	TopupStashDoer goahttp.Doer

	// FindTransaction Doer is the HTTP client used to make requests to the
	// FindTransaction endpoint.
	FindTransactionDoer goahttp.Doer

	// FetchProductTransactions Doer is the HTTP client used to make requests to
	// the FetchProductTransactions endpoint.
	FetchProductTransactionsDoer goahttp.Doer

	// FetchWalletTransactions Doer is the HTTP client used to make requests to the
	// FetchWalletTransactions endpoint.
	FetchWalletTransactionsDoer goahttp.Doer

	// FetchWalletBalance Doer is the HTTP client used to make requests to the
	// FetchWalletBalance endpoint.
	FetchWalletBalanceDoer goahttp.Doer

	// SendAirtime Doer is the HTTP client used to make requests to the SendAirtime
	// endpoint.
	SendAirtimeDoer goahttp.Doer

	// PublishIoT Doer is the HTTP client used to make requests to the PublishIoT
	// endpoint.
	PublishIoTDoer goahttp.Doer

	// InitiateAppData Doer is the HTTP client used to make requests to the
	// InitiateAppData endpoint.
	InitiateAppDataDoer goahttp.Doer

	// Generate Doer is the HTTP client used to make requests to the Generate
	// endpoint.
	GenerateDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the africastalking service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		SendBulkSMSDoer:              doer,
		SendPremiumSMSDoer:           doer,
		FetchSMSDoer:                 doer,
		NewCheckoutTokenDoer:         doer,
		NewPremiumSubscriptionDoer:   doer,
		FetchPremiumSubscriptionDoer: doer,
		PurgePremiumSubscriptionDoer: doer,
		MakeCallDoer:                 doer,
		TransferCallDoer:             doer,
		SayDoer:                      doer,
		PlayDoer:                     doer,
		GetDigitsDoer:                doer,
		DialDoer:                     doer,
		RecordDoer:                   doer,
		EnqueueDoer:                  doer,
		DequeueDoer:                  doer,
		RedirectDoer:                 doer,
		RejectDoer:                   doer,
		QueueDoer:                    doer,
		UploadMediaDoer:              doer,
		MobileCheckoutDoer:           doer,
		MobileB2CDoer:                doer,
		MobileB2BDoer:                doer,
		BankCheckoutDoer:             doer,
		BankCheckoutValidateDoer:     doer,
		BankTransferDoer:             doer,
		CardCheckoutDoer:             doer,
		CardCheckoutValidateDoer:     doer,
		WalletTransferDoer:           doer,
		TopupStashDoer:               doer,
		FindTransactionDoer:          doer,
		FetchProductTransactionsDoer: doer,
		FetchWalletTransactionsDoer:  doer,
		FetchWalletBalanceDoer:       doer,
		SendAirtimeDoer:              doer,
		PublishIoTDoer:               doer,
		InitiateAppDataDoer:          doer,
		GenerateDoer:                 doer,
		RestoreResponseBody:          restoreBody,
		scheme:                       scheme,
		host:                         host,
		decoder:                      dec,
		encoder:                      enc,
	}
}

// SendBulkSMS returns an endpoint that makes HTTP requests to the
// africastalking service SendBulkSMS server.
func (c *Client) SendBulkSMS() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeSendBulkSMSRequest(c.encoder)
		decodeResponse = DecodeSendBulkSMSResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSendBulkSMSRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendBulkSMSDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "SendBulkSMS", err)
		}
		return decodeResponse(resp)
	}
}

// SendPremiumSMS returns an endpoint that makes HTTP requests to the
// africastalking service SendPremiumSMS server.
func (c *Client) SendPremiumSMS() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeSendPremiumSMSRequest(c.encoder)
		decodeResponse = DecodeSendPremiumSMSResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSendPremiumSMSRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendPremiumSMSDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "SendPremiumSMS", err)
		}
		return decodeResponse(resp)
	}
}

// FetchSMS returns an endpoint that makes HTTP requests to the africastalking
// service FetchSMS server.
func (c *Client) FetchSMS() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeFetchSMSRequest(c.encoder)
		decodeResponse = DecodeFetchSMSResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchSMSRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchSMSDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "FetchSMS", err)
		}
		return decodeResponse(resp)
	}
}

// NewCheckoutToken returns an endpoint that makes HTTP requests to the
// africastalking service NewCheckoutToken server.
func (c *Client) NewCheckoutToken() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeNewCheckoutTokenRequest(c.encoder)
		decodeResponse = DecodeNewCheckoutTokenResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildNewCheckoutTokenRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NewCheckoutTokenDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "NewCheckoutToken", err)
		}
		return decodeResponse(resp)
	}
}

// NewPremiumSubscription returns an endpoint that makes HTTP requests to the
// africastalking service NewPremiumSubscription server.
func (c *Client) NewPremiumSubscription() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeNewPremiumSubscriptionRequest(c.encoder)
		decodeResponse = DecodeNewPremiumSubscriptionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildNewPremiumSubscriptionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NewPremiumSubscriptionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "NewPremiumSubscription", err)
		}
		return decodeResponse(resp)
	}
}

// FetchPremiumSubscription returns an endpoint that makes HTTP requests to the
// africastalking service FetchPremiumSubscription server.
func (c *Client) FetchPremiumSubscription() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeFetchPremiumSubscriptionRequest(c.encoder)
		decodeResponse = DecodeFetchPremiumSubscriptionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchPremiumSubscriptionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchPremiumSubscriptionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "FetchPremiumSubscription", err)
		}
		return decodeResponse(resp)
	}
}

// PurgePremiumSubscription returns an endpoint that makes HTTP requests to the
// africastalking service PurgePremiumSubscription server.
func (c *Client) PurgePremiumSubscription() endpoint.Endpoint {
	var (
		encodeRequest  = EncodePurgePremiumSubscriptionRequest(c.encoder)
		decodeResponse = DecodePurgePremiumSubscriptionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPurgePremiumSubscriptionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PurgePremiumSubscriptionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "PurgePremiumSubscription", err)
		}
		return decodeResponse(resp)
	}
}

// MakeCall returns an endpoint that makes HTTP requests to the africastalking
// service MakeCall server.
func (c *Client) MakeCall() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeMakeCallRequest(c.encoder)
		decodeResponse = DecodeMakeCallResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMakeCallRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MakeCallDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "MakeCall", err)
		}
		return decodeResponse(resp)
	}
}

// TransferCall returns an endpoint that makes HTTP requests to the
// africastalking service TransferCall server.
func (c *Client) TransferCall() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeTransferCallRequest(c.encoder)
		decodeResponse = DecodeTransferCallResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTransferCallRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TransferCallDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "TransferCall", err)
		}
		return decodeResponse(resp)
	}
}

// Say returns an endpoint that makes HTTP requests to the africastalking
// service Say server.
func (c *Client) Say() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeSayRequest(c.encoder)
		decodeResponse = DecodeSayResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSayRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SayDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Say", err)
		}
		return decodeResponse(resp)
	}
}

// Play returns an endpoint that makes HTTP requests to the africastalking
// service Play server.
func (c *Client) Play() endpoint.Endpoint {
	var (
		encodeRequest  = EncodePlayRequest(c.encoder)
		decodeResponse = DecodePlayResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPlayRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PlayDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Play", err)
		}
		return decodeResponse(resp)
	}
}

// GetDigits returns an endpoint that makes HTTP requests to the africastalking
// service GetDigits server.
func (c *Client) GetDigits() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeGetDigitsRequest(c.encoder)
		decodeResponse = DecodeGetDigitsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetDigitsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetDigitsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "GetDigits", err)
		}
		return decodeResponse(resp)
	}
}

// Dial returns an endpoint that makes HTTP requests to the africastalking
// service Dial server.
func (c *Client) Dial() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeDialRequest(c.encoder)
		decodeResponse = DecodeDialResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDialRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DialDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Dial", err)
		}
		return decodeResponse(resp)
	}
}

// Record returns an endpoint that makes HTTP requests to the africastalking
// service Record server.
func (c *Client) Record() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeRecordRequest(c.encoder)
		decodeResponse = DecodeRecordResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRecordRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RecordDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Record", err)
		}
		return decodeResponse(resp)
	}
}

// Enqueue returns an endpoint that makes HTTP requests to the africastalking
// service Enqueue server.
func (c *Client) Enqueue() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeEnqueueRequest(c.encoder)
		decodeResponse = DecodeEnqueueResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEnqueueRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EnqueueDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Enqueue", err)
		}
		return decodeResponse(resp)
	}
}

// Dequeue returns an endpoint that makes HTTP requests to the africastalking
// service Dequeue server.
func (c *Client) Dequeue() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeDequeueRequest(c.encoder)
		decodeResponse = DecodeDequeueResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDequeueRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DequeueDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Dequeue", err)
		}
		return decodeResponse(resp)
	}
}

// Redirect returns an endpoint that makes HTTP requests to the africastalking
// service Redirect server.
func (c *Client) Redirect() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeRedirectRequest(c.encoder)
		decodeResponse = DecodeRedirectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRedirectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RedirectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Redirect", err)
		}
		return decodeResponse(resp)
	}
}

// Reject returns an endpoint that makes HTTP requests to the africastalking
// service Reject server.
func (c *Client) Reject() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeRejectRequest(c.encoder)
		decodeResponse = DecodeRejectResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRejectRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RejectDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Reject", err)
		}
		return decodeResponse(resp)
	}
}

// Queue returns an endpoint that makes HTTP requests to the africastalking
// service Queue server.
func (c *Client) Queue() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeQueueRequest(c.encoder)
		decodeResponse = DecodeQueueResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildQueueRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.QueueDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Queue", err)
		}
		return decodeResponse(resp)
	}
}

// UploadMedia returns an endpoint that makes HTTP requests to the
// africastalking service UploadMedia server.
func (c *Client) UploadMedia() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeUploadMediaRequest(c.encoder)
		decodeResponse = DecodeUploadMediaResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUploadMediaRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UploadMediaDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "UploadMedia", err)
		}
		return decodeResponse(resp)
	}
}

// MobileCheckout returns an endpoint that makes HTTP requests to the
// africastalking service MobileCheckout server.
func (c *Client) MobileCheckout() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeMobileCheckoutRequest(c.encoder)
		decodeResponse = DecodeMobileCheckoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMobileCheckoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MobileCheckoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "MobileCheckout", err)
		}
		return decodeResponse(resp)
	}
}

// MobileB2C returns an endpoint that makes HTTP requests to the africastalking
// service MobileB2C server.
func (c *Client) MobileB2C() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeMobileB2CRequest(c.encoder)
		decodeResponse = DecodeMobileB2CResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMobileB2CRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MobileB2CDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "MobileB2C", err)
		}
		return decodeResponse(resp)
	}
}

// MobileB2B returns an endpoint that makes HTTP requests to the africastalking
// service MobileB2B server.
func (c *Client) MobileB2B() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeMobileB2BRequest(c.encoder)
		decodeResponse = DecodeMobileB2BResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMobileB2BRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MobileB2BDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "MobileB2B", err)
		}
		return decodeResponse(resp)
	}
}

// BankCheckout returns an endpoint that makes HTTP requests to the
// africastalking service Bank Checkout server.
func (c *Client) BankCheckout() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeBankCheckoutRequest(c.encoder)
		decodeResponse = DecodeBankCheckoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBankCheckoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BankCheckoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Bank Checkout", err)
		}
		return decodeResponse(resp)
	}
}

// BankCheckoutValidate returns an endpoint that makes HTTP requests to the
// africastalking service BankCheckoutValidate server.
func (c *Client) BankCheckoutValidate() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeBankCheckoutValidateRequest(c.encoder)
		decodeResponse = DecodeBankCheckoutValidateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBankCheckoutValidateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BankCheckoutValidateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "BankCheckoutValidate", err)
		}
		return decodeResponse(resp)
	}
}

// BankTransfer returns an endpoint that makes HTTP requests to the
// africastalking service BankTransfer server.
func (c *Client) BankTransfer() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeBankTransferRequest(c.encoder)
		decodeResponse = DecodeBankTransferResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBankTransferRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BankTransferDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "BankTransfer", err)
		}
		return decodeResponse(resp)
	}
}

// CardCheckout returns an endpoint that makes HTTP requests to the
// africastalking service CardCheckout server.
func (c *Client) CardCheckout() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCardCheckoutRequest(c.encoder)
		decodeResponse = DecodeCardCheckoutResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCardCheckoutRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CardCheckoutDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "CardCheckout", err)
		}
		return decodeResponse(resp)
	}
}

// CardCheckoutValidate returns an endpoint that makes HTTP requests to the
// africastalking service CardCheckoutValidate server.
func (c *Client) CardCheckoutValidate() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCardCheckoutValidateRequest(c.encoder)
		decodeResponse = DecodeCardCheckoutValidateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCardCheckoutValidateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CardCheckoutValidateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "CardCheckoutValidate", err)
		}
		return decodeResponse(resp)
	}
}

// WalletTransfer returns an endpoint that makes HTTP requests to the
// africastalking service WalletTransfer server.
func (c *Client) WalletTransfer() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeWalletTransferRequest(c.encoder)
		decodeResponse = DecodeWalletTransferResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildWalletTransferRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.WalletTransferDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "WalletTransfer", err)
		}
		return decodeResponse(resp)
	}
}

// TopupStash returns an endpoint that makes HTTP requests to the
// africastalking service TopupStash server.
func (c *Client) TopupStash() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeTopupStashRequest(c.encoder)
		decodeResponse = DecodeTopupStashResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTopupStashRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TopupStashDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "TopupStash", err)
		}
		return decodeResponse(resp)
	}
}

// FindTransaction returns an endpoint that makes HTTP requests to the
// africastalking service FindTransaction server.
func (c *Client) FindTransaction() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeFindTransactionRequest(c.encoder)
		decodeResponse = DecodeFindTransactionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFindTransactionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FindTransactionDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "FindTransaction", err)
		}
		return decodeResponse(resp)
	}
}

// FetchProductTransactions returns an endpoint that makes HTTP requests to the
// africastalking service FetchProductTransactions server.
func (c *Client) FetchProductTransactions() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeFetchProductTransactionsRequest(c.encoder)
		decodeResponse = DecodeFetchProductTransactionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchProductTransactionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchProductTransactionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "FetchProductTransactions", err)
		}
		return decodeResponse(resp)
	}
}

// FetchWalletTransactions returns an endpoint that makes HTTP requests to the
// africastalking service FetchWalletTransactions server.
func (c *Client) FetchWalletTransactions() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeFetchWalletTransactionsRequest(c.encoder)
		decodeResponse = DecodeFetchWalletTransactionsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchWalletTransactionsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchWalletTransactionsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "FetchWalletTransactions", err)
		}
		return decodeResponse(resp)
	}
}

// FetchWalletBalance returns an endpoint that makes HTTP requests to the
// africastalking service FetchWalletBalance server.
func (c *Client) FetchWalletBalance() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeFetchWalletBalanceRequest(c.encoder)
		decodeResponse = DecodeFetchWalletBalanceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildFetchWalletBalanceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.FetchWalletBalanceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "FetchWalletBalance", err)
		}
		return decodeResponse(resp)
	}
}

// SendAirtime returns an endpoint that makes HTTP requests to the
// africastalking service SendAirtime server.
func (c *Client) SendAirtime() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeSendAirtimeRequest(c.encoder)
		decodeResponse = DecodeSendAirtimeResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSendAirtimeRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SendAirtimeDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "SendAirtime", err)
		}
		return decodeResponse(resp)
	}
}

// PublishIoT returns an endpoint that makes HTTP requests to the
// africastalking service PublishIoT server.
func (c *Client) PublishIoT() endpoint.Endpoint {
	var (
		encodeRequest  = EncodePublishIoTRequest(c.encoder)
		decodeResponse = DecodePublishIoTResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPublishIoTRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PublishIoTDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "PublishIoT", err)
		}
		return decodeResponse(resp)
	}
}

// InitiateAppData returns an endpoint that makes HTTP requests to the
// africastalking service InitiateAppData server.
func (c *Client) InitiateAppData() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeInitiateAppDataRequest(c.encoder)
		decodeResponse = DecodeInitiateAppDataResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildInitiateAppDataRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.InitiateAppDataDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "InitiateAppData", err)
		}
		return decodeResponse(resp)
	}
}

// Generate returns an endpoint that makes HTTP requests to the africastalking
// service Generate server.
func (c *Client) Generate() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeGenerateRequest(c.encoder)
		decodeResponse = DecodeGenerateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGenerateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GenerateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("africastalking", "Generate", err)
		}
		return decodeResponse(resp)
	}
}
