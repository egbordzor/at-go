// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package client

import (
	"encoding/json"
	"fmt"

	africastalking "github.com/wondenge/at-go/internal/pkg/gen/africastalking"
	goa "goa.design/goa/v3/pkg"
)

// BuildSendBulkSMSPayload builds the payload for the africastalking
// SendBulkSMS endpoint from CLI flags.
func BuildSendBulkSMSPayload(africastalkingSendBulkSMSBody string) (*africastalking.BulkPayload, error) {
	var err error
	var body SendBulkSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendBulkSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"bulkSMSMode\": 8873484351855826778,\n      \"enqueue\": 1,\n      \"from\": \"Reprehenderit blanditiis.\",\n      \"keyword\": \"Est inventore consequatur ut quo.\",\n      \"linkId\": \"Omnis maxime provident nihil quidem.\",\n      \"message\": \"Eum a ut qui voluptatem consectetur.\",\n      \"retryDurationInHours\": \"Fuga qui repellat quidem.\",\n      \"to\": \"Vel ut ut assumenda quaerat.\",\n      \"username\": \"Et non rem.\"\n   }'")
		}
		if !(body.Enqueue == 0 || body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", body.Enqueue, []interface{}{0, 1}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BulkPayload{
		Username:             body.Username,
		To:                   body.To,
		Message:              body.Message,
		From:                 body.From,
		BulkSMSMode:          body.BulkSMSMode,
		Enqueue:              body.Enqueue,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}

	return v, nil
}

// BuildSendPremiumSMSPayload builds the payload for the africastalking
// SendPremiumSMS endpoint from CLI flags.
func BuildSendPremiumSMSPayload(africastalkingSendPremiumSMSBody string) (*africastalking.PremiumPayload, error) {
	var err error
	var body SendPremiumSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendPremiumSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"bulkSMSMode\": 382502157578571911,\n      \"enqueue\": 1,\n      \"from\": \"Magnam velit sunt itaque vel excepturi sit.\",\n      \"keyword\": \"Ea tenetur nihil.\",\n      \"linkId\": \"Quia consequatur a odio labore error.\",\n      \"message\": \"Commodi modi.\",\n      \"retryDurationInHours\": \"Magni provident ratione.\",\n      \"to\": \"Vero rerum porro nisi non tempore.\",\n      \"username\": \"Distinctio quis et ex sit soluta et.\"\n   }'")
		}
		if !(body.Enqueue == 0 || body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", body.Enqueue, []interface{}{0, 1}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.PremiumPayload{
		Username:             body.Username,
		To:                   body.To,
		Message:              body.Message,
		From:                 body.From,
		BulkSMSMode:          body.BulkSMSMode,
		Enqueue:              body.Enqueue,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}

	return v, nil
}

// BuildFetchSMSPayload builds the payload for the africastalking FetchSMS
// endpoint from CLI flags.
func BuildFetchSMSPayload(africastalkingFetchSMSBody string) (*africastalking.FetchMsgPayload, error) {
	var err error
	var body FetchSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"lastReceivedId\": \"Ut sunt rerum at.\",\n      \"username\": \"Et sunt.\"\n   }'")
		}
	}
	v := &africastalking.FetchMsgPayload{
		Username:       body.Username,
		LastReceivedID: body.LastReceivedID,
	}

	return v, nil
}

// BuildNewCheckoutTokenPayload builds the payload for the africastalking
// NewCheckoutToken endpoint from CLI flags.
func BuildNewCheckoutTokenPayload(africastalkingNewCheckoutTokenBody string) (*africastalking.CheckoutTokenPayload, error) {
	var err error
	var body NewCheckoutTokenRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingNewCheckoutTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumber\": \"Ratione nihil earum atque autem ut.\"\n   }'")
		}
	}
	v := &africastalking.CheckoutTokenPayload{
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildNewPremiumSubscriptionPayload builds the payload for the africastalking
// NewPremiumSubscription endpoint from CLI flags.
func BuildNewPremiumSubscriptionPayload(africastalkingNewPremiumSubscriptionBody string) (*africastalking.NewSubPayload, error) {
	var err error
	var body NewPremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingNewPremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"checkoutToken\": \"\",\n      \"keyword\": \"\",\n      \"phoneNumber\": \"\",\n      \"shortCode\": \"\",\n      \"username\": \"Quia dolor illum ut modi sit.\"\n   }'")
		}
	}
	v := &africastalking.NewSubPayload{
		Username:      body.Username,
		ShortCode:     body.ShortCode,
		Keyword:       body.Keyword,
		PhoneNumber:   body.PhoneNumber,
		CheckoutToken: body.CheckoutToken,
	}

	return v, nil
}

// BuildFetchPremiumSubscriptionPayload builds the payload for the
// africastalking FetchPremiumSubscription endpoint from CLI flags.
func BuildFetchPremiumSubscriptionPayload(africastalkingFetchPremiumSubscriptionBody string) (*africastalking.FetchSubPayload, error) {
	var err error
	var body FetchPremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchPremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"\",\n      \"lastReceivedId\": \"Sed qui dolores nihil.\",\n      \"shortCode\": \"\",\n      \"username\": \"Eum dolores iure molestiae eligendi laudantium est.\"\n   }'")
		}
	}
	v := &africastalking.FetchSubPayload{
		Username:       body.Username,
		ShortCode:      body.ShortCode,
		Keyword:        body.Keyword,
		LastReceivedID: body.LastReceivedID,
	}

	return v, nil
}

// BuildPurgePremiumSubscriptionPayload builds the payload for the
// africastalking PurgePremiumSubscription endpoint from CLI flags.
func BuildPurgePremiumSubscriptionPayload(africastalkingPurgePremiumSubscriptionBody string) (*africastalking.PurgeSubPayload, error) {
	var err error
	var body PurgePremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPurgePremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"\",\n      \"phoneNumber\": \"\",\n      \"shortCode\": \"\",\n      \"username\": \"Quia voluptatem et voluptatem necessitatibus quia minus.\"\n   }'")
		}
	}
	v := &africastalking.PurgeSubPayload{
		Username:    body.Username,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildMakeCallPayload builds the payload for the africastalking MakeCall
// endpoint from CLI flags.
func BuildMakeCallPayload(africastalkingMakeCallBody string) (*africastalking.MakeCallPayload, error) {
	var err error
	var body MakeCallRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMakeCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"clientRequestId\": \"Ab qui ut consequatur exercitationem sed.\",\n      \"from\": \"Ut quas error fuga dolorem ea.\",\n      \"to\": \"Quis dolorum iure ut perferendis quidem facilis.\",\n      \"username\": \"Molestias natus rem tempora quos facere.\"\n   }'")
		}
	}
	v := &africastalking.MakeCallPayload{
		Username:        body.Username,
		From:            body.From,
		To:              body.To,
		ClientRequestID: body.ClientRequestID,
	}

	return v, nil
}

// BuildTransferCallPayload builds the payload for the africastalking
// TransferCall endpoint from CLI flags.
func BuildTransferCallPayload(africastalkingTransferCallBody string) (*africastalking.CallTransferPayload, error) {
	var err error
	var body TransferCallRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTransferCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callLeg\": \"callee\",\n      \"holdMusicUrl\": \"Qui maiores.\",\n      \"phoneNumber\": \"Expedita quis nulla.\",\n      \"sessionId\": \"Consequatur maiores.\"\n   }'")
		}
		if !(body.CallLeg == "caller" || body.CallLeg == "callee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callLeg", body.CallLeg, []interface{}{"caller", "callee"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.CallTransferPayload{
		SessionID:    body.SessionID,
		PhoneNumber:  body.PhoneNumber,
		CallLeg:      body.CallLeg,
		HoldMusicURL: body.HoldMusicURL,
	}

	return v, nil
}

// BuildSayPayload builds the payload for the africastalking Say endpoint from
// CLI flags.
func BuildSayPayload(africastalkingSayBody string) (*africastalking.Say1, error) {
	var err error
	var body SayRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSayBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"playBeep\": true,\n      \"voice\": \"woman\"\n   }'")
		}
	}
	v := &africastalking.Say1{
		Voice:    body.Voice,
		PlayBeep: body.PlayBeep,
	}

	return v, nil
}

// BuildPlayPayload builds the payload for the africastalking Play endpoint
// from CLI flags.
func BuildPlayPayload(africastalkingPlayBody string) (*africastalking.Play1, error) {
	var err error
	var body PlayRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPlayBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"url\": \"Sed id incidunt praesentium dolorem accusantium qui.\"\n   }'")
		}
	}
	v := &africastalking.Play1{
		URL: body.URL,
	}

	return v, nil
}

// BuildGetDigitsPayload builds the payload for the africastalking GetDigits
// endpoint from CLI flags.
func BuildGetDigitsPayload(africastalkingGetDigitsBody string) (*africastalking.GetDigits1, error) {
	var err error
	var body GetDigitsRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingGetDigitsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callbackUrl\": \"Dolor dicta omnis repellat cupiditate voluptas est.\",\n      \"finishOnKey\": \"Repellat porro et id dolor sit laboriosam.\",\n      \"numDigits\": \"Eaque quibusdam omnis vel dolorem.\",\n      \"timeout\": \"Est sunt tempora sint.\"\n   }'")
		}
	}
	v := &africastalking.GetDigits1{
		CallbackURL: body.CallbackURL,
		NumDigits:   body.NumDigits,
		Timeout:     body.Timeout,
		FinishOnKey: body.FinishOnKey,
	}

	return v, nil
}

// BuildDialPayload builds the payload for the africastalking Dial endpoint
// from CLI flags.
func BuildDialPayload(africastalkingDialBody string) (*africastalking.Dial1, error) {
	var err error
	var body DialRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingDialBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callerId\": \"Aliquam dolorem.\",\n      \"maxDuration\": \"Ad voluptas dolor.\",\n      \"phoneNumbers\": \"Iste aut dolores.\",\n      \"record\": \"Omnis repellat.\",\n      \"ringBackTone\": \"Et optio ut quod est.\",\n      \"sequential\": \"Sequi vel odit nobis aut natus ut.\"\n   }'")
		}
	}
	v := &africastalking.Dial1{
		PhoneNumbers: body.PhoneNumbers,
		Record:       body.Record,
		Sequential:   body.Sequential,
		CallerID:     body.CallerID,
		RingBackTone: body.RingBackTone,
		MaxDuration:  body.MaxDuration,
	}

	return v, nil
}

// BuildRecordPayload builds the payload for the africastalking Record endpoint
// from CLI flags.
func BuildRecordPayload(africastalkingRecordBody string) (*africastalking.Record1, error) {
	var err error
	var body RecordRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingRecordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callbackUrl\": \"Natus placeat nam provident.\",\n      \"finishOnKey\": \"Illum neque itaque quibusdam perspiciatis dolorem corporis.\",\n      \"maxLength\": \"Velit qui accusantium.\",\n      \"playBeep\": \"Possimus quibusdam.\",\n      \"timeout\": \"Ratione sint.\",\n      \"trimSilence\": \"Esse dolore et enim et nihil excepturi.\"\n   }'")
		}
	}
	v := &africastalking.Record1{
		FinishOnKey: body.FinishOnKey,
		MaxLength:   body.MaxLength,
		Timeout:     body.Timeout,
		TrimSilence: body.TrimSilence,
		PlayBeep:    body.PlayBeep,
		CallbackURL: body.CallbackURL,
	}

	return v, nil
}

// BuildEnqueuePayload builds the payload for the africastalking Enqueue
// endpoint from CLI flags.
func BuildEnqueuePayload(africastalkingEnqueueBody string) (*africastalking.Enqueue1, error) {
	var err error
	var body EnqueueRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingEnqueueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"holdMusic\": \"Animi nesciunt eveniet.\",\n      \"name\": \"Quisquam reprehenderit provident et et dolor.\"\n   }'")
		}
	}
	v := &africastalking.Enqueue1{
		HoldMusic: body.HoldMusic,
		Name:      body.Name,
	}

	return v, nil
}

// BuildDequeuePayload builds the payload for the africastalking Dequeue
// endpoint from CLI flags.
func BuildDequeuePayload(africastalkingDequeueBody string) (*africastalking.Dequeue1, error) {
	var err error
	var body DequeueRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingDequeueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"name\": \"Necessitatibus porro error in.\",\n      \"phoneNumber\": \"Ea fuga repellendus asperiores iusto nulla repudiandae.\"\n   }'")
		}
	}
	v := &africastalking.Dequeue1{
		PhoneNumber: body.PhoneNumber,
		Name:        body.Name,
	}

	return v, nil
}

// BuildRedirectPayload builds the payload for the africastalking Redirect
// endpoint from CLI flags.
func BuildRedirectPayload(africastalkingRedirectBody string) (*africastalking.Redirect1, error) {
	var err error
	var body RedirectRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingRedirectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Reject\": \"Est consequatur delectus dolore architecto ratione.\"\n   }'")
		}
	}
	v := &africastalking.Redirect1{
		Reject: body.Reject,
	}

	return v, nil
}

// BuildRejectPayload builds the payload for the africastalking Reject endpoint
// from CLI flags.
func BuildRejectPayload(africastalkingRejectBody string) (*africastalking.Reject1, error) {
	var err error
	var body RejectRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingRejectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Redirect\": \"Dolorem exercitationem maiores nemo ea.\"\n   }'")
		}
	}
	v := &africastalking.Reject1{
		Redirect: body.Redirect,
	}

	return v, nil
}

// BuildQueuePayload builds the payload for the africastalking Queue endpoint
// from CLI flags.
func BuildQueuePayload(africastalkingQueueBody string) (*africastalking.QueuedCallsPayload, error) {
	var err error
	var body QueueRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingQueueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumbers\": \"Vero consequatur aliquid.\",\n      \"username\": \"Molestiae enim laudantium iure veniam qui.\"\n   }'")
		}
	}
	v := &africastalking.QueuedCallsPayload{
		Username:     body.Username,
		PhoneNumbers: body.PhoneNumbers,
	}

	return v, nil
}

// BuildUploadMediaPayload builds the payload for the africastalking
// UploadMedia endpoint from CLI flags.
func BuildUploadMediaPayload(africastalkingUploadMediaBody string) (*africastalking.UploadMediaFile, error) {
	var err error
	var body UploadMediaRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingUploadMediaBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"url\": \"Odit pariatur.\",\n      \"username\": \"Quasi animi omnis.\"\n   }'")
		}
	}
	v := &africastalking.UploadMediaFile{
		Username: body.Username,
		URL:      body.URL,
	}

	return v, nil
}

// BuildMobileCheckoutPayload builds the payload for the africastalking
// MobileCheckout endpoint from CLI flags.
func BuildMobileCheckoutPayload(africastalkingMobileCheckoutBody string) (*africastalking.MobileCheckoutPayload, error) {
	var err error
	var body MobileCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 3000,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Delectus nihil.\": \"Iure sit est nihil placeat.\",\n         \"Facilis similique labore quo dolorem mollitia.\": \"Omnis ratione quod ut magni.\",\n         \"Unde perferendis.\": \"Sed sunt ea.\"\n      },\n      \"phoneNumber\": \"+254711XXXYYY\",\n      \"productName\": \"myProductName\",\n      \"providerChannel\": \"myProviderChannel\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.MobileCheckoutPayload{
		Username:        body.Username,
		ProductName:     body.ProductName,
		ProviderChannel: body.ProviderChannel,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildMobileB2CPayload builds the payload for the africastalking MobileB2C
// endpoint from CLI flags.
func BuildMobileB2CPayload(africastalkingMobileB2CBody string) (*africastalking.MobileB2CPayload, error) {
	var err error
	var body MobileB2CRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileB2CBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"productName\": \"myProductName\",\n      \"recipients\": [\n         {\n            \"amount\": 100.5,\n            \"currencyCode\": \"KES\",\n            \"metadata\": {\n               \"OwCW\": \"OutQ\"\n            },\n            \"name\": \"name\",\n            \"phoneNumber\": \"+254711XXXYYY\",\n            \"providerChannel\": \"myProviderChannel\",\n            \"reason\": \"SalaryPayment\"\n         },\n         {\n            \"amount\": 100.5,\n            \"currencyCode\": \"KES\",\n            \"metadata\": {\n               \"OwCW\": \"OutQ\"\n            },\n            \"name\": \"name\",\n            \"phoneNumber\": \"+254711XXXYYY\",\n            \"providerChannel\": \"myProviderChannel\",\n            \"reason\": \"SalaryPayment\"\n         },\n         {\n            \"amount\": 100.5,\n            \"currencyCode\": \"KES\",\n            \"metadata\": {\n               \"OwCW\": \"OutQ\"\n            },\n            \"name\": \"name\",\n            \"phoneNumber\": \"+254711XXXYYY\",\n            \"providerChannel\": \"myProviderChannel\",\n            \"reason\": \"SalaryPayment\"\n         }\n      ],\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if len(body.Recipients) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 1, true))
		}
		if len(body.Recipients) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 10, false))
		}
		for _, e := range body.Recipients {
			if e != nil {
				if err2 := ValidateMobileRecipientsRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.MobileB2CPayload{
		Username:    body.Username,
		ProductName: body.ProductName,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.MobileRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients(val)
		}
	}

	return v, nil
}

// BuildMobileB2BPayload builds the payload for the africastalking MobileB2B
// endpoint from CLI flags.
func BuildMobileB2BPayload(africastalkingMobileB2BBody string) (*africastalking.MobileB2BPayload, error) {
	var err error
	var body MobileB2BRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileB2BBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 3000,\n      \"currencyCode\": \"KES\",\n      \"destinationAccount\": \"Account Name\",\n      \"destinationChannel\": \"Buy Goods Number\",\n      \"metadata\": {\n         \"OqkdMh\": \"RwMfHN\",\n         \"QawIGK\": \"mr\",\n         \"lB\": \"ExdMn\"\n      },\n      \"productName\": \"myProductName\",\n      \"provider\": \"Mpesa\",\n      \"transferType\": \"BusinessBuyGoods\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.MobileB2BPayload{
		Username:           body.Username,
		ProductName:        body.ProductName,
		Provider:           body.Provider,
		TransferType:       body.TransferType,
		CurrencyCode:       body.CurrencyCode,
		Amount:             body.Amount,
		DestinationChannel: body.DestinationChannel,
		DestinationAccount: body.DestinationAccount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildBankCheckoutPayload builds the payload for the africastalking Bank
// Checkout endpoint from CLI flags.
func BuildBankCheckoutPayload(africastalkingBankCheckoutBody string) (*africastalking.BankCheckoutPayload, error) {
	var err error
	var body BankCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 39393,\n      \"bankAccount\": {\n         \"accountName\": \"Test Bank Account\",\n         \"accountNumber\": \"1234567890\",\n         \"bankCode\": 234001,\n         \"dateOfBirth\": \"1982-11-11\"\n      },\n      \"currencyCode\": \"NGN\",\n      \"metadata\": {\n         \"FwOA\": \"EbHFN\"\n      },\n      \"narration\": \"payment for airtime\",\n      \"productName\": \"myPaymentProductName\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.BankAccount == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("bankAccount", "body"))
		}
		if body.BankAccount != nil {
			if err2 := ValidateBankAccountRequestBody(body.BankAccount); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BankCheckoutPayload{
		Username:     body.Username,
		ProductName:  body.ProductName,
		CurrencyCode: body.CurrencyCode,
		Amount:       body.Amount,
		Narration:    body.Narration,
	}
	if body.BankAccount != nil {
		v.BankAccount = marshalBankAccountRequestBodyToAfricastalkingBankAccount(body.BankAccount)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildBankCheckoutValidatePayload builds the payload for the africastalking
// BankCheckoutValidate endpoint from CLI flags.
func BuildBankCheckoutValidatePayload(africastalkingBankCheckoutValidateBody string) (*africastalking.BankCheckoutValidatePayload, error) {
	var err error
	var body BankCheckoutValidateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankCheckoutValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"otp\": \"Voluptatum dicta saepe voluptatibus.\",\n      \"transactionId\": \"Quae voluptatem dolor ut iure et.\",\n      \"username\": \"Sed modi consequatur architecto et.\"\n   }'")
		}
	}
	v := &africastalking.BankCheckoutValidatePayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
		Otp:           body.Otp,
	}

	return v, nil
}

// BuildBankTransferPayload builds the payload for the africastalking
// BankTransfer endpoint from CLI flags.
func BuildBankTransferPayload(africastalkingBankTransferBody string) (*africastalking.BankTransferPayload, error) {
	var err error
	var body BankTransferRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"productName\": \"Repellat ut.\",\n      \"recipients\": [\n         {\n            \"accountName\": \"Unde aut similique eveniet occaecati in.\",\n            \"accountNumber\": \"Dignissimos dolores.\",\n            \"amount\": \"Libero quo voluptatibus blanditiis.\",\n            \"bankAccount\": \"Blanditiis et architecto ut velit perferendis ea.\",\n            \"bankCode\": \"Id voluptatem.\",\n            \"currencyCode\": \"Voluptatem dolor ullam.\",\n            \"dateOfBirth\": \"Non sequi odio dignissimos assumenda a.\",\n            \"metadata\": {\n               \"Esse veniam quod sunt facere.\": \"Sed quibusdam molestiae ea.\",\n               \"Quasi praesentium voluptas voluptas doloremque distinctio.\": \"Cum ullam rerum.\",\n               \"Sint possimus vel.\": \"Illo ea.\"\n            },\n            \"narration\": \"Numquam doloribus.\"\n         },\n         {\n            \"accountName\": \"Unde aut similique eveniet occaecati in.\",\n            \"accountNumber\": \"Dignissimos dolores.\",\n            \"amount\": \"Libero quo voluptatibus blanditiis.\",\n            \"bankAccount\": \"Blanditiis et architecto ut velit perferendis ea.\",\n            \"bankCode\": \"Id voluptatem.\",\n            \"currencyCode\": \"Voluptatem dolor ullam.\",\n            \"dateOfBirth\": \"Non sequi odio dignissimos assumenda a.\",\n            \"metadata\": {\n               \"Esse veniam quod sunt facere.\": \"Sed quibusdam molestiae ea.\",\n               \"Quasi praesentium voluptas voluptas doloremque distinctio.\": \"Cum ullam rerum.\",\n               \"Sint possimus vel.\": \"Illo ea.\"\n            },\n            \"narration\": \"Numquam doloribus.\"\n         },\n         {\n            \"accountName\": \"Unde aut similique eveniet occaecati in.\",\n            \"accountNumber\": \"Dignissimos dolores.\",\n            \"amount\": \"Libero quo voluptatibus blanditiis.\",\n            \"bankAccount\": \"Blanditiis et architecto ut velit perferendis ea.\",\n            \"bankCode\": \"Id voluptatem.\",\n            \"currencyCode\": \"Voluptatem dolor ullam.\",\n            \"dateOfBirth\": \"Non sequi odio dignissimos assumenda a.\",\n            \"metadata\": {\n               \"Esse veniam quod sunt facere.\": \"Sed quibusdam molestiae ea.\",\n               \"Quasi praesentium voluptas voluptas doloremque distinctio.\": \"Cum ullam rerum.\",\n               \"Sint possimus vel.\": \"Illo ea.\"\n            },\n            \"narration\": \"Numquam doloribus.\"\n         }\n      ],\n      \"username\": \"Vel reiciendis.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if len(body.Recipients) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BankTransferPayload{
		Username:    body.Username,
		ProductName: body.ProductName,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.TransferRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients(val)
		}
	}

	return v, nil
}

// BuildCardCheckoutPayload builds the payload for the africastalking
// CardCheckout endpoint from CLI flags.
func BuildCardCheckoutPayload(africastalkingCardCheckoutBody string) (*africastalking.CardCheckoutPayload, error) {
	var err error
	var body CardCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingCardCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 10000.5,\n      \"checkoutToken\": \"1234\",\n      \"currencyCode\": \"NGN\",\n      \"metadata\": {\n         \"Foo\": \"Bar\"\n      },\n      \"narration\": \"Monthly service charge for My Online Store\",\n      \"paymentCard\": {\n         \"authToken\": \"1234\",\n         \"countryCode\": \"NG\",\n         \"cvvNumber\": 123,\n         \"expiryMonth\": 8,\n         \"expiryYear\": 2019,\n         \"number\": \"1234567890\"\n      },\n      \"productName\": \"myProductName\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.PaymentCard != nil {
			if err2 := ValidatePaymentCardRequestBody(body.PaymentCard); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.CardCheckoutPayload{
		Username:      body.Username,
		ProductName:   body.ProductName,
		CheckoutToken: body.CheckoutToken,
		CurrencyCode:  body.CurrencyCode,
		Amount:        body.Amount,
		Narration:     body.Narration,
	}
	if body.PaymentCard != nil {
		v.PaymentCard = marshalPaymentCardRequestBodyToAfricastalkingPaymentCard(body.PaymentCard)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildCardCheckoutValidatePayload builds the payload for the africastalking
// CardCheckoutValidate endpoint from CLI flags.
func BuildCardCheckoutValidatePayload(africastalkingCardCheckoutValidateBody string) (*africastalking.CardCheckoutValidatePayload, error) {
	var err error
	var body CardCheckoutValidateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingCardCheckoutValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"otp\": \"Possimus atque consequuntur ex enim.\",\n      \"transactionId\": \"Impedit ut in aut.\",\n      \"username\": \"Quos laboriosam aliquam aut neque voluptas.\"\n   }'")
		}
	}
	v := &africastalking.CardCheckoutValidatePayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
		Otp:           body.Otp,
	}

	return v, nil
}

// BuildWalletTransferPayload builds the payload for the africastalking
// WalletTransfer endpoint from CLI flags.
func BuildWalletTransferPayload(africastalkingWalletTransferBody string) (*africastalking.WalletTransferPayload, error) {
	var err error
	var body WalletTransferRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingWalletTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 2000,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Foo\": \"Bar\"\n      },\n      \"productName\": \"myProductName\",\n      \"targetProductCode\": 2373,\n      \"username\": \"MyUserName\"\n   }'")
		}
		if body.Metadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.WalletTransferPayload{
		Username:          body.Username,
		ProductName:       body.ProductName,
		TargetProductCode: body.TargetProductCode,
		CurrencyCode:      body.CurrencyCode,
		Amount:            body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildTopupStashPayload builds the payload for the africastalking TopupStash
// endpoint from CLI flags.
func BuildTopupStashPayload(africastalkingTopupStashBody string) (*africastalking.TopupStashPayload, error) {
	var err error
	var body TopupStashRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTopupStashBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 2000,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Foo\": \"Bar\"\n      },\n      \"productName\": \"myProductName\",\n      \"username\": \"MyUserName\"\n   }'")
		}
		if body.Metadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.TopupStashPayload{
		Username:     body.Username,
		ProductName:  body.ProductName,
		CurrencyCode: body.CurrencyCode,
		Amount:       body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildFindTransactionPayload builds the payload for the africastalking
// FindTransaction endpoint from CLI flags.
func BuildFindTransactionPayload(africastalkingFindTransactionBody string) (*africastalking.FindTransactionPayload, error) {
	var err error
	var body FindTransactionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFindTransactionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"transactionId\": \"394828XXXV\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.FindTransactionPayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
	}

	return v, nil
}

// BuildFetchProductTransactionsPayload builds the payload for the
// africastalking FetchProductTransactions endpoint from CLI flags.
func BuildFetchProductTransactionsPayload(africastalkingFetchProductTransactionsBody string) (*africastalking.ProductTransactionsPayload, error) {
	var err error
	var body FetchProductTransactionsRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchProductTransactionsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"category\": \"UserStashTopup\",\n      \"count\": 811,\n      \"destination\": \"BankAccount\",\n      \"endDate\": \"2011-04-10\",\n      \"pageNumber\": 7211156821635237590,\n      \"productName\": \"MyProductName\",\n      \"provider\": \"Athena\",\n      \"providerChannel\": \"Ullam libero velit.\",\n      \"source\": \"phoneNumber\",\n      \"startDate\": \"1991-10-20\",\n      \"status\": \"Success\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.PageNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pageNumber", body.PageNumber, 1, true))
		}
		if body.Count < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1, true))
		}
		if body.Count > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1000, false))
		}
		if body.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDate))
		}
		if body.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDate))
		}
		if body.Category != nil {
			if !(*body.Category == "BankCheckout" || *body.Category == "CardCheckout" || *body.Category == "MobileCheckout" || *body.Category == "MobileC2B" || *body.Category == "MobileB2C" || *body.Category == "MobileB2B" || *body.Category == "BankTransfer" || *body.Category == "WalletTransfer" || *body.Category == "UserStashTopup") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
			}
		}
		if body.Provider != nil {
			if !(*body.Provider == "Mpesa" || *body.Provider == "Segovia" || *body.Provider == "Flutterwave" || *body.Provider == "Admin" || *body.Provider == "Athena") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "Segovia", "Flutterwave", "Admin", "Athena"}))
			}
		}
		if body.Status != nil {
			if !(*body.Status == "Success" || *body.Status == "Failed") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success", "Failed"}))
			}
		}
		if body.Source != nil {
			if !(*body.Source == "phoneNumber" || *body.Source == "BankAccount" || *body.Source == "Card" || *body.Source == "Wallet") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", *body.Source, []interface{}{"phoneNumber", "BankAccount", "Card", "Wallet"}))
			}
		}
		if body.Destination != nil {
			if !(*body.Destination == "PhoneNumber" || *body.Destination == "BankAccount" || *body.Destination == "Card" || *body.Destination == "Wallet") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.destination", *body.Destination, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.ProductTransactionsPayload{
		Username:        body.Username,
		ProductName:     body.ProductName,
		PageNumber:      body.PageNumber,
		Count:           body.Count,
		StartDate:       body.StartDate,
		EndDate:         body.EndDate,
		Category:        body.Category,
		Provider:        body.Provider,
		Status:          body.Status,
		Source:          body.Source,
		Destination:     body.Destination,
		ProviderChannel: body.ProviderChannel,
	}

	return v, nil
}

// BuildFetchWalletTransactionsPayload builds the payload for the
// africastalking FetchWalletTransactions endpoint from CLI flags.
func BuildFetchWalletTransactionsPayload(africastalkingFetchWalletTransactionsBody string) (*africastalking.WalletTransactionsPayload, error) {
	var err error
	var body FetchWalletTransactionsRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchWalletTransactionsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"categories\": \"MobileB2C\",\n      \"count\": 242,\n      \"endDate\": \"2003-12-12\",\n      \"pageNumber\": 937507102661436005,\n      \"startDate\": \"1991-01-30\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.PageNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pageNumber", body.PageNumber, 1, true))
		}
		if body.Count < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1, true))
		}
		if body.Count > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1000, false))
		}
		if body.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDate))
		}
		if body.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDate))
		}
		if body.Categories != nil {
			if !(*body.Categories == "BankCheckout" || *body.Categories == "CardCheckout" || *body.Categories == "MobileCheckout" || *body.Categories == "MobileC2B" || *body.Categories == "MobileB2C" || *body.Categories == "MobileB2B" || *body.Categories == "BankTransfer" || *body.Categories == "WalletTransfer" || *body.Categories == "UserStashTopup") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.categories", *body.Categories, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.WalletTransactionsPayload{
		Username:   body.Username,
		PageNumber: body.PageNumber,
		Count:      body.Count,
		StartDate:  body.StartDate,
		EndDate:    body.EndDate,
		Categories: body.Categories,
	}

	return v, nil
}

// BuildFetchWalletBalancePayload builds the payload for the africastalking
// FetchWalletBalance endpoint from CLI flags.
func BuildFetchWalletBalancePayload(africastalkingFetchWalletBalanceBody string) (*africastalking.WalletBalancePayload, error) {
	var err error
	var body FetchWalletBalanceRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchWalletBalanceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.WalletBalancePayload{
		Username: body.Username,
	}

	return v, nil
}

// BuildSendAirtimePayload builds the payload for the africastalking
// SendAirtime endpoint from CLI flags.
func BuildSendAirtimePayload(africastalkingSendAirtimeBody string) (*africastalking.AirtimePayload, error) {
	var err error
	var body SendAirtimeRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendAirtimeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"recipients\": [\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         },\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         }\n      ],\n      \"username\": \"Quisquam in tempora sequi.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.AirtimePayload{
		Username: body.Username,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.AirtimeRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients(val)
		}
	}

	return v, nil
}

// BuildPublishIoTPayload builds the payload for the africastalking PublishIoT
// endpoint from CLI flags.
func BuildPublishIoTPayload(africastalkingPublishIoTBody string) (*africastalking.IoTPayload, error) {
	var err error
	var body PublishIoTRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPublishIoTBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"deviceGroup\": \"Quia molestiae est neque cum.\",\n      \"payload\": \"Consequuntur nesciunt.\",\n      \"topic\": \"\\u003cusername\\u003e/\\u003cdevice-group\\u003e/\\u003cthe-topic\\u003e\",\n      \"username\": \"Voluptatem aliquam ut perferendis sunt ipsam.\"\n   }'")
		}
	}
	v := &africastalking.IoTPayload{
		Username:    body.Username,
		DeviceGroup: body.DeviceGroup,
		Topic:       body.Topic,
		Payload:     body.Payload,
	}

	return v, nil
}

// BuildGeneratePayload builds the payload for the africastalking Generate
// endpoint from CLI flags.
func BuildGeneratePayload(africastalkingGenerateBody string) (*africastalking.GeneratePayload, error) {
	var err error
	var body GenerateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingGenerateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"apiKey\": \"Aut sed inventore consectetur mollitia.\",\n      \"username\": \"sandbox\"\n   }'")
		}
	}
	v := &africastalking.GeneratePayload{
		Username: body.Username,
		APIKey:   body.APIKey,
	}

	return v, nil
}
