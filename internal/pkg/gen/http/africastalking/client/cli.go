// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-go/internal/design -o internal/pkg

package client

import (
	"encoding/json"
	"fmt"

	africastalking "github.com/wondenge/at-go/internal/pkg/gen/africastalking"
	goa "goa.design/goa/v3/pkg"
)

// BuildSendBulkSMSPayload builds the payload for the africastalking
// SendBulkSMS endpoint from CLI flags.
func BuildSendBulkSMSPayload(africastalkingSendBulkSMSBody string) (*africastalking.BulkPayload, error) {
	var err error
	var body SendBulkSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendBulkSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"bulkSMSMode\": 8384610134235997494,\n      \"enqueue\": 0,\n      \"from\": \"Quis et vero odit.\",\n      \"keyword\": \"Ea unde nisi et.\",\n      \"linkId\": \"Sint est itaque.\",\n      \"message\": \"Asperiores qui est est dolorem repellendus.\",\n      \"retryDurationInHours\": \"Quis atque et est.\",\n      \"to\": \"Odit voluptatem totam reiciendis recusandae est.\",\n      \"username\": \"Itaque porro ipsa saepe molestias inventore.\"\n   }'")
		}
		if !(body.Enqueue == 0 || body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", body.Enqueue, []interface{}{0, 1}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BulkPayload{
		Username:             body.Username,
		To:                   body.To,
		Message:              body.Message,
		From:                 body.From,
		BulkSMSMode:          body.BulkSMSMode,
		Enqueue:              body.Enqueue,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}

	return v, nil
}

// BuildSendPremiumSMSPayload builds the payload for the africastalking
// SendPremiumSMS endpoint from CLI flags.
func BuildSendPremiumSMSPayload(africastalkingSendPremiumSMSBody string) (*africastalking.PremiumPayload, error) {
	var err error
	var body SendPremiumSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendPremiumSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"bulkSMSMode\": 2952784659881196971,\n      \"enqueue\": 1,\n      \"from\": \"Odio dolor architecto hic non vel eos.\",\n      \"keyword\": \"Voluptatem et magni.\",\n      \"linkId\": \"Aliquid reiciendis est iusto non ut deserunt.\",\n      \"message\": \"Eos ratione quisquam reiciendis.\",\n      \"retryDurationInHours\": \"Quasi nostrum id libero consequuntur velit ut.\",\n      \"to\": \"Omnis aut magni est inventore excepturi harum.\",\n      \"username\": \"Maxime rem.\"\n   }'")
		}
		if !(body.Enqueue == 0 || body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", body.Enqueue, []interface{}{0, 1}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.PremiumPayload{
		Username:             body.Username,
		To:                   body.To,
		Message:              body.Message,
		From:                 body.From,
		BulkSMSMode:          body.BulkSMSMode,
		Enqueue:              body.Enqueue,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}

	return v, nil
}

// BuildFetchSMSPayload builds the payload for the africastalking FetchSMS
// endpoint from CLI flags.
func BuildFetchSMSPayload(africastalkingFetchSMSBody string) (*africastalking.FetchMsgPayload, error) {
	var err error
	var body FetchSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"lastReceivedId\": \"Nobis velit ea.\",\n      \"username\": \"Mollitia esse id similique.\"\n   }'")
		}
	}
	v := &africastalking.FetchMsgPayload{
		Username:       body.Username,
		LastReceivedID: body.LastReceivedID,
	}

	return v, nil
}

// BuildNewCheckoutTokenPayload builds the payload for the africastalking
// NewCheckoutToken endpoint from CLI flags.
func BuildNewCheckoutTokenPayload(africastalkingNewCheckoutTokenBody string) (*africastalking.CheckoutTokenPayload, error) {
	var err error
	var body NewCheckoutTokenRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingNewCheckoutTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumber\": \"Est est omnis ab placeat sint.\"\n   }'")
		}
	}
	v := &africastalking.CheckoutTokenPayload{
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildNewPremiumSubscriptionPayload builds the payload for the africastalking
// NewPremiumSubscription endpoint from CLI flags.
func BuildNewPremiumSubscriptionPayload(africastalkingNewPremiumSubscriptionBody string) (*africastalking.NewSubPayload, error) {
	var err error
	var body NewPremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingNewPremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"checkoutToken\": \"\",\n      \"keyword\": \"\",\n      \"phoneNumber\": \"\",\n      \"shortCode\": \"\",\n      \"username\": \"Sed eveniet aut non.\"\n   }'")
		}
	}
	v := &africastalking.NewSubPayload{
		Username:      body.Username,
		ShortCode:     body.ShortCode,
		Keyword:       body.Keyword,
		PhoneNumber:   body.PhoneNumber,
		CheckoutToken: body.CheckoutToken,
	}

	return v, nil
}

// BuildFetchPremiumSubscriptionPayload builds the payload for the
// africastalking FetchPremiumSubscription endpoint from CLI flags.
func BuildFetchPremiumSubscriptionPayload(africastalkingFetchPremiumSubscriptionBody string) (*africastalking.FetchSubPayload, error) {
	var err error
	var body FetchPremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchPremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"\",\n      \"lastReceivedId\": \"Alias vero eligendi.\",\n      \"shortCode\": \"\",\n      \"username\": \"Ipsa veritatis eveniet sapiente velit quia.\"\n   }'")
		}
	}
	v := &africastalking.FetchSubPayload{
		Username:       body.Username,
		ShortCode:      body.ShortCode,
		Keyword:        body.Keyword,
		LastReceivedID: body.LastReceivedID,
	}

	return v, nil
}

// BuildPurgePremiumSubscriptionPayload builds the payload for the
// africastalking PurgePremiumSubscription endpoint from CLI flags.
func BuildPurgePremiumSubscriptionPayload(africastalkingPurgePremiumSubscriptionBody string) (*africastalking.PurgeSubPayload, error) {
	var err error
	var body PurgePremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPurgePremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"\",\n      \"phoneNumber\": \"\",\n      \"shortCode\": \"\",\n      \"username\": \"Quia voluptatem aperiam et et illo.\"\n   }'")
		}
	}
	v := &africastalking.PurgeSubPayload{
		Username:    body.Username,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildMakeCallPayload builds the payload for the africastalking MakeCall
// endpoint from CLI flags.
func BuildMakeCallPayload(africastalkingMakeCallBody string) (*africastalking.MakeCallPayload, error) {
	var err error
	var body MakeCallRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMakeCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"clientRequestId\": \"Blanditiis impedit minima.\",\n      \"from\": \"Et aut.\",\n      \"to\": \"Et et non quos.\",\n      \"username\": \"Quis numquam deserunt.\"\n   }'")
		}
	}
	v := &africastalking.MakeCallPayload{
		Username:        body.Username,
		From:            body.From,
		To:              body.To,
		ClientRequestID: body.ClientRequestID,
	}

	return v, nil
}

// BuildTransferCallPayload builds the payload for the africastalking
// TransferCall endpoint from CLI flags.
func BuildTransferCallPayload(africastalkingTransferCallBody string) (*africastalking.CallTransferPayload, error) {
	var err error
	var body TransferCallRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTransferCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callLeg\": \"caller\",\n      \"holdMusicUrl\": \"Eius sed.\",\n      \"phoneNumber\": \"Quidem voluptas commodi et consequatur ut.\",\n      \"sessionId\": \"Voluptates labore.\"\n   }'")
		}
		if !(body.CallLeg == "caller" || body.CallLeg == "callee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callLeg", body.CallLeg, []interface{}{"caller", "callee"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.CallTransferPayload{
		SessionID:    body.SessionID,
		PhoneNumber:  body.PhoneNumber,
		CallLeg:      body.CallLeg,
		HoldMusicURL: body.HoldMusicURL,
	}

	return v, nil
}

// BuildUploadMediaPayload builds the payload for the africastalking
// UploadMedia endpoint from CLI flags.
func BuildUploadMediaPayload(africastalkingUploadMediaBody string) (*africastalking.UploadMediaFile, error) {
	var err error
	var body UploadMediaRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingUploadMediaBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"url\": \"Vel ut ut assumenda quaerat.\",\n      \"username\": \"Et non rem.\"\n   }'")
		}
	}
	v := &africastalking.UploadMediaFile{
		Username: body.Username,
		URL:      body.URL,
	}

	return v, nil
}

// BuildMobileCheckoutPayload builds the payload for the africastalking
// MobileCheckout endpoint from CLI flags.
func BuildMobileCheckoutPayload(africastalkingMobileCheckoutBody string) (*africastalking.MobileCheckoutPayload, error) {
	var err error
	var body MobileCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 3000,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Fuga qui repellat quidem.\": \"Quis distinctio quis et ex.\",\n         \"Nulla est inventore consequatur ut quo.\": \"Omnis maxime provident nihil quidem.\",\n         \"Soluta et ipsa.\": \"Rerum porro.\"\n      },\n      \"phoneNumber\": \"+254711XXXYYY\",\n      \"productName\": \"myProductName\",\n      \"providerChannel\": \"myProviderChannel\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.MobileCheckoutPayload{
		Username:        body.Username,
		ProductName:     body.ProductName,
		ProviderChannel: body.ProviderChannel,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildMobileB2CPayload builds the payload for the africastalking MobileB2C
// endpoint from CLI flags.
func BuildMobileB2CPayload(africastalkingMobileB2CBody string) (*africastalking.MobileB2CPayload, error) {
	var err error
	var body MobileB2CRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileB2CBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"productName\": \"myProductName\",\n      \"recipients\": [\n         {\n            \"amount\": 100.5,\n            \"currencyCode\": \"KES\",\n            \"metadata\": {\n               \"OqkdMh\": \"RwMfHN\",\n               \"QawIGK\": \"mr\"\n            },\n            \"name\": \"name\",\n            \"phoneNumber\": \"+254711XXXYYY\",\n            \"providerChannel\": \"myProviderChannel\",\n            \"reason\": \"SalaryPayment\"\n         },\n         {\n            \"amount\": 100.5,\n            \"currencyCode\": \"KES\",\n            \"metadata\": {\n               \"OqkdMh\": \"RwMfHN\",\n               \"QawIGK\": \"mr\"\n            },\n            \"name\": \"name\",\n            \"phoneNumber\": \"+254711XXXYYY\",\n            \"providerChannel\": \"myProviderChannel\",\n            \"reason\": \"SalaryPayment\"\n         },\n         {\n            \"amount\": 100.5,\n            \"currencyCode\": \"KES\",\n            \"metadata\": {\n               \"OqkdMh\": \"RwMfHN\",\n               \"QawIGK\": \"mr\"\n            },\n            \"name\": \"name\",\n            \"phoneNumber\": \"+254711XXXYYY\",\n            \"providerChannel\": \"myProviderChannel\",\n            \"reason\": \"SalaryPayment\"\n         }\n      ],\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if len(body.Recipients) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 1, true))
		}
		if len(body.Recipients) > 10 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 10, false))
		}
		for _, e := range body.Recipients {
			if e != nil {
				if err2 := ValidateMobileRecipientsRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.MobileB2CPayload{
		Username:    body.Username,
		ProductName: body.ProductName,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.MobileRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients(val)
		}
	}

	return v, nil
}

// BuildMobileB2BPayload builds the payload for the africastalking MobileB2B
// endpoint from CLI flags.
func BuildMobileB2BPayload(africastalkingMobileB2BBody string) (*africastalking.MobileB2BPayload, error) {
	var err error
	var body MobileB2BRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileB2BBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 3000,\n      \"currencyCode\": \"KES\",\n      \"destinationAccount\": \"Account Name\",\n      \"destinationChannel\": \"Buy Goods Number\",\n      \"metadata\": {\n         \"FwOA\": \"EbHFN\",\n         \"lB\": \"ExdMn\",\n         \"wSLs\": \"RF\"\n      },\n      \"productName\": \"myProductName\",\n      \"provider\": \"Mpesa\",\n      \"transferType\": \"BusinessBuyGoods\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.MobileB2BPayload{
		Username:           body.Username,
		ProductName:        body.ProductName,
		Provider:           body.Provider,
		TransferType:       body.TransferType,
		CurrencyCode:       body.CurrencyCode,
		Amount:             body.Amount,
		DestinationChannel: body.DestinationChannel,
		DestinationAccount: body.DestinationAccount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildBankCheckoutPayload builds the payload for the africastalking Bank
// Checkout endpoint from CLI flags.
func BuildBankCheckoutPayload(africastalkingBankCheckoutBody string) (*africastalking.BankCheckoutPayload, error) {
	var err error
	var body BankCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 39393,\n      \"bankAccount\": {\n         \"accountName\": \"Test Bank Account\",\n         \"accountNumber\": \"1234567890\",\n         \"bankCode\": 234001,\n         \"dateOfBirth\": \"1976-09-20\"\n      },\n      \"currencyCode\": \"NGN\",\n      \"metadata\": {\n         \"NPgWJ\": \"kdE\",\n         \"UzgPjL\": \"s\"\n      },\n      \"narration\": \"payment for airtime\",\n      \"productName\": \"myPaymentProductName\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.BankAccount == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("bankAccount", "body"))
		}
		if body.BankAccount != nil {
			if err2 := ValidateBankAccountRequestBody(body.BankAccount); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BankCheckoutPayload{
		Username:     body.Username,
		ProductName:  body.ProductName,
		CurrencyCode: body.CurrencyCode,
		Amount:       body.Amount,
		Narration:    body.Narration,
	}
	if body.BankAccount != nil {
		v.BankAccount = marshalBankAccountRequestBodyToAfricastalkingBankAccount(body.BankAccount)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildBankCheckoutValidatePayload builds the payload for the africastalking
// BankCheckoutValidate endpoint from CLI flags.
func BuildBankCheckoutValidatePayload(africastalkingBankCheckoutValidateBody string) (*africastalking.BankCheckoutValidatePayload, error) {
	var err error
	var body BankCheckoutValidateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankCheckoutValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"otp\": \"Quia tempora quia voluptatem et voluptatem.\",\n      \"transactionId\": \"Sed qui dolores nihil.\",\n      \"username\": \"Iure molestiae eligendi laudantium est.\"\n   }'")
		}
	}
	v := &africastalking.BankCheckoutValidatePayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
		Otp:           body.Otp,
	}

	return v, nil
}

// BuildBankTransferPayload builds the payload for the africastalking
// BankTransfer endpoint from CLI flags.
func BuildBankTransferPayload(africastalkingBankTransferBody string) (*africastalking.BankTransferPayload, error) {
	var err error
	var body BankTransferRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"productName\": \"Rem tempora quos facere voluptatem ut.\",\n      \"recipients\": [\n         {\n            \"accountName\": \"Dolorum iure ut perferendis quidem facilis velit.\",\n            \"accountNumber\": \"Qui ut.\",\n            \"amount\": \"Quia adipisci laudantium similique tenetur.\",\n            \"bankAccount\": \"Fuga dolorem ea quidem.\",\n            \"bankCode\": \"Exercitationem sed repellat.\",\n            \"currencyCode\": \"Dolores nisi consequatur et quibusdam.\",\n            \"dateOfBirth\": \"Fugit maiores minus.\",\n            \"metadata\": {\n               \"Est qui velit voluptatem.\": \"Consequatur maiores.\"\n            },\n            \"narration\": \"Et alias commodi laudantium vel quibusdam.\"\n         },\n         {\n            \"accountName\": \"Dolorum iure ut perferendis quidem facilis velit.\",\n            \"accountNumber\": \"Qui ut.\",\n            \"amount\": \"Quia adipisci laudantium similique tenetur.\",\n            \"bankAccount\": \"Fuga dolorem ea quidem.\",\n            \"bankCode\": \"Exercitationem sed repellat.\",\n            \"currencyCode\": \"Dolores nisi consequatur et quibusdam.\",\n            \"dateOfBirth\": \"Fugit maiores minus.\",\n            \"metadata\": {\n               \"Est qui velit voluptatem.\": \"Consequatur maiores.\"\n            },\n            \"narration\": \"Et alias commodi laudantium vel quibusdam.\"\n         },\n         {\n            \"accountName\": \"Dolorum iure ut perferendis quidem facilis velit.\",\n            \"accountNumber\": \"Qui ut.\",\n            \"amount\": \"Quia adipisci laudantium similique tenetur.\",\n            \"bankAccount\": \"Fuga dolorem ea quidem.\",\n            \"bankCode\": \"Exercitationem sed repellat.\",\n            \"currencyCode\": \"Dolores nisi consequatur et quibusdam.\",\n            \"dateOfBirth\": \"Fugit maiores minus.\",\n            \"metadata\": {\n               \"Est qui velit voluptatem.\": \"Consequatur maiores.\"\n            },\n            \"narration\": \"Et alias commodi laudantium vel quibusdam.\"\n         }\n      ],\n      \"username\": \"Quia minus modi molestias.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if len(body.Recipients) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BankTransferPayload{
		Username:    body.Username,
		ProductName: body.ProductName,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.TransferRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients(val)
		}
	}

	return v, nil
}

// BuildCardCheckoutPayload builds the payload for the africastalking
// CardCheckout endpoint from CLI flags.
func BuildCardCheckoutPayload(africastalkingCardCheckoutBody string) (*africastalking.CardCheckoutPayload, error) {
	var err error
	var body CardCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingCardCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 10000.5,\n      \"checkoutToken\": \"1234\",\n      \"currencyCode\": \"NGN\",\n      \"metadata\": {\n         \"Foo\": \"Bar\"\n      },\n      \"narration\": \"Monthly service charge for My Online Store\",\n      \"paymentCard\": {\n         \"authToken\": \"1234\",\n         \"countryCode\": \"NG\",\n         \"cvvNumber\": 123,\n         \"expiryMonth\": 8,\n         \"expiryYear\": 2019,\n         \"number\": \"1234567890\"\n      },\n      \"productName\": \"myProductName\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.PaymentCard != nil {
			if err2 := ValidatePaymentCardRequestBody(body.PaymentCard); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.CardCheckoutPayload{
		Username:      body.Username,
		ProductName:   body.ProductName,
		CheckoutToken: body.CheckoutToken,
		CurrencyCode:  body.CurrencyCode,
		Amount:        body.Amount,
		Narration:     body.Narration,
	}
	if body.PaymentCard != nil {
		v.PaymentCard = marshalPaymentCardRequestBodyToAfricastalkingPaymentCard(body.PaymentCard)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildCardCheckoutValidatePayload builds the payload for the africastalking
// CardCheckoutValidate endpoint from CLI flags.
func BuildCardCheckoutValidatePayload(africastalkingCardCheckoutValidateBody string) (*africastalking.CardCheckoutValidatePayload, error) {
	var err error
	var body CardCheckoutValidateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingCardCheckoutValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"otp\": \"Molestiae vel.\",\n      \"transactionId\": \"Eveniet et magnam maxime porro.\",\n      \"username\": \"Veritatis qui maiores.\"\n   }'")
		}
	}
	v := &africastalking.CardCheckoutValidatePayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
		Otp:           body.Otp,
	}

	return v, nil
}

// BuildWalletTransferPayload builds the payload for the africastalking
// WalletTransfer endpoint from CLI flags.
func BuildWalletTransferPayload(africastalkingWalletTransferBody string) (*africastalking.WalletTransferPayload, error) {
	var err error
	var body WalletTransferRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingWalletTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 2000,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Foo\": \"Bar\"\n      },\n      \"productName\": \"myProductName\",\n      \"targetProductCode\": 2373,\n      \"username\": \"MyUserName\"\n   }'")
		}
		if body.Metadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.WalletTransferPayload{
		Username:          body.Username,
		ProductName:       body.ProductName,
		TargetProductCode: body.TargetProductCode,
		CurrencyCode:      body.CurrencyCode,
		Amount:            body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildTopupStashPayload builds the payload for the africastalking TopupStash
// endpoint from CLI flags.
func BuildTopupStashPayload(africastalkingTopupStashBody string) (*africastalking.TopupStashPayload, error) {
	var err error
	var body TopupStashRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTopupStashBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 2000,\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Foo\": \"Bar\"\n      },\n      \"productName\": \"myProductName\",\n      \"username\": \"MyUserName\"\n   }'")
		}
		if body.Metadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
		}
		for k, v := range body.Metadata {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata.key", k, "[a-zA-Z]+"))
			err = goa.MergeErrors(err, goa.ValidatePattern("body.metadata[key]", v, "[a-zA-Z]+"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.TopupStashPayload{
		Username:     body.Username,
		ProductName:  body.ProductName,
		CurrencyCode: body.CurrencyCode,
		Amount:       body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildFindTransactionPayload builds the payload for the africastalking
// FindTransaction endpoint from CLI flags.
func BuildFindTransactionPayload(africastalkingFindTransactionBody string) (*africastalking.FindTransactionPayload, error) {
	var err error
	var body FindTransactionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFindTransactionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"transactionId\": \"394828XXXV\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.FindTransactionPayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
	}

	return v, nil
}

// BuildFetchProductTransactionsPayload builds the payload for the
// africastalking FetchProductTransactions endpoint from CLI flags.
func BuildFetchProductTransactionsPayload(africastalkingFetchProductTransactionsBody string) (*africastalking.ProductTransactionsPayload, error) {
	var err error
	var body FetchProductTransactionsRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchProductTransactionsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"category\": \"UserStashTopup\",\n      \"count\": 740,\n      \"destination\": \"BankAccount\",\n      \"endDate\": \"2015-02-12\",\n      \"pageNumber\": 2369339247652617210,\n      \"productName\": \"MyProductName\",\n      \"provider\": \"Athena\",\n      \"providerChannel\": \"Dolor minima quidem harum dicta unde sit.\",\n      \"source\": \"phoneNumber\",\n      \"startDate\": \"1990-01-03\",\n      \"status\": \"Success\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.PageNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pageNumber", body.PageNumber, 1, true))
		}
		if body.Count < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1, true))
		}
		if body.Count > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1000, false))
		}
		if body.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDate))
		}
		if body.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDate))
		}
		if body.Category != nil {
			if !(*body.Category == "BankCheckout" || *body.Category == "CardCheckout" || *body.Category == "MobileCheckout" || *body.Category == "MobileC2B" || *body.Category == "MobileB2C" || *body.Category == "MobileB2B" || *body.Category == "BankTransfer" || *body.Category == "WalletTransfer" || *body.Category == "UserStashTopup") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.category", *body.Category, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
			}
		}
		if body.Provider != nil {
			if !(*body.Provider == "Mpesa" || *body.Provider == "Segovia" || *body.Provider == "Flutterwave" || *body.Provider == "Admin" || *body.Provider == "Athena") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.provider", *body.Provider, []interface{}{"Mpesa", "Segovia", "Flutterwave", "Admin", "Athena"}))
			}
		}
		if body.Status != nil {
			if !(*body.Status == "Success" || *body.Status == "Failed") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.status", *body.Status, []interface{}{"Success", "Failed"}))
			}
		}
		if body.Source != nil {
			if !(*body.Source == "phoneNumber" || *body.Source == "BankAccount" || *body.Source == "Card" || *body.Source == "Wallet") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.source", *body.Source, []interface{}{"phoneNumber", "BankAccount", "Card", "Wallet"}))
			}
		}
		if body.Destination != nil {
			if !(*body.Destination == "PhoneNumber" || *body.Destination == "BankAccount" || *body.Destination == "Card" || *body.Destination == "Wallet") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.destination", *body.Destination, []interface{}{"PhoneNumber", "BankAccount", "Card", "Wallet"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.ProductTransactionsPayload{
		Username:        body.Username,
		ProductName:     body.ProductName,
		PageNumber:      body.PageNumber,
		Count:           body.Count,
		StartDate:       body.StartDate,
		EndDate:         body.EndDate,
		Category:        body.Category,
		Provider:        body.Provider,
		Status:          body.Status,
		Source:          body.Source,
		Destination:     body.Destination,
		ProviderChannel: body.ProviderChannel,
	}

	return v, nil
}

// BuildFetchWalletTransactionsPayload builds the payload for the
// africastalking FetchWalletTransactions endpoint from CLI flags.
func BuildFetchWalletTransactionsPayload(africastalkingFetchWalletTransactionsBody string) (*africastalking.WalletTransactionsPayload, error) {
	var err error
	var body FetchWalletTransactionsRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchWalletTransactionsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"categories\": \"MobileCheckout\",\n      \"count\": 364,\n      \"endDate\": \"1986-04-03\",\n      \"pageNumber\": 979655238485343378,\n      \"startDate\": \"1990-07-03\",\n      \"username\": \"MyAppUserName\"\n   }'")
		}
		if body.PageNumber < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.pageNumber", body.PageNumber, 1, true))
		}
		if body.Count < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1, true))
		}
		if body.Count > 1000 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.count", body.Count, 1000, false))
		}
		if body.StartDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.startDate", *body.StartDate, goa.FormatDate))
		}
		if body.EndDate != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.endDate", *body.EndDate, goa.FormatDate))
		}
		if body.Categories != nil {
			if !(*body.Categories == "BankCheckout" || *body.Categories == "CardCheckout" || *body.Categories == "MobileCheckout" || *body.Categories == "MobileC2B" || *body.Categories == "MobileB2C" || *body.Categories == "MobileB2B" || *body.Categories == "BankTransfer" || *body.Categories == "WalletTransfer" || *body.Categories == "UserStashTopup") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.categories", *body.Categories, []interface{}{"BankCheckout", "CardCheckout", "MobileCheckout", "MobileC2B", "MobileB2C", "MobileB2B", "BankTransfer", "WalletTransfer", "UserStashTopup"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.WalletTransactionsPayload{
		Username:   body.Username,
		PageNumber: body.PageNumber,
		Count:      body.Count,
		StartDate:  body.StartDate,
		EndDate:    body.EndDate,
		Categories: body.Categories,
	}

	return v, nil
}

// BuildFetchWalletBalancePayload builds the payload for the africastalking
// FetchWalletBalance endpoint from CLI flags.
func BuildFetchWalletBalancePayload(africastalkingFetchWalletBalanceBody string) (*africastalking.WalletBalancePayload, error) {
	var err error
	var body FetchWalletBalanceRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingFetchWalletBalanceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"username\": \"MyAppUserName\"\n   }'")
		}
	}
	v := &africastalking.WalletBalancePayload{
		Username: body.Username,
	}

	return v, nil
}

// BuildSendAirtimePayload builds the payload for the africastalking
// SendAirtime endpoint from CLI flags.
func BuildSendAirtimePayload(africastalkingSendAirtimeBody string) (*africastalking.AirtimePayload, error) {
	var err error
	var body SendAirtimeRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendAirtimeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"recipients\": [\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         },\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         },\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         },\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         }\n      ],\n      \"username\": \"Enim laudantium iure veniam.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.AirtimePayload{
		Username: body.Username,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.AirtimeRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients(val)
		}
	}

	return v, nil
}

// BuildPublishIoTPayload builds the payload for the africastalking PublishIoT
// endpoint from CLI flags.
func BuildPublishIoTPayload(africastalkingPublishIoTBody string) (*africastalking.IoTPayload, error) {
	var err error
	var body PublishIoTRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPublishIoTBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"deviceGroup\": \"Nisi amet et at.\",\n      \"payload\": \"Ducimus eligendi.\",\n      \"topic\": \"\\u003cusername\\u003e/\\u003cdevice-group\\u003e/\\u003cthe-topic\\u003e\",\n      \"username\": \"Eaque nostrum cum.\"\n   }'")
		}
	}
	v := &africastalking.IoTPayload{
		Username:    body.Username,
		DeviceGroup: body.DeviceGroup,
		Topic:       body.Topic,
		Payload:     body.Payload,
	}

	return v, nil
}

// BuildGeneratePayload builds the payload for the africastalking Generate
// endpoint from CLI flags.
func BuildGeneratePayload(africastalkingGenerateBody string) (*africastalking.GeneratePayload, error) {
	var err error
	var body GenerateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingGenerateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"apiKey\": \"Quasi animi omnis.\",\n      \"username\": \"sandbox\"\n   }'")
		}
	}
	v := &africastalking.GeneratePayload{
		Username: body.Username,
		APIKey:   body.APIKey,
	}

	return v, nil
}
