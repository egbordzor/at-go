// Code generated by goa v3.1.3, DO NOT EDIT.
//
// africastalking HTTP client CLI support package
//
// Command:
// $ goa gen github.com/wondenge/at-go/design -o internal/pkg

package client

import (
	"encoding/json"
	"fmt"

	africastalking "github.com/wondenge/at-go/internal/pkg/gen/africastalking"
	goa "goa.design/goa/v3/pkg"
)

// BuildSendBulkSMSPayload builds the payload for the africastalking
// SendBulkSMS endpoint from CLI flags.
func BuildSendBulkSMSPayload(africastalkingSendBulkSMSBody string) (*africastalking.BulkPayload, error) {
	var err error
	var body SendBulkSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendBulkSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"bulkSMSMode\": 183103216611454320,\n      \"enqueue\": 1,\n      \"from\": \"Et alias commodi laudantium vel quibusdam.\",\n      \"keyword\": \"Qui velit voluptatem nulla.\",\n      \"linkId\": \"Maiores enim expedita quis nulla dolorem.\",\n      \"message\": \"Quia adipisci laudantium similique tenetur.\",\n      \"retryDurationInHours\": \"Qui maiores.\",\n      \"to\": \"Et quibusdam.\",\n      \"username\": \"Vel fugit maiores minus aut dolores nisi.\"\n   }'")
		}
		if !(body.Enqueue == 0 || body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", body.Enqueue, []interface{}{0, 1}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BulkPayload{
		Username:             body.Username,
		To:                   body.To,
		Message:              body.Message,
		From:                 body.From,
		BulkSMSMode:          body.BulkSMSMode,
		Enqueue:              body.Enqueue,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}

	return v, nil
}

// BuildSendPremiumSMSPayload builds the payload for the africastalking
// SendPremiumSMS endpoint from CLI flags.
func BuildSendPremiumSMSPayload(africastalkingSendPremiumSMSBody string) (*africastalking.PremiumPayload, error) {
	var err error
	var body SendPremiumSMSRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendPremiumSMSBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"bulkSMSMode\": 2827138256472368539,\n      \"enqueue\": 1,\n      \"from\": \"Alias ipsum unde aut dolore cupiditate.\",\n      \"keyword\": \"Quasi sed id incidunt praesentium dolorem.\",\n      \"linkId\": \"Qui laborum quaerat adipisci et.\",\n      \"message\": \"Eos repellat quo.\",\n      \"retryDurationInHours\": \"Ut dolorum temporibus.\",\n      \"to\": \"Dolores molestiae vel.\",\n      \"username\": \"Et magnam maxime.\"\n   }'")
		}
		if !(body.Enqueue == 0 || body.Enqueue == 1) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.enqueue", body.Enqueue, []interface{}{0, 1}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.PremiumPayload{
		Username:             body.Username,
		To:                   body.To,
		Message:              body.Message,
		From:                 body.From,
		BulkSMSMode:          body.BulkSMSMode,
		Enqueue:              body.Enqueue,
		Keyword:              body.Keyword,
		LinkID:               body.LinkID,
		RetryDurationInHours: body.RetryDurationInHours,
	}

	return v, nil
}

// BuildFetchSMSPayload builds the payload for the africastalking FetchSMS
// endpoint from CLI flags.
func BuildFetchSMSPayload(africastalkingFetchSMSUsername string, africastalkingFetchSMSLastReceivedID string) (*africastalking.FetchMsgPayload, error) {
	var username string
	{
		username = africastalkingFetchSMSUsername
	}
	var lastReceivedID string
	{
		if africastalkingFetchSMSLastReceivedID != "" {
			lastReceivedID = africastalkingFetchSMSLastReceivedID
		}
	}
	v := &africastalking.FetchMsgPayload{}
	v.Username = username
	v.LastReceivedID = lastReceivedID

	return v, nil
}

// BuildNewCheckoutTokenPayload builds the payload for the africastalking
// NewCheckoutToken endpoint from CLI flags.
func BuildNewCheckoutTokenPayload(africastalkingNewCheckoutTokenBody string) (*africastalking.CheckoutTokenPayload, error) {
	var err error
	var body NewCheckoutTokenRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingNewCheckoutTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumber\": \"Quibusdam omnis.\"\n   }'")
		}
	}
	v := &africastalking.CheckoutTokenPayload{
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildNewPremiumSubscriptionPayload builds the payload for the africastalking
// NewPremiumSubscription endpoint from CLI flags.
func BuildNewPremiumSubscriptionPayload(africastalkingNewPremiumSubscriptionBody string) (*africastalking.NewSubPayload, error) {
	var err error
	var body NewPremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingNewPremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"checkoutToken\": \"\",\n      \"keyword\": \"\",\n      \"phoneNumber\": \"\",\n      \"shortCode\": \"\",\n      \"username\": \"Dolorem ad est.\"\n   }'")
		}
	}
	v := &africastalking.NewSubPayload{
		Username:      body.Username,
		ShortCode:     body.ShortCode,
		Keyword:       body.Keyword,
		PhoneNumber:   body.PhoneNumber,
		CheckoutToken: body.CheckoutToken,
	}

	return v, nil
}

// BuildFetchPremiumSubscriptionPayload builds the payload for the
// africastalking FetchPremiumSubscription endpoint from CLI flags.
func BuildFetchPremiumSubscriptionPayload(africastalkingFetchPremiumSubscriptionUsername string, africastalkingFetchPremiumSubscriptionShortCode string, africastalkingFetchPremiumSubscriptionKeyword string, africastalkingFetchPremiumSubscriptionLastReceivedID string) (*africastalking.FetchSubPayload, error) {
	var username string
	{
		username = africastalkingFetchPremiumSubscriptionUsername
	}
	var shortCode string
	{
		shortCode = africastalkingFetchPremiumSubscriptionShortCode
	}
	var keyword string
	{
		keyword = africastalkingFetchPremiumSubscriptionKeyword
	}
	var lastReceivedID string
	{
		if africastalkingFetchPremiumSubscriptionLastReceivedID != "" {
			lastReceivedID = africastalkingFetchPremiumSubscriptionLastReceivedID
		}
	}
	v := &africastalking.FetchSubPayload{}
	v.Username = username
	v.ShortCode = shortCode
	v.Keyword = keyword
	v.LastReceivedID = lastReceivedID

	return v, nil
}

// BuildPurgePremiumSubscriptionPayload builds the payload for the
// africastalking PurgePremiumSubscription endpoint from CLI flags.
func BuildPurgePremiumSubscriptionPayload(africastalkingPurgePremiumSubscriptionBody string) (*africastalking.PurgeSubPayload, error) {
	var err error
	var body PurgePremiumSubscriptionRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPurgePremiumSubscriptionBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"keyword\": \"\",\n      \"phoneNumber\": \"\",\n      \"shortCode\": \"\",\n      \"username\": \"Repudiandae aut esse voluptate et et eos.\"\n   }'")
		}
	}
	v := &africastalking.PurgeSubPayload{
		Username:    body.Username,
		ShortCode:   body.ShortCode,
		Keyword:     body.Keyword,
		PhoneNumber: body.PhoneNumber,
	}

	return v, nil
}

// BuildMakeCallPayload builds the payload for the africastalking MakeCall
// endpoint from CLI flags.
func BuildMakeCallPayload(africastalkingMakeCallBody string) (*africastalking.MakeCallPayload, error) {
	var err error
	var body MakeCallRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMakeCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"clientRequestId\": \"Et optio ut quod est.\",\n      \"from\": \"Sequi vel odit nobis aut natus ut.\",\n      \"to\": \"Aliquam dolorem.\",\n      \"username\": \"Aut dolores est omnis repellat.\"\n   }'")
		}
	}
	v := &africastalking.MakeCallPayload{
		Username:        body.Username,
		From:            body.From,
		To:              body.To,
		ClientRequestID: body.ClientRequestID,
	}

	return v, nil
}

// BuildTransferCallPayload builds the payload for the africastalking
// TransferCall endpoint from CLI flags.
func BuildTransferCallPayload(africastalkingTransferCallBody string) (*africastalking.CallTransferPayload, error) {
	var err error
	var body TransferCallRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTransferCallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callLeg\": \"caller\",\n      \"holdMusicUrl\": \"Quibusdam sapiente natus placeat.\",\n      \"phoneNumber\": \"Et nihil excepturi.\",\n      \"sessionId\": \"Sint voluptas esse dolore et.\"\n   }'")
		}
		if !(body.CallLeg == "caller" || body.CallLeg == "callee") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.callLeg", body.CallLeg, []interface{}{"caller", "callee"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.CallTransferPayload{
		SessionID:    body.SessionID,
		PhoneNumber:  body.PhoneNumber,
		CallLeg:      body.CallLeg,
		HoldMusicURL: body.HoldMusicURL,
	}

	return v, nil
}

// BuildSayPayload builds the payload for the africastalking Say endpoint from
// CLI flags.
func BuildSayPayload(africastalkingSayBody string) (*africastalking.Say1, error) {
	var err error
	var body SayRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSayBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"playBeep\": true,\n      \"voice\": \"woman\"\n   }'")
		}
	}
	v := &africastalking.Say1{
		Voice:    body.Voice,
		PlayBeep: body.PlayBeep,
	}

	return v, nil
}

// BuildPlayPayload builds the payload for the africastalking Play endpoint
// from CLI flags.
func BuildPlayPayload(africastalkingPlayBody string) (*africastalking.Play1, error) {
	var err error
	var body PlayRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPlayBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"url\": \"Ea fuga repellendus asperiores iusto nulla repudiandae.\"\n   }'")
		}
	}
	v := &africastalking.Play1{
		URL: body.URL,
	}

	return v, nil
}

// BuildGetDigitsPayload builds the payload for the africastalking GetDigits
// endpoint from CLI flags.
func BuildGetDigitsPayload(africastalkingGetDigitsBody string) (*africastalking.GetDigits1, error) {
	var err error
	var body GetDigitsRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingGetDigitsBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callbackUrl\": \"Qui facere.\",\n      \"finishOnKey\": \"Voluptatum est sunt labore error voluptate.\",\n      \"numDigits\": \"Est consequatur delectus dolore architecto ratione.\",\n      \"timeout\": \"Nulla neque.\"\n   }'")
		}
	}
	v := &africastalking.GetDigits1{
		CallbackURL: body.CallbackURL,
		NumDigits:   body.NumDigits,
		Timeout:     body.Timeout,
		FinishOnKey: body.FinishOnKey,
	}

	return v, nil
}

// BuildDialPayload builds the payload for the africastalking Dial endpoint
// from CLI flags.
func BuildDialPayload(africastalkingDialBody string) (*africastalking.Dial1, error) {
	var err error
	var body DialRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingDialBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callerId\": \"Eaque nostrum cum.\",\n      \"maxDuration\": \"Ducimus eligendi.\",\n      \"phoneNumbers\": \"Ut ipsum eum.\",\n      \"record\": \"Molestiae enim laudantium iure veniam qui.\",\n      \"ringBackTone\": \"Nisi amet et at.\",\n      \"sequential\": \"Vero consequatur aliquid.\"\n   }'")
		}
	}
	v := &africastalking.Dial1{
		PhoneNumbers: body.PhoneNumbers,
		Record:       body.Record,
		Sequential:   body.Sequential,
		CallerID:     body.CallerID,
		RingBackTone: body.RingBackTone,
		MaxDuration:  body.MaxDuration,
	}

	return v, nil
}

// BuildRecordPayload builds the payload for the africastalking Record endpoint
// from CLI flags.
func BuildRecordPayload(africastalkingRecordBody string) (*africastalking.Record1, error) {
	var err error
	var body RecordRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingRecordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"callbackUrl\": \"Mollitia et omnis ratione.\",\n      \"finishOnKey\": \"Quasi animi omnis.\",\n      \"maxLength\": \"Odit pariatur.\",\n      \"playBeep\": \"Voluptatibus facilis similique labore quo.\",\n      \"timeout\": \"Repellendus atque.\",\n      \"trimSilence\": \"Quis pariatur similique tenetur temporibus qui magnam.\"\n   }'")
		}
	}
	v := &africastalking.Record1{
		FinishOnKey: body.FinishOnKey,
		MaxLength:   body.MaxLength,
		Timeout:     body.Timeout,
		TrimSilence: body.TrimSilence,
		PlayBeep:    body.PlayBeep,
		CallbackURL: body.CallbackURL,
	}

	return v, nil
}

// BuildEnqueuePayload builds the payload for the africastalking Enqueue
// endpoint from CLI flags.
func BuildEnqueuePayload(africastalkingEnqueueBody string) (*africastalking.Enqueue1, error) {
	var err error
	var body EnqueueRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingEnqueueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"holdMusic\": \"Perferendis libero sed sunt ea et.\",\n      \"name\": \"Nobis doloribus repudiandae ad inventore quam.\"\n   }'")
		}
	}
	v := &africastalking.Enqueue1{
		HoldMusic: body.HoldMusic,
		Name:      body.Name,
	}

	return v, nil
}

// BuildDequeuePayload builds the payload for the africastalking Dequeue
// endpoint from CLI flags.
func BuildDequeuePayload(africastalkingDequeueBody string) (*africastalking.Dequeue1, error) {
	var err error
	var body DequeueRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingDequeueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"name\": \"Rerum corporis ducimus reiciendis cumque.\",\n      \"phoneNumber\": \"Beatae soluta numquam ipsum.\"\n   }'")
		}
	}
	v := &africastalking.Dequeue1{
		PhoneNumber: body.PhoneNumber,
		Name:        body.Name,
	}

	return v, nil
}

// BuildRedirectPayload builds the payload for the africastalking Redirect
// endpoint from CLI flags.
func BuildRedirectPayload(africastalkingRedirectBody string) (*africastalking.Redirect1, error) {
	var err error
	var body RedirectRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingRedirectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Reject\": \"Voluptatem earum quo.\"\n   }'")
		}
	}
	v := &africastalking.Redirect1{
		Reject: body.Reject,
	}

	return v, nil
}

// BuildRejectPayload builds the payload for the africastalking Reject endpoint
// from CLI flags.
func BuildRejectPayload(africastalkingRejectBody string) (*africastalking.Reject1, error) {
	var err error
	var body RejectRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingRejectBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"Redirect\": \"Consequuntur fugiat eveniet quasi consequatur quia.\"\n   }'")
		}
	}
	v := &africastalking.Reject1{
		Redirect: body.Redirect,
	}

	return v, nil
}

// BuildQueuePayload builds the payload for the africastalking Queue endpoint
// from CLI flags.
func BuildQueuePayload(africastalkingQueueBody string) (*africastalking.QueuedCallsPayload, error) {
	var err error
	var body QueueRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingQueueBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"phoneNumbers\": \"Voluptatum dicta saepe voluptatibus.\",\n      \"username\": \"Quae voluptatem dolor ut iure et.\"\n   }'")
		}
	}
	v := &africastalking.QueuedCallsPayload{
		Username:     body.Username,
		PhoneNumbers: body.PhoneNumbers,
	}

	return v, nil
}

// BuildUploadMediaPayload builds the payload for the africastalking
// UploadMedia endpoint from CLI flags.
func BuildUploadMediaPayload(africastalkingUploadMediaBody string) (*africastalking.UploadMediaFile, error) {
	var err error
	var body UploadMediaRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingUploadMediaBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"url\": \"Assumenda a qui voluptatem.\",\n      \"username\": \"Voluptatem dolore non sequi odio.\"\n   }'")
		}
	}
	v := &africastalking.UploadMediaFile{
		Username: body.Username,
		URL:      body.URL,
	}

	return v, nil
}

// BuildMobileCheckoutPayload builds the payload for the africastalking
// MobileCheckout endpoint from CLI flags.
func BuildMobileCheckoutPayload(africastalkingMobileCheckoutBody string) (*africastalking.MobileCheckoutPayload, error) {
	var err error
	var body MobileCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": \"Sint possimus vel.\",\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Aut impedit ut in aut.\": \"Possimus atque consequuntur ex enim.\",\n         \"Ea quo assumenda et aut molestiae.\": \"Laboriosam aliquam aut neque.\"\n      },\n      \"phoneNumber\": \"Sed quibusdam molestiae ea.\",\n      \"productName\": \"Ullam rerum.\",\n      \"providerChannel\": \"Esse veniam quod sunt facere.\",\n      \"username\": \"Voluptas voluptas doloremque distinctio fugit.\"\n   }'")
		}
	}
	v := &africastalking.MobileCheckoutPayload{
		Username:        body.Username,
		ProductName:     body.ProductName,
		ProviderChannel: body.ProviderChannel,
		PhoneNumber:     body.PhoneNumber,
		CurrencyCode:    body.CurrencyCode,
		Amount:          body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildMobileB2CPayload builds the payload for the africastalking MobileB2C
// endpoint from CLI flags.
func BuildMobileB2CPayload(africastalkingMobileB2CBody string) (*africastalking.MobileB2CPayload, error) {
	var err error
	var body MobileB2CRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileB2CBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"productName\": \"Cum eum omnis assumenda.\",\n      \"recipients\": [\n         {\n            \"amount\": \"Omnis eos nulla eius atque quaerat.\",\n            \"currencyCode\": \"Voluptatum voluptas illo accusamus earum.\",\n            \"metadata\": {\n               \"Eum rerum nihil itaque molestiae nihil.\": \"Repellendus ea minus.\",\n               \"Itaque sunt dolor quisquam voluptatem et fuga.\": \"Exercitationem quis repellendus non necessitatibus.\"\n            },\n            \"name\": \"Sint dignissimos enim quod hic fugit beatae.\",\n            \"phoneNumber\": \"Quod et numquam soluta odit eum.\",\n            \"providerChannel\": \"Ut asperiores et perspiciatis.\",\n            \"reason\": \"BusinessPayment\"\n         },\n         {\n            \"amount\": \"Omnis eos nulla eius atque quaerat.\",\n            \"currencyCode\": \"Voluptatum voluptas illo accusamus earum.\",\n            \"metadata\": {\n               \"Eum rerum nihil itaque molestiae nihil.\": \"Repellendus ea minus.\",\n               \"Itaque sunt dolor quisquam voluptatem et fuga.\": \"Exercitationem quis repellendus non necessitatibus.\"\n            },\n            \"name\": \"Sint dignissimos enim quod hic fugit beatae.\",\n            \"phoneNumber\": \"Quod et numquam soluta odit eum.\",\n            \"providerChannel\": \"Ut asperiores et perspiciatis.\",\n            \"reason\": \"BusinessPayment\"\n         }\n      ],\n      \"username\": \"Sunt in.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		for _, e := range body.Recipients {
			if e != nil {
				if err2 := ValidateMobileRecipientsRequestBody(e); err2 != nil {
					err = goa.MergeErrors(err, err2)
				}
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.MobileB2CPayload{
		Username:    body.Username,
		ProductName: body.ProductName,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.MobileRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalMobileRecipientsRequestBodyToAfricastalkingMobileRecipients(val)
		}
	}

	return v, nil
}

// BuildMobileB2BPayload builds the payload for the africastalking MobileB2B
// endpoint from CLI flags.
func BuildMobileB2BPayload(africastalkingMobileB2BBody string) (*africastalking.MobileB2BPayload, error) {
	var err error
	var body MobileB2BRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingMobileB2BBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": \"Ducimus odio placeat placeat ipsa.\",\n      \"currencyCode\": \"KES\",\n      \"destinationAccount\": \"Tempora vel.\",\n      \"destinationChannel\": \"Et nihil earum sequi accusantium.\",\n      \"metadata\": \"Quam consequatur.\",\n      \"productName\": \"Architecto atque alias ad et excepturi.\",\n      \"provider\": \"TigoTanzania\",\n      \"transferType\": \"BusinessPayBill\",\n      \"username\": \"Delectus voluptatem est in voluptas.\"\n   }'")
		}
	}
	v := &africastalking.MobileB2BPayload{
		Username:           body.Username,
		ProductName:        body.ProductName,
		Provider:           body.Provider,
		TransferType:       body.TransferType,
		CurrencyCode:       body.CurrencyCode,
		Amount:             body.Amount,
		DestinationChannel: body.DestinationChannel,
		DestinationAccount: body.DestinationAccount,
		Metadata:           body.Metadata,
	}

	return v, nil
}

// BuildBankCheckoutPayload builds the payload for the africastalking Bank
// Checkout endpoint from CLI flags.
func BuildBankCheckoutPayload(africastalkingBankCheckoutBody string) (*africastalking.BankCheckoutPayload, error) {
	var err error
	var body BankCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 0.5230229290853498,\n      \"bankAccount\": {\n         \"accountName\": \"Sequi temporibus.\",\n         \"accountNumber\": \"Eum quibusdam maxime dolorum ad sit.\",\n         \"bankCode\": 8697003489270813697,\n         \"dateOfBirth\": \"2010-03-27\"\n      },\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Iste aut molestiae quis cupiditate doloribus et.\": \"Incidunt neque minus repellat non.\"\n      },\n      \"narration\": \"Debitis ex nihil impedit atque eum eaque.\",\n      \"productName\": \"Illo harum quo voluptas magni iste.\",\n      \"username\": \"Corrupti consequuntur dolor corporis.\"\n   }'")
		}
		if body.BankAccount == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("bankAccount", "body"))
		}
		if body.BankAccount != nil {
			if err2 := ValidateBankAccountRequestBody(body.BankAccount); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BankCheckoutPayload{
		Username:     body.Username,
		ProductName:  body.ProductName,
		CurrencyCode: body.CurrencyCode,
		Amount:       body.Amount,
		Narration:    body.Narration,
	}
	if body.BankAccount != nil {
		v.BankAccount = marshalBankAccountRequestBodyToAfricastalkingBankAccount(body.BankAccount)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildBankCheckoutValidatePayload builds the payload for the africastalking
// BankCheckoutValidate endpoint from CLI flags.
func BuildBankCheckoutValidatePayload(africastalkingBankCheckoutValidateBody string) (*africastalking.BankCheckoutValidatePayload, error) {
	var err error
	var body BankCheckoutValidateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankCheckoutValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"otp\": \"Sint sint nobis repellat et voluptatem.\",\n      \"transactionId\": \"Quisquam in tempora sequi.\",\n      \"username\": \"Voluptates dolor quos.\"\n   }'")
		}
	}
	v := &africastalking.BankCheckoutValidatePayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
		Otp:           body.Otp,
	}

	return v, nil
}

// BuildBankTransferPayload builds the payload for the africastalking
// BankTransfer endpoint from CLI flags.
func BuildBankTransferPayload(africastalkingBankTransferBody string) (*africastalking.BankTransferPayload, error) {
	var err error
	var body BankTransferRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingBankTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"productName\": \"Molestiae est.\",\n      \"recipients\": [\n         {\n            \"accountName\": \"Unde ea.\",\n            \"accountNumber\": \"Incidunt maxime libero sint.\",\n            \"amount\": \"Possimus vel.\",\n            \"bankAccount\": \"Dicta consequuntur.\",\n            \"bankCode\": \"Totam non iure officiis.\",\n            \"currencyCode\": \"Inventore consectetur mollitia eum.\",\n            \"dateOfBirth\": \"Et aut.\",\n            \"metadata\": {\n               \"Quidem eaque debitis nam voluptas est ducimus.\": \"Nisi sint eum et id repudiandae.\"\n            },\n            \"narration\": \"Quos et veniam.\"\n         },\n         {\n            \"accountName\": \"Unde ea.\",\n            \"accountNumber\": \"Incidunt maxime libero sint.\",\n            \"amount\": \"Possimus vel.\",\n            \"bankAccount\": \"Dicta consequuntur.\",\n            \"bankCode\": \"Totam non iure officiis.\",\n            \"currencyCode\": \"Inventore consectetur mollitia eum.\",\n            \"dateOfBirth\": \"Et aut.\",\n            \"metadata\": {\n               \"Quidem eaque debitis nam voluptas est ducimus.\": \"Nisi sint eum et id repudiandae.\"\n            },\n            \"narration\": \"Quos et veniam.\"\n         },\n         {\n            \"accountName\": \"Unde ea.\",\n            \"accountNumber\": \"Incidunt maxime libero sint.\",\n            \"amount\": \"Possimus vel.\",\n            \"bankAccount\": \"Dicta consequuntur.\",\n            \"bankCode\": \"Totam non iure officiis.\",\n            \"currencyCode\": \"Inventore consectetur mollitia eum.\",\n            \"dateOfBirth\": \"Et aut.\",\n            \"metadata\": {\n               \"Quidem eaque debitis nam voluptas est ducimus.\": \"Nisi sint eum et id repudiandae.\"\n            },\n            \"narration\": \"Quos et veniam.\"\n         }\n      ],\n      \"username\": \"Ut perferendis sunt ipsam earum.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if len(body.Recipients) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.recipients", body.Recipients, len(body.Recipients), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.BankTransferPayload{
		Username:    body.Username,
		ProductName: body.ProductName,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.TransferRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalTransferRecipientsRequestBodyToAfricastalkingTransferRecipients(val)
		}
	}

	return v, nil
}

// BuildCardCheckoutPayload builds the payload for the africastalking
// CardCheckout endpoint from CLI flags.
func BuildCardCheckoutPayload(africastalkingCardCheckoutBody string) (*africastalking.CardCheckoutPayload, error) {
	var err error
	var body CardCheckoutRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingCardCheckoutBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 0.3079408639331346,\n      \"checkoutToken\": \"Nam ad adipisci voluptates ut.\",\n      \"currencyCode\": \"KES\",\n      \"metadata\": {\n         \"Ad voluptatem veritatis porro quo est deleniti.\": \"Quia quas dolorum distinctio.\"\n      },\n      \"narration\": \"Debitis numquam et tempore non iste.\",\n      \"paymentCard\": {\n         \"authToken\": \"Doloribus fugiat eos distinctio.\",\n         \"countryCode\": \"NG\",\n         \"cvvNumber\": 7038034840975459000,\n         \"expiryMonth\": 8002608393396165428,\n         \"expiryYear\": 5166870202654348333,\n         \"number\": \"Sint consequatur quis praesentium sapiente.\"\n      },\n      \"productName\": \"Sint aut accusantium voluptate doloribus.\",\n      \"username\": \"Hic aut eaque qui quo.\"\n   }'")
		}
		if body.PaymentCard != nil {
			if err2 := ValidatePaymentCardRequestBody(body.PaymentCard); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.CardCheckoutPayload{
		Username:      body.Username,
		ProductName:   body.ProductName,
		CheckoutToken: body.CheckoutToken,
		CurrencyCode:  body.CurrencyCode,
		Amount:        body.Amount,
		Narration:     body.Narration,
	}
	if body.PaymentCard != nil {
		v.PaymentCard = marshalPaymentCardRequestBodyToAfricastalkingPaymentCard(body.PaymentCard)
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildCardCheckoutValidatePayload builds the payload for the africastalking
// CardCheckoutValidate endpoint from CLI flags.
func BuildCardCheckoutValidatePayload(africastalkingCardCheckoutValidateBody string) (*africastalking.CardCheckoutValidatePayload, error) {
	var err error
	var body CardCheckoutValidateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingCardCheckoutValidateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"otp\": \"Necessitatibus nihil repellat.\",\n      \"transactionId\": \"Alias ullam doloribus qui fugiat natus dolor.\",\n      \"username\": \"Voluptatem atque modi.\"\n   }'")
		}
	}
	v := &africastalking.CardCheckoutValidatePayload{
		Username:      body.Username,
		TransactionID: body.TransactionID,
		Otp:           body.Otp,
	}

	return v, nil
}

// BuildWalletTransferPayload builds the payload for the africastalking
// WalletTransfer endpoint from CLI flags.
func BuildWalletTransferPayload(africastalkingWalletTransferBody string) (*africastalking.WalletTransferPayload, error) {
	var err error
	var body WalletTransferRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingWalletTransferBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 0.7660151954115325,\n      \"currencyCode\": \"Harum impedit sunt omnis rerum autem suscipit.\",\n      \"metadata\": {\n         \"Aut enim deserunt accusamus consequuntur rem.\": \"Laudantium aut magnam tenetur.\"\n      },\n      \"productName\": \"Numquam vitae nam sed.\",\n      \"targetProductCode\": \"Inventore ea vel est consequatur.\",\n      \"username\": \"Et quis voluptas enim consequatur placeat.\"\n   }'")
		}
		if body.Metadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.WalletTransferPayload{
		Username:          body.Username,
		ProductName:       body.ProductName,
		TargetProductCode: body.TargetProductCode,
		CurrencyCode:      body.CurrencyCode,
		Amount:            body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildTopupStashPayload builds the payload for the africastalking TopupStash
// endpoint from CLI flags.
func BuildTopupStashPayload(africastalkingTopupStashBody string) (*africastalking.TopupStashPayload, error) {
	var err error
	var body TopupStashRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingTopupStashBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"amount\": 0.510901788493485,\n      \"currencyCode\": \"Corrupti esse quo non esse quia enim.\",\n      \"metadata\": {\n         \"Nihil minima et labore voluptatem perspiciatis.\": \"Exercitationem ratione.\"\n      },\n      \"productName\": \"Provident sint rerum eum sed eius aut.\",\n      \"username\": \"Similique qui facere minima.\"\n   }'")
		}
		if body.Metadata == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("metadata", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.TopupStashPayload{
		Username:     body.Username,
		ProductName:  body.ProductName,
		CurrencyCode: body.CurrencyCode,
		Amount:       body.Amount,
	}
	if body.Metadata != nil {
		v.Metadata = make(map[string]string, len(body.Metadata))
		for key, val := range body.Metadata {
			tk := key
			tv := val
			v.Metadata[tk] = tv
		}
	}

	return v, nil
}

// BuildSendAirtimePayload builds the payload for the africastalking
// SendAirtime endpoint from CLI flags.
func BuildSendAirtimePayload(africastalkingSendAirtimeBody string) (*africastalking.AirtimePayload, error) {
	var err error
	var body SendAirtimeRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingSendAirtimeBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"recipients\": [\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         },\n         {\n            \"amount \": \"KES 100.50\",\n            \"phoneNumber\": \"+234811222333\"\n         }\n      ],\n      \"username\": \"Eum laudantium odit praesentium voluptas dignissimos eius.\"\n   }'")
		}
		if body.Recipients == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("recipients", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &africastalking.AirtimePayload{
		Username: body.Username,
	}
	if body.Recipients != nil {
		v.Recipients = make([]*africastalking.AirtimeRecipients, len(body.Recipients))
		for i, val := range body.Recipients {
			v.Recipients[i] = marshalAirtimeRecipientsRequestBodyToAfricastalkingAirtimeRecipients(val)
		}
	}

	return v, nil
}

// BuildPublishIoTPayload builds the payload for the africastalking PublishIoT
// endpoint from CLI flags.
func BuildPublishIoTPayload(africastalkingPublishIoTBody string) (*africastalking.IoTPayload, error) {
	var err error
	var body PublishIoTRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingPublishIoTBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"deviceGroup\": \"Fuga pariatur voluptates.\",\n      \"payload\": \"Maiores eos quisquam quis nisi neque.\",\n      \"topic\": \"\\u003cusername\\u003e/\\u003cdevice-group\\u003e/\\u003cthe-topic\\u003e\",\n      \"username\": \"Repellat explicabo similique.\"\n   }'")
		}
	}
	v := &africastalking.IoTPayload{
		Username:    body.Username,
		DeviceGroup: body.DeviceGroup,
		Topic:       body.Topic,
		Payload:     body.Payload,
	}

	return v, nil
}

// BuildGeneratePayload builds the payload for the africastalking Generate
// endpoint from CLI flags.
func BuildGeneratePayload(africastalkingGenerateBody string) (*africastalking.GeneratePayload, error) {
	var err error
	var body GenerateRequestBody
	{
		err = json.Unmarshal([]byte(africastalkingGenerateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, example of valid JSON:\n%s", "'{\n      \"apiKey\": \"Quia omnis sed.\",\n      \"username\": \"sandbox\"\n   }'")
		}
	}
	v := &africastalking.GeneratePayload{
		Username: body.Username,
		APIKey:   body.APIKey,
	}

	return v, nil
}
